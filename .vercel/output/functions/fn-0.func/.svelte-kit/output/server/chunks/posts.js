import { r as identity, c as create_ssr_component, v as validate_component, l as compute_rest_props, e as escape, t as null_to_empty, b as spread, d as escape_object, p as escape_attribute_value, g as add_attribute, i as each, h as subscribe, n as set_store_value } from "./ssr.js";
import { A as createCommand, z as getState, B as createGroup, x as getCtx$2, C as generateId, V as VALUE_ATTR, D as isBrowser, I as ITEM_SELECTOR, E as isHTMLInputElement, F as getGroup, G as isUndefined } from "./marked.esm.js";
import "clsx";
import { P, U as Ul, L as Li, H as H2, A, a as Hr } from "./ul.js";
import { E as cubicOut, I as Icon, c as cn, C as localToGithubURL, f as formatDate, F as setCtx, H as getCtx, J as getAttrs, K as setCtx$1, L as getCtx$1, M as getAttrs$1, z as flyAndScale, B as Button, d as goto, t as tick } from "./index2.js";
import { X, T as Theme_toggle } from "./theme-toggle.js";
import { k as derived } from "./exports.js";
import { p as page } from "./stores.js";
import { D as DEV } from "./prod-ssr.js";
import { M as Masonry } from "./masonry.js";
import { c as createDispatcher } from "./events.js";
import { B as Badge } from "./badge.js";
const dev = DEV;
function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay,
    duration,
    easing,
    css: (t) => `opacity: ${t * o}`
  };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = "y" } = {}) {
  const style = getComputedStyle(node);
  const opacity = +style.opacity;
  const primary_property = axis === "y" ? "height" : "width";
  const primary_property_value = parseFloat(style[primary_property]);
  const secondary_properties = axis === "y" ? ["top", "bottom"] : ["left", "right"];
  const capitalized_secondary_properties = secondary_properties.map(
    (e) => `${e[0].toUpperCase()}${e.slice(1)}`
  );
  const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
  const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
  const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
  const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
  const border_width_start_value = parseFloat(
    style[`border${capitalized_secondary_properties[0]}Width`]
  );
  const border_width_end_value = parseFloat(
    style[`border${capitalized_secondary_properties[1]}Width`]
  );
  return {
    delay,
    duration,
    easing,
    css: (t) => `overflow: hidden;opacity: ${Math.min(t * 20, 1) * opacity};${primary_property}: ${t * primary_property_value}px;padding-${secondary_properties[0]}: ${t * padding_start_value}px;padding-${secondary_properties[1]}: ${t * padding_end_value}px;margin-${secondary_properties[0]}: ${t * margin_start_value}px;margin-${secondary_properties[1]}: ${t * margin_end_value}px;border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
  };
}
const Calendar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "4",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "line",
      {
        "x1": "16",
        "x2": "16",
        "y1": "2",
        "y2": "6"
      }
    ],
    [
      "line",
      {
        "x1": "8",
        "x2": "8",
        "y1": "2",
        "y2": "6"
      }
    ],
    [
      "line",
      {
        "x1": "3",
        "x2": "21",
        "y1": "10",
        "y2": "10"
      }
    ]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "calendar" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const Calendar$1 = Calendar;
const Chevrons_up_down = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [["path", { "d": "m7 15 5 5 5-5" }], ["path", { "d": "m7 9 5-5 5 5" }]];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "chevrons-up-down" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const ChevronsUpDown = Chevrons_up_down;
const Copy = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    [
      "rect",
      {
        "width": "14",
        "height": "14",
        "x": "8",
        "y": "8",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      {
        "d": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
      }
    ]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "copy" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const Copy$1 = Copy;
const Info = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M12 16v-4" }],
    ["path", { "d": "M12 8h.01" }]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "info" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const Info$1 = Info;
const Search = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    ["circle", { "cx": "11", "cy": "11", "r": "8" }],
    ["path", { "d": "m21 21-4.3-4.3" }]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "search" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const Search$1 = Search;
const Tag$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const iconNode = [
    [
      "path",
      {
        "d": "M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"
      }
    ],
    ["path", { "d": "M7 7h.01" }]
  ];
  return `${validate_component(Icon, "Icon").$$render($$result, Object.assign({}, { name: "tag" }, $$props, { iconNode }), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const Tag$2 = Tag$1;
const css = {
  code: "[data-theme='light'].svelte-8oqj2f:is(.dark *){display:none !important\n}[data-theme='dark'].svelte-8oqj2f{display:none !important\n}[data-theme='dark'].svelte-8oqj2f:is(.dark *){display:flex !important\n}.min-light.svelte-8oqj2f{display:block !important\n}.min-light.svelte-8oqj2f:is(.dark *){display:none !important\n}.Moonlight.svelte-8oqj2f{display:none !important\n}.Moonlight.svelte-8oqj2f:is(.dark *){display:block !important\n}",
  map: null
};
const Pre = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["title"]);
  let { title = "" } = $$props;
  let codeElement;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  $$result.css.add(css);
  return `<div class="${escape(null_to_empty(cn($$restProps.class, "mb-2")), true) + " svelte-8oqj2f"}">${``}  <pre${spread(
    [
      { tabindex: "0" },
      escape_object($$restProps),
      {
        class: escape_attribute_value(cn("rounded-lg bg-slate-50 dark:bg-zinc-900 max-h-[450px] border-2", "mt-[14px]"))
      }
    ],
    { classes: "svelte-8oqj2f" }
  )}${add_attribute("this", codeElement, 0)}>			${slots.default ? slots.default({}) : ``}
	</pre> ${`<button class="absolute inline-flex items-center justify-center w-6 h-6 p-0 text-sm font-medium no-highlight rounded-md transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:bg-slate-200 dark:hover:bg-zinc-700 right-2 top-2">${`<span>${validate_component(Copy$1, "Copy").$$render($$result, { class: "w-4 h-4" }, {}, {})}</span> `}</button>`} </div>`;
});
const H3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<h3${spread(
    [
      {
        class: escape_attribute_value(cn("mt-8 scroll-m-20 text-xl font-semibold tracking-tight", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}>${slots.default ? slots.default({}) : ``}</h3>`;
});
const Img = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class", "src", "alt"]);
  let { class: className = void 0 } = $$props;
  let { src = void 0 } = $$props;
  let { alt = void 0 } = $$props;
  if (src?.startsWith("/posts")) {
    src = localToGithubURL({ src });
  }
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  if ($$props.src === void 0 && $$bindings.src && src !== void 0)
    $$bindings.src(src);
  if ($$props.alt === void 0 && $$bindings.alt && alt !== void 0)
    $$bindings.alt(alt);
  return `<div class="flex items-center justify-center flex-col gap-1"><img${spread(
    [
      { src: escape_attribute_value(src) },
      { alt: escape_attribute_value(alt) },
      {
        class: escape_attribute_value(cn("rounded-md mt-4", className))
      },
      escape_object($$restProps),
      { loading: "lazy" }
    ],
    {}
  )}> <p class="text-sm text-center text-muted-foreground">${escape(alt ? alt : "")}</p></div>`;
});
const Ol = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<ol${spread(
    [
      {
        class: escape_attribute_value(cn("my-6 ml-6 list-decimal", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}>${slots.default ? slots.default({}) : ``}</ol>`;
});
const Blockquote = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<blockquote${spread(
    [
      {
        class: escape_attribute_value(cn("mt-6 border-l-8 border-primary italic bg-muted rounded-lg", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}><div class="p-4 pr-2">${validate_component(Info$1, "Info").$$render($$result, { class: "-mb-3" }, {}, {})} ${slots.default ? slots.default({}) : ``}</div></blockquote>`;
});
const Math$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { eq } = $$props;
  if ($$props.eq === void 0 && $$bindings.eq && eq !== void 0)
    $$bindings.eq(eq);
  return `${$$result.head += `<!-- HEAD_svelte-p4sya8_START --><script data-svelte-h="svelte-tc2v7">MathJax = {
			tex: {
				inlineMath: [
					['$', '$'],
					['\\\\(', '\\\\)']
				]
			}
		};
	<\/script><script src="https://polyfill.io/v3/polyfill.min.js?features=es6" data-svelte-h="svelte-1bmsrs3"><\/script><script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" data-svelte-h="svelte-9g95x4"><\/script><!-- HEAD_svelte-p4sya8_END -->`, ""} <p class="inline-block -mb-6"><!-- HTML_TAG_START -->${eq}<!-- HTML_TAG_END --></p>`;
});
const Table = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<div class="w-full overflow-auto my-5"><table${spread(
    [
      {
        class: escape_attribute_value(cn("w-full caption-bottom text-sm border border-border rounded-lg", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}>${slots.default ? slots.default({}) : ``}</table></div>`;
});
const Td = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<td${spread(
    [
      {
        class: escape_attribute_value(cn("border p-4 text-center align-middle [&:has([role=checkbox])]:pr-0", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}>${slots.default ? slots.default({}) : ``}</td>`;
});
const Th = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<th${spread(
    [
      {
        class: escape_attribute_value(cn("h-12 border border-zinc-500 bg-muted px-4 text-center align-middle text-lg font-medium [&:has([role=checkbox])]:pr-0", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}>${slots.default ? slots.default({}) : ``}</th>`;
});
const Thead = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return ` <thead${spread(
    [
      {
        class: escape_attribute_value(cn("[&_tr]:border-b", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}>${slots.default ? slots.default({}) : ``}</thead>`;
});
const Tr = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<tr${spread(
    [
      {
        class: escape_attribute_value(cn("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}>${slots.default ? slots.default({}) : ``}</tr>`;
});
const Tbody = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<tbody${spread(
    [
      {
        class: escape_attribute_value(cn("[&_tr:last-child]:border-0", className))
      },
      escape_object($$restProps)
    ],
    {}
  )}>${slots.default ? slots.default({}) : ``}</tbody>`;
});
const Layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { title } = $$props;
  let { date } = $$props;
  let { description } = $$props;
  let { tags } = $$props;
  let { image } = $$props;
  let { draft } = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.date === void 0 && $$bindings.date && date !== void 0)
    $$bindings.date(date);
  if ($$props.description === void 0 && $$bindings.description && description !== void 0)
    $$bindings.description(description);
  if ($$props.tags === void 0 && $$bindings.tags && tags !== void 0)
    $$bindings.tags(tags);
  if ($$props.image === void 0 && $$bindings.image && image !== void 0)
    $$bindings.image(image);
  if ($$props.draft === void 0 && $$bindings.draft && draft !== void 0)
    $$bindings.draft(draft);
  return `${$$result.head += `<!-- HEAD_svelte-jvwrpj_START --><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous"><!-- HEAD_svelte-jvwrpj_END -->`, ""} ${slots.default ? slots.default({
    title,
    date,
    description,
    tags,
    image,
    draft
  }) : ``}`;
});
const metadata$9 = {
  "title": "Integrating Auth.js (NextAuth) and Prisma with SvelteKit",
  "description": "let's see how to integrate Github and Google OAuth authentication using Auth.js (NextAuth) and Prisma with SvelteKit and protected routes and redirects",
  "date": "2023-11-15",
  "image": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*PLD7lQ5hH8_6QVfDtCflcg.png",
  "tags": ["SvelteKit", "Prisma"],
  "draft": false
};
const Page$7 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$9), {}, {
    default: () => {
      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Let&#39;s see how we can implement Auth.js (NextAuth) and Prisma with SvelteKit`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `<strong data-svelte-h="svelte-1nncehc">Note</strong>: Auth.js is still experimental at the time of writing this article. So there might be some breaking changes in the future. But it reamins same for the most part.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `we will be using the following stack for this project.`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `SvelteKit`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `TypeScript`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Prisma`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Auth.js (NextAuth)`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `TailwindCSS`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Shadcn-ui (svelte port made by Huntabyte)`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `So, let&#39;s get started.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "creating-a-sveltekit-project-and-adding-tailwindcss,-shadcn-ui",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Creating a SvelteKit project and adding TailwindCSS, Shadcn-ui`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `First, we need to create a sveltekit project. We can do that by using the following command.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npm create svelte@latest my-app</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npm create svelte@latest my-app</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `chose your preferred configuration and then add tailwindcss to the project using the below command.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npx svelte-add@latest tailwindcss</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npx svelte-add@latest tailwindcss</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `and install the dependencies using the following command.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npm install</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npm install</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Now, we need to install shadcn-ui.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npx shadcn-svelte@latest init</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npx shadcn-svelte@latest init</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `You will be asked a few questions to configure`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">Which style would you like to use? › Default</span></span>
<span data-line=""><span style="color: #c8d3f5">Which color would you like to use as base color? › Slate</span></span>
<span data-line=""><span style="color: #c8d3f5">Where is your global CSS file? › src/app.postcss</span></span>
<span data-line=""><span style="color: #c8d3f5">Where is your tailwind.config.[cjs|js|ts] located? › tailwind.config.js</span></span>
<span data-line=""><span style="color: #c8d3f5">Configure the import alias for components: › $lib/components</span></span>
<span data-line=""><span style="color: #c8d3f5">Configure the import alias for utils: › $lib/utils</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">Which style would you like to use? › Default</span></span>
<span data-line=""><span style="color: #24292eff">Which color would you like to use as base color? › Slate</span></span>
<span data-line=""><span style="color: #24292eff">Where is your global CSS file? › src/app.postcss</span></span>
<span data-line=""><span style="color: #24292eff">Where is your tailwind.config.[cjs|js|ts] located? › tailwind.config.js</span></span>
<span data-line=""><span style="color: #24292eff">Configure the import alias for components: › $lib/components</span></span>
<span data-line=""><span style="color: #24292eff">Configure the import alias for utils: › $lib/utils</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `we will be using few components from shadcn-ui. so we need to install them.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npx shadcn-svelte@latest add button card avatar dropdown-menu</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npx shadcn-svelte@latest add button card avatar dropdown-menu</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(H2, "Components.h2").$$render($$result, { id: "setting-up-prisma", headerTag: "h2" }, {}, {
        default: () => {
          return `Setting up Prisma`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Now, we need to setup prisma. We can do that by using the following command and we also install prisma client and adapter for Auth.js (NextAuth).
I will be using vercel postgres database. You can use any database you want.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npm install prisma @prisma/client @next-auth/prisma-adapter</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npm install prisma @prisma/client @next-auth/prisma-adapter</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s set up prisma using`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npx prisma init</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npx prisma init</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this will generate a <code data-svelte-h="svelte-vct8k3">schema.prisma</code> file in a directory named prisma. We need to edit it to add our models. We will be adding a user model and a session model.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "auth.js-(nextauth)-setup",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Auth.js (NextAuth) setup`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Now, we need to setup Auth.js (NextAuth). We can do that by using the following command.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npm install @auth/core @auth/sveltekit</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npm install @auth/core @auth/sveltekit</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Auth.js (NextAuth) uses a database adapter to store the user data. We will be using prisma adapter (which we&#39;ve installed earlier) for this project.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Auth.js (NextAuth) provides us with different models for the database like <code data-svelte-h="svelte-trix4f">User</code>, <code data-svelte-h="svelte-1bi3952">Session</code>, <code data-svelte-h="svelte-1wfl9gn">Account</code>, <code data-svelte-h="svelte-4cj5a2">VerificationRequest</code> etc.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `here are those schemas. it&#39;s very much important to add these as it is to your <code data-svelte-h="svelte-vct8k3">schema.prisma</code> file. I&#39;ve tried other different schema models but it didn&#39;t work. so i&#39;m using these models. you can also use these models.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "prisma",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="prisma" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">model Account &#123;</span></span>
<span data-line=""><span style="color: #c8d3f5">  id                 String  @id @default(cuid())</span></span>
<span data-line=""><span style="color: #c8d3f5">  userId             String</span></span>
<span data-line=""><span style="color: #c8d3f5">  type               String</span></span>
<span data-line=""><span style="color: #c8d3f5">  provider           String</span></span>
<span data-line=""><span style="color: #c8d3f5">  providerAccountId  String</span></span>
<span data-line=""><span style="color: #c8d3f5">  refresh_token      String?  @db.Text</span></span>
<span data-line=""><span style="color: #c8d3f5">  access_token       String?  @db.Text</span></span>
<span data-line=""><span style="color: #c8d3f5">  expires_at         Int?</span></span>
<span data-line=""><span style="color: #c8d3f5">  token_type         String?</span></span>
<span data-line=""><span style="color: #c8d3f5">  scope              String?</span></span>
<span data-line=""><span style="color: #c8d3f5">  id_token           String?  @db.Text</span></span>
<span data-line=""><span style="color: #c8d3f5">  session_state      String?</span></span>
<span data-line=""><span style="color: #c8d3f5"></span></span>
<span data-line=""><span style="color: #c8d3f5">  user User @relation(fields: [userId], references: [id], onDelete: Cascade)</span></span>
<span data-line=""><span style="color: #c8d3f5"></span></span>
<span data-line=""><span style="color: #c8d3f5">  @@unique([provider, providerAccountId])</span></span>
<span data-line=""><span style="color: #c8d3f5">  @@index([userId])</span></span>
<span data-line=""><span style="color: #c8d3f5">&#125;</span></span>
<span data-line=""><span style="color: #c8d3f5"></span></span>
<span data-line=""><span style="color: #c8d3f5">model Session &#123;</span></span>
<span data-line=""><span style="color: #c8d3f5">  id           String   @id @default(cuid())</span></span>
<span data-line=""><span style="color: #c8d3f5">  sessionToken String   @unique</span></span>
<span data-line=""><span style="color: #c8d3f5">  userId       String</span></span>
<span data-line=""><span style="color: #c8d3f5">  expires      DateTime</span></span>
<span data-line=""><span style="color: #c8d3f5">  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)</span></span>
<span data-line=""><span style="color: #c8d3f5"></span></span>
<span data-line=""><span style="color: #c8d3f5">  @@index([userId])</span></span>
<span data-line=""><span style="color: #c8d3f5">&#125;</span></span>
<span data-line=""><span style="color: #c8d3f5"></span></span>
<span data-line=""><span style="color: #c8d3f5">model User &#123;</span></span>
<span data-line=""><span style="color: #c8d3f5">  id            String    @id @default(cuid())</span></span>
<span data-line=""><span style="color: #c8d3f5">  name          String?</span></span>
<span data-line=""><span style="color: #c8d3f5">  email         String?   @unique</span></span>
<span data-line=""><span style="color: #c8d3f5">  emailVerified DateTime?</span></span>
<span data-line=""><span style="color: #c8d3f5">  image         String?</span></span>
<span data-line=""><span style="color: #c8d3f5">  accounts      Account[]</span></span>
<span data-line=""><span style="color: #c8d3f5">  sessions      Session[]</span></span>
<span data-line=""><span style="color: #c8d3f5">&#125;</span></span>
<span data-line=""><span style="color: #c8d3f5"></span></span>
<span data-line=""><span style="color: #c8d3f5">model VerificationToken &#123;</span></span>
<span data-line=""><span style="color: #c8d3f5">  identifier String</span></span>
<span data-line=""><span style="color: #c8d3f5">  token      String   @unique</span></span>
<span data-line=""><span style="color: #c8d3f5">  expires    DateTime</span></span>
<span data-line=""><span style="color: #c8d3f5"></span></span>
<span data-line=""><span style="color: #c8d3f5">  @@unique([identifier, token])</span></span>
<span data-line=""><span style="color: #c8d3f5">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="prisma" data-theme="light" data-svelte-h="svelte-1w85igi">schema.prisma</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "prisma",
          "data-theme": "light",
          __title__: "schema.prisma"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="prisma" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">model Account &#123;</span></span>
<span data-line=""><span style="color: #24292eff">  id                 String  @id @default(cuid())</span></span>
<span data-line=""><span style="color: #24292eff">  userId             String</span></span>
<span data-line=""><span style="color: #24292eff">  type               String</span></span>
<span data-line=""><span style="color: #24292eff">  provider           String</span></span>
<span data-line=""><span style="color: #24292eff">  providerAccountId  String</span></span>
<span data-line=""><span style="color: #24292eff">  refresh_token      String?  @db.Text</span></span>
<span data-line=""><span style="color: #24292eff">  access_token       String?  @db.Text</span></span>
<span data-line=""><span style="color: #24292eff">  expires_at         Int?</span></span>
<span data-line=""><span style="color: #24292eff">  token_type         String?</span></span>
<span data-line=""><span style="color: #24292eff">  scope              String?</span></span>
<span data-line=""><span style="color: #24292eff">  id_token           String?  @db.Text</span></span>
<span data-line=""><span style="color: #24292eff">  session_state      String?</span></span>
<span data-line=""><span style="color: #24292eff"></span></span>
<span data-line=""><span style="color: #24292eff">  user User @relation(fields: [userId], references: [id], onDelete: Cascade)</span></span>
<span data-line=""><span style="color: #24292eff"></span></span>
<span data-line=""><span style="color: #24292eff">  @@unique([provider, providerAccountId])</span></span>
<span data-line=""><span style="color: #24292eff">  @@index([userId])</span></span>
<span data-line=""><span style="color: #24292eff">&#125;</span></span>
<span data-line=""><span style="color: #24292eff"></span></span>
<span data-line=""><span style="color: #24292eff">model Session &#123;</span></span>
<span data-line=""><span style="color: #24292eff">  id           String   @id @default(cuid())</span></span>
<span data-line=""><span style="color: #24292eff">  sessionToken String   @unique</span></span>
<span data-line=""><span style="color: #24292eff">  userId       String</span></span>
<span data-line=""><span style="color: #24292eff">  expires      DateTime</span></span>
<span data-line=""><span style="color: #24292eff">  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)</span></span>
<span data-line=""><span style="color: #24292eff"></span></span>
<span data-line=""><span style="color: #24292eff">  @@index([userId])</span></span>
<span data-line=""><span style="color: #24292eff">&#125;</span></span>
<span data-line=""><span style="color: #24292eff"></span></span>
<span data-line=""><span style="color: #24292eff">model User &#123;</span></span>
<span data-line=""><span style="color: #24292eff">  id            String    @id @default(cuid())</span></span>
<span data-line=""><span style="color: #24292eff">  name          String?</span></span>
<span data-line=""><span style="color: #24292eff">  email         String?   @unique</span></span>
<span data-line=""><span style="color: #24292eff">  emailVerified DateTime?</span></span>
<span data-line=""><span style="color: #24292eff">  image         String?</span></span>
<span data-line=""><span style="color: #24292eff">  accounts      Account[]</span></span>
<span data-line=""><span style="color: #24292eff">  sessions      Session[]</span></span>
<span data-line=""><span style="color: #24292eff">&#125;</span></span>
<span data-line=""><span style="color: #24292eff"></span></span>
<span data-line=""><span style="color: #24292eff">model VerificationToken &#123;</span></span>
<span data-line=""><span style="color: #24292eff">  identifier String</span></span>
<span data-line=""><span style="color: #24292eff">  token      String   @unique</span></span>
<span data-line=""><span style="color: #24292eff">  expires    DateTime</span></span>
<span data-line=""><span style="color: #24292eff"></span></span>
<span data-line=""><span style="color: #24292eff">  @@unique([identifier, token])</span></span>
<span data-line=""><span style="color: #24292eff">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you need to add these models to your <code data-svelte-h="svelte-vct8k3">schema.prisma</code> file.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">generator client </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">provider</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">prisma-client-js</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">datasource db </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">provider</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">postgresql</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">url</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #65BCFF">env</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">POSTGRES_PRISMA_URL</span><span style="color: #86E1FC">"</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// uses connection pooling</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">directUrl</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #65BCFF">env</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">POSTGRES_URL_NON_POOLING</span><span style="color: #86E1FC">"</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// uses a direct connection</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">model Account </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">id</span><span style="color: #B4C2F0">                 </span><span style="color: #C8D3F5">String</span><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">@</span><span style="color: #C8D3F5">id</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">@</span><span style="color: #65BCFF">default</span><span style="color: #B4C2F0">(</span><span style="color: #65BCFF">cuid</span><span style="color: #B4C2F0">())</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">userId</span><span style="color: #B4C2F0">             </span><span style="color: #C8D3F5">String</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C099FF">type</span><span style="color: #B4C2F0">               </span><span style="color: #FFC777">String</span></span>
<span data-line=""><span style="color: #B4C2F0">  provider           String</span></span>
<span data-line=""><span style="color: #B4C2F0">  providerAccountId  String</span></span>
<span data-line=""><span style="color: #B4C2F0">  refresh_token      String?  @db.Text</span></span>
<span data-line=""><span style="color: #B4C2F0">  access_token       String?  @db.Text</span></span>
<span data-line=""><span style="color: #B4C2F0">  expires_at         Int?</span></span>
<span data-line=""><span style="color: #B4C2F0">  token_type         String?</span></span>
<span data-line=""><span style="color: #B4C2F0">  scope              String?</span></span>
<span data-line=""><span style="color: #B4C2F0">  id_token           String?  @db.Text</span></span>
<span data-line=""><span style="color: #B4C2F0">  session_state      String?</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">  user User @relation(fields: [userId], references: [id], onDelete: Cascade)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">  @@unique([provider, providerAccountId])</span></span>
<span data-line=""><span style="color: #B4C2F0">  @@index([userId])</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">model Session </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">id</span><span style="color: #B4C2F0">           </span><span style="color: #C8D3F5">String</span><span style="color: #B4C2F0">   </span><span style="color: #86E1FC">@</span><span style="color: #C8D3F5">id</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">@</span><span style="color: #65BCFF">default</span><span style="color: #B4C2F0">(</span><span style="color: #65BCFF">cuid</span><span style="color: #B4C2F0">())</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">sessionToken</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">String</span><span style="color: #B4C2F0">   </span><span style="color: #86E1FC">@</span><span style="color: #C8D3F5">unique</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">userId</span><span style="color: #B4C2F0">       </span><span style="color: #C8D3F5">String</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">expires</span><span style="color: #B4C2F0">      </span><span style="color: #C8D3F5">DateTime</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">user</span><span style="color: #B4C2F0">         </span><span style="color: #C8D3F5">User</span><span style="color: #B4C2F0">     </span><span style="color: #86E1FC">@</span><span style="color: #65BCFF">relation</span><span style="color: #B4C2F0">(</span><span style="color: #C8D3F5">fields</span><span style="color: #B4C2F0">: </span><span style="color: #86E1FC">[</span><span style="color: #C8D3F5">userId</span><span style="color: #86E1FC">],</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">references</span><span style="color: #B4C2F0">: </span><span style="color: #86E1FC">[</span><span style="color: #C8D3F5">id</span><span style="color: #86E1FC">],</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">onDelete</span><span style="color: #B4C2F0">: </span><span style="color: #C8D3F5">Cascade</span><span style="color: #B4C2F0">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">@</span><span style="color: #B4C2F0">@</span><span style="color: #65BCFF">index</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">[</span><span style="color: #C8D3F5">userId</span><span style="color: #86E1FC">]</span><span style="color: #B4C2F0">)</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">model User </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">id</span><span style="color: #B4C2F0">            </span><span style="color: #C8D3F5">String</span><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">@</span><span style="color: #C8D3F5">id</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">@</span><span style="color: #65BCFF">default</span><span style="color: #B4C2F0">(</span><span style="color: #65BCFF">cuid</span><span style="color: #B4C2F0">())</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">name</span><span style="color: #B4C2F0">          </span><span style="color: #C8D3F5">String</span><span style="color: #86E1FC">?</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">email</span><span style="color: #B4C2F0">         </span><span style="color: #C8D3F5">String</span><span style="color: #86E1FC">?</span><span style="color: #B4C2F0">   @</span><span style="color: #C8D3F5">unique</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">emailVerified</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">DateTime</span><span style="color: #86E1FC">?</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">image</span><span style="color: #B4C2F0">         </span><span style="color: #C8D3F5">String</span><span style="color: #86E1FC">?</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">accounts</span><span style="color: #B4C2F0">      </span><span style="color: #C8D3F5">Account</span><span style="color: #86E1FC">[]</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C8D3F5">sessions</span><span style="color: #B4C2F0">      </span><span style="color: #C8D3F5">Session</span><span style="color: #86E1FC">[]</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">model</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">VerificationToken</span><span style="color: #B4C2F0"> &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  identifier </span><span style="color: #C8D3F5">String</span></span>
<span data-line=""><span style="color: #B4C2F0">  token      String   @</span><span style="color: #C8D3F5">unique</span></span>
<span data-line=""><span style="color: #B4C2F0">  expires    </span><span style="color: #C8D3F5">DateTime</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">  @@</span><span style="color: #82AAFF">unique</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">[</span><span style="color: #FCA7EA">identifier</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #FCA7EA">token</span><span style="color: #86E1FC">]</span><span style="color: #B4C2F0">)</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="js" data-theme="light" data-svelte-h="svelte-ez1e2x">schema.prisma</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light",
          __title__: "schema.prisma"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">generator client &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  provider </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"prisma-client-js"</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">datasource db &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  provider </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"postgresql"</span></span>
<span data-line=""><span style="color: #24292EFF">  url </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">env</span><span style="color: #24292EFF">(</span><span style="color: #22863A">"POSTGRES_PRISMA_URL"</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// uses connection pooling</span></span>
<span data-line=""><span style="color: #24292EFF">  directUrl </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">env</span><span style="color: #24292EFF">(</span><span style="color: #22863A">"POSTGRES_URL_NON_POOLING"</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// uses a direct connection</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">model Account &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  id                 String  @id @</span><span style="color: #6F42C1">default</span><span style="color: #24292EFF">(</span><span style="color: #6F42C1">cuid</span><span style="color: #24292EFF">())</span></span>
<span data-line=""><span style="color: #24292EFF">  userId             String</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF">               </span><span style="color: #6F42C1">String</span></span>
<span data-line=""><span style="color: #24292EFF">  provider           String</span></span>
<span data-line=""><span style="color: #24292EFF">  providerAccountId  String</span></span>
<span data-line=""><span style="color: #24292EFF">  refresh_token      String?  @db.Text</span></span>
<span data-line=""><span style="color: #24292EFF">  access_token       String?  @db.Text</span></span>
<span data-line=""><span style="color: #24292EFF">  expires_at         Int?</span></span>
<span data-line=""><span style="color: #24292EFF">  token_type         String?</span></span>
<span data-line=""><span style="color: #24292EFF">  scope              String?</span></span>
<span data-line=""><span style="color: #24292EFF">  id_token           String?  @db.Text</span></span>
<span data-line=""><span style="color: #24292EFF">  session_state      String?</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">  user User @relation(fields: [userId], references: [id], onDelete: Cascade)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">  @@unique([provider, providerAccountId])</span></span>
<span data-line=""><span style="color: #24292EFF">  @@index([userId])</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">model Session &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  id           String   @id @</span><span style="color: #6F42C1">default</span><span style="color: #24292EFF">(</span><span style="color: #6F42C1">cuid</span><span style="color: #24292EFF">())</span></span>
<span data-line=""><span style="color: #24292EFF">  sessionToken String   @unique</span></span>
<span data-line=""><span style="color: #24292EFF">  userId       String</span></span>
<span data-line=""><span style="color: #24292EFF">  expires      DateTime</span></span>
<span data-line=""><span style="color: #24292EFF">  user         User     @</span><span style="color: #6F42C1">relation</span><span style="color: #24292EFF">(fields: [userId]</span><span style="color: #212121">,</span><span style="color: #24292EFF"> references: [id]</span><span style="color: #212121">,</span><span style="color: #24292EFF"> onDelete: Cascade)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">  @@</span><span style="color: #6F42C1">index</span><span style="color: #24292EFF">([userId])</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">model User &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  id            String    @id @</span><span style="color: #6F42C1">default</span><span style="color: #24292EFF">(</span><span style="color: #6F42C1">cuid</span><span style="color: #24292EFF">())</span></span>
<span data-line=""><span style="color: #24292EFF">  name          String</span><span style="color: #D32F2F">?</span></span>
<span data-line=""><span style="color: #24292EFF">  email         String</span><span style="color: #D32F2F">?</span><span style="color: #24292EFF">   @unique</span></span>
<span data-line=""><span style="color: #24292EFF">  emailVerified DateTime</span><span style="color: #D32F2F">?</span></span>
<span data-line=""><span style="color: #24292EFF">  image         String</span><span style="color: #D32F2F">?</span></span>
<span data-line=""><span style="color: #24292EFF">  accounts      Account[]</span></span>
<span data-line=""><span style="color: #24292EFF">  sessions      Session[]</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">model VerificationToken &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  identifier String</span></span>
<span data-line=""><span style="color: #24292EFF">  token      String   @unique</span></span>
<span data-line=""><span style="color: #24292EFF">  expires    DateTime</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">  @@</span><span style="color: #6F42C1">unique</span><span style="color: #24292EFF">([identifier</span><span style="color: #212121">,</span><span style="color: #24292EFF"> token])</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this is what your <code data-svelte-h="svelte-vct8k3">schema.prisma</code> file should look like. Note that, <code data-svelte-h="svelte-n0n0qf">DIRECT_URL</code> is optional and don&#39;t forget to add <code data-svelte-h="svelte-q6oxub">DATABASE_URL</code> in <code data-svelte-h="svelte-gbe68h">.env</code>.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `after that, we need to generate the prisma client. We can do that by using the following command.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npx prisma generate</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npx prisma generate</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `The generate command generates assets like Prisma Client based on the generator and data model blocks defined in your <code data-svelte-h="svelte-1yrs1wk">prisma/schema.prisma</code> file.
The generate command is most often used to generate Prisma Client with the prisma-client-js generator.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `create a new file named <code data-svelte-h="svelte-ujd8m2">db.server.ts</code> inside <code data-svelte-h="svelte-1i6rdm4">src/lib</code> directory and add the following code to it.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">PrismaClient</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">@prisma/client</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6">// expose a singleton</span></span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">db</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">new</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">PrismaClient</span><span style="color: #B4C2F0">()</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-1bw9pvp">src/lib/db.server.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "src/lib/db.server.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; PrismaClient &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'@prisma/client'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5">// expose a singleton</span></span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">db</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">new</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">PrismaClient</span><span style="color: #24292EFF">();</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `we use this file to expose a singleton of the prisma client and we can use this in our project to access the database.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `now we need to push the schema to the database. so that the tables will be created.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npx prisma db push</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npx prisma db push</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you can see those tables in your database by running the prisma studio.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">npx prisma studio</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "bash",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="bash" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">npx prisma studio</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this will open a browser window with the prisma studio. you can see the tables there.`;
        }
      })} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*P1bMQdFe6FAkjkGlAJLE3g.png",
          alt: "Prisma Studio models"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you can also see those tables in your database in my case it&#39;s vercel postgres. so i can open up my vercel and see the tables there.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "adding-auth.js-(nextauth)-to-the-project",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Adding Auth.js (NextAuth) to the project`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `to add Auth.js (NextAuth) to the project, we need to create a file named <code data-svelte-h="svelte-k59yra">hooks.server.ts</code> in <code data-svelte-h="svelte-1fkgjes">src</code> directory.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">SvelteKitAuth</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">@auth/sveltekit</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> Google </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">@auth/core/providers/google</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> GitHub </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">@auth/core/providers/github</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">PrismaAdapter</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">@next-auth/prisma-adapter</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">db</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$lib/db.server</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">GOOGLE_SECRET</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">GOOGLE_ID</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">GITHUB_SECRET</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">GITHUB_ID</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$env/static/private</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">type</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">Adapter</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">@auth/core/adapters</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">handle</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">SvelteKitAuth</span><span style="color: #B4C2F0">(&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">adapter</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #65BCFF">PrismaAdapter</span><span style="color: #B4C2F0">(</span><span style="color: #C8D3F5">db</span><span style="color: #B4C2F0">)</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">as</span><span style="color: #A9B8E8"> </span><span style="color: #FFC777">Adapter</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">session</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">strategy</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">database</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #82AAFF">generateSessionToken</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">()</span><span style="color: #A9B8E8"> </span><span style="color: #C099FF">=></span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">crypto</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">randomUUID</span><span style="color: #B4C2F0">()</span><span style="color: #86E1FC">;</span><span style="color: #B4C2F0"> </span><span style="color: #858AA6">// generate a uuid</span></span>
<span data-line=""><span style="color: #B4C2F0">        &#125;</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">providers</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #65BCFF">GitHub</span><span style="color: #B4C2F0">(&#123;</span><span style="color: #A9B8E8"> </span><span style="color: #4FD6BE">clientId</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF98A4">GITHUB_ID</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #4FD6BE">clientSecret</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF98A4">GITHUB_SECRET</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#125;)</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #65BCFF">Google</span><span style="color: #B4C2F0">(&#123;</span><span style="color: #A9B8E8"> </span><span style="color: #4FD6BE">clientId</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF98A4">GOOGLE_ID</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #4FD6BE">clientSecret</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF98A4">GOOGLE_SECRET</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#125;)</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #86E1FC">]</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;)</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-9xmwzx">src/hooks.server.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "src/hooks.server.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; SvelteKitAuth &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'@auth/sveltekit'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> Google </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'@auth/core/providers/google'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> GitHub </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'@auth/core/providers/github'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; PrismaAdapter &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'@next-auth/prisma-adapter'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; db &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$lib/db.server'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; GOOGLE_SECRET</span><span style="color: #212121">,</span><span style="color: #24292EFF"> GOOGLE_ID</span><span style="color: #212121">,</span><span style="color: #24292EFF"> GITHUB_SECRET</span><span style="color: #212121">,</span><span style="color: #24292EFF"> GITHUB_ID &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$env/static/private'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> &#123; Adapter &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'@auth/core/adapters'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">handle</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">SvelteKitAuth</span><span style="color: #24292EFF">(&#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    adapter</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">PrismaAdapter</span><span style="color: #24292EFF">(db) </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Adapter</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    session</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        strategy</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'database'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #6F42C1">generateSessionToken</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> () </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">crypto</span><span style="color: #6F42C1">.randomUUID</span><span style="color: #24292EFF">(); </span><span style="color: #C2C3C5">// generate a uuid</span></span>
<span data-line=""><span style="color: #24292EFF">        &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    providers</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #6F42C1">GitHub</span><span style="color: #24292EFF">(&#123; clientId</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">GITHUB_ID</span><span style="color: #212121">,</span><span style="color: #24292EFF"> clientSecret</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">GITHUB_SECRET</span><span style="color: #24292EFF"> &#125;)</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #6F42C1">Google</span><span style="color: #24292EFF">(&#123; clientId</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">GOOGLE_ID</span><span style="color: #212121">,</span><span style="color: #24292EFF"> clientSecret</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">GOOGLE_SECRET</span><span style="color: #24292EFF"> &#125;)</span></span>
<span data-line=""><span style="color: #24292EFF">    ]</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;);</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `note that, for using OAuth providers like Google and Github, you need to create OAuth apps in their respective developer consoles and get the <code data-svelte-h="svelte-qujuli">client id</code> and <code data-svelte-h="svelte-ahloqd">client secret</code>. I have added those to <code data-svelte-h="svelte-gbe68h">.env</code> file and i&#39;m importing them from there, add also AUTH_SECRET and NEXTAUTH_SECRET to <code data-svelte-h="svelte-gbe68h">.env</code> file. you can generate a random string using <code data-svelte-h="svelte-wf1ee8">openssl rand -base64 32</code> and add it to <code data-svelte-h="svelte-gbe68h">.env</code> file.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `your <code data-svelte-h="svelte-gbe68h">.env</code> file should look like this.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">POSTGRES_URL</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">postgres://default:************@ep-autumn-cherry-00149263-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #C8D3F5">GOOGLE_ID</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">238352474330-0g3c78cn7o93o2979tatjt9bdvr8496h.apps.googleusercontent.com</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #C8D3F5">GOOGLE_SECRET</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">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</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #C8D3F5">GITHUB_ID</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">c8458ef2c5288d93af54</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #C8D3F5">GITHUB_SECRET</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">68801a7ba6caf48550acc2d4bad6c67d50b25e12</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #C8D3F5">AUTH_SECRET</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">58383abb3d6c7f7fb02eb71d97bd6dc7</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #C8D3F5">NEXTAUTH_SECRET</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">58383abb3d6c7f7fb02eb71d97bd6dc7</span><span style="color: #86E1FC">"</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="py" data-theme="light" data-svelte-h="svelte-1horq2j">.env</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light",
          __title__: ".env"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">POSTGRES_URL</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"postgres://default:************@ep-autumn-cherry-00149263-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb"</span></span>
<span data-line=""><span style="color: #24292EFF">GOOGLE_ID</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"238352474330-0g3c78cn7o93o2979tatjt9bdvr8496h.apps.googleusercontent.com"</span></span>
<span data-line=""><span style="color: #24292EFF">GOOGLE_SECRET</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"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"</span></span>
<span data-line=""><span style="color: #24292EFF">GITHUB_ID</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"c8458ef2c5288d93af54"</span></span>
<span data-line=""><span style="color: #24292EFF">GITHUB_SECRET</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"68801a7ba6caf48550acc2d4bad6c67d50b25e12"</span></span>
<span data-line=""><span style="color: #24292EFF">AUTH_SECRET</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"58383abb3d6c7f7fb02eb71d97bd6dc7"</span></span>
<span data-line=""><span style="color: #24292EFF">NEXTAUTH_SECRET</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"58383abb3d6c7f7fb02eb71d97bd6dc7"</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Get Google and Github Client and Secret ID&#39;s
to get google&#39;s Client and Secret ID, go to google developers console or follow ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://developers.google.com/identity/gsi/web/guides/get-google-api-clientid",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `this`;
              }
            }
          )} guide from google
and for Github, it&#39;s pretty easy. just go to Github developers settings and under OAuth Apps, add a new app and follow the on-screen instructions.
One thing to be clear is that, while testing in local environment, you homepage URL (or javascript origins in google) must be http://localhost:5173, replace <code data-svelte-h="svelte-12gqtk4">5173</code> with your port number where your app runs and callback URL (or redirect) should be
http://localhost:xxxx/auth/callback/provider, replace provider with github and google in their respective consoles.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `we are almost done with the setup. Now on to the SvelteKit part where we will be creating the login and protected routes.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "creating-routes", headerTag: "h2" }, {}, {
        default: () => {
          return `Creating Routes`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s create following routes.`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-3m7v69">/</code> - Home page`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-1t95tjq">/login</code> - Login page`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-aifchj">/dashboard</code> - Dashboard page (protected route)`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `First, let&#39;s create Navbar where we will have login button and if users are logged in, we will show their name and profile picture.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `create a file named <code data-svelte-h="svelte-14xefej">navbar.svelte</code> in <code data-svelte-h="svelte-1gq2yl3">src/lib/components</code> directory and add the following code to it.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">  </span><span style="color: #858AA6">// src/lib/components/Navbar.svelte</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">*</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">as</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Avatar</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">$lib/components/ui/avatar</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">*</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">as</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">DropdownMenu</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">$lib/components/ui/dropdown-menu</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">page</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">$app/stores</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span><span style="color: #B4C2F0"> </span><span style="color: #858AA6">// we will get the session info from here</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">AuthButton</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">$lib/components</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">links</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// &#123; name: 'Profile', href: '/profile' &#125;,</span></span>
<span data-line=""><span style="color: #B4C2F0">    &#123; </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Dashboard</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">/dashboard</span><span style="color: #86E1FC">"</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// &#123; name: "About", href: "/about" &#125;,</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">];</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">nav</span></span>
<span data-line=""><span style="color: #FF757F">  </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">fixed top-0 left-0 right-0 z-50 flex items-center justify-between h-20 border-b-2 shadow-sm text-foreground backdrop-opacity-100 backdrop-blur-3xl backdrop-brightness-100 dark:backdrop-brightness-50 border-foreground/80</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">  </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div</span></span>
<span data-line=""><span style="color: #FF757F">    </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">container flex items-center justify-between w-full px-4 mx-auto max-w-7xl</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">  </span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">a </span><span style="color: #FFC777">href</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">/</span><span style="color: #86E1FC">"</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">text-2xl font-semibold tracking-tight transition-colors</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">      </span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">SvelteKit OAuth</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">a</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">flex items-center gap-2</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">      &#123;#if $page.data.session&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Root</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">          </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Trigger</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Avatar.Root</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Avatar.Image</span></span>
<span data-line=""><span style="color: #FF757F">                </span><span style="color: #FFC777">src</span><span style="color: #86E1FC">=</span><span style="color: #C3E88D">&#123;$page.data.session.user?.image&#125;</span></span>
<span data-line=""><span style="color: #FF757F">                </span><span style="color: #FFC777">alt</span><span style="color: #86E1FC">=</span><span style="color: #C3E88D">&#123;$page.data.session.user?.name&#125;</span></span>
<span data-line=""><span style="color: #FF757F">             </span><span style="color: #86E1FC"> /></span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Avatar.Fallback</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                &#123;&#96;$&#123;$page.data.session.user?.name?.split(" ")[0][0]&#125;$&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">                  $page.data.session.user?.name?.split(" ")[1][0]</span></span>
<span data-line=""><span style="color: #C8D3F5">                &#125;&#96;&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">Avatar.Fallback</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">Avatar.Root</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">          </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">DropdownMenu.Trigger</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">          </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Content</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">min-w-[150px] z-50</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Group</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Label</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                &#123;$page.data.session.user?.name&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">DropdownMenu.Label</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Separator</span><span style="color: #86E1FC"> /></span></span>
<span data-line=""><span style="color: #C8D3F5">              &#123;#each links as link (link.href)&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">                </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Item</span></span>
<span data-line=""><span style="color: #FF757F">                  </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #C3E88D">&#123;$page.url.pathname</span><span style="color: #FF757F"> </span><span style="color: #FF5370">===</span><span style="color: #FF757F"> </span><span style="color: #C3E88D">link.href</span></span>
<span data-line=""><span style="color: #FF757F">                    </span><span style="color: #FFC777">?</span><span style="color: #FF757F"> </span><span style="color: #FF5370">"bg-foreground/10</span><span style="color: #FF757F"> </span><span style="color: #FFC777">text-foreground</span><span style="color: #FF5370">"</span></span>
<span data-line=""><span style="color: #FF757F">                    </span><span style="color: #FFC777">:</span><span style="color: #FF757F"> </span><span style="color: #FF5370">"hover:bg-foreground/10"&#125;</span></span>
<span data-line=""><span style="color: #FF757F">                </span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                  </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">a </span><span style="color: #FFC777">href</span><span style="color: #86E1FC">=</span><span style="color: #C3E88D">&#123;link.href&#125;</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">w-full</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">&#123;link.name&#125;</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">a</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">DropdownMenu.Item</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">              &#123;/each&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Separator</span><span style="color: #86E1FC"> /></span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">DropdownMenu.Item</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">p-[2px]</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">AuthButton</span><span style="color: #86E1FC"> /></span></span>
<span data-line=""><span style="color: #C8D3F5">              </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">DropdownMenu.Item</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">DropdownMenu.Group</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">          </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">DropdownMenu.Content</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">DropdownMenu.Root</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">      &#123;:else&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">AuthButton</span><span style="color: #86E1FC"> /></span></span>
<span data-line=""><span style="color: #C8D3F5">      &#123;/if&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">  </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">nav</span><span style="color: #86E1FC">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="html" data-theme="light" data-svelte-h="svelte-5v8w1n">Navbar.svelte</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "light",
          __title__: "Navbar.svelte"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #C2C3C5">// src/lib/components/Navbar.svelte</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">*</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> Avatar </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"$lib/components/ui/avatar"</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">*</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> DropdownMenu </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"$lib/components/ui/dropdown-menu"</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; page &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"$app/stores"</span><span style="color: #24292EFF">; </span><span style="color: #C2C3C5">// we will get the session info from here</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; AuthButton &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"$lib/components"</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">links</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// &#123; name: 'Profile', href: '/profile' &#125;,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123; name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"Dashboard"</span><span style="color: #212121">,</span><span style="color: #24292EFF"> href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"/dashboard"</span><span style="color: #24292EFF"> &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// &#123; name: "About", href: "/about" &#125;,</span></span>
<span data-line=""><span style="color: #24292EFF">  ];</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">nav</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"fixed top-0 left-0 right-0 z-50 flex items-center justify-between h-20 border-b-2 shadow-sm text-foreground backdrop-opacity-100 backdrop-blur-3xl backdrop-brightness-100 dark:backdrop-brightness-50 border-foreground/80"</span></span>
<span data-line=""><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">  &#x3C;</span><span style="color: #22863A">div</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"container flex items-center justify-between w-full px-4 mx-auto max-w-7xl"</span></span>
<span data-line=""><span style="color: #24292EFF">  ></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">a</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">href</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"/"</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"text-2xl font-semibold tracking-tight transition-colors"</span></span>
<span data-line=""><span style="color: #24292EFF">      >SvelteKit OAuth</span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;/</span><span style="color: #22863A">a</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">div</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"flex items-center gap-2"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">      &#123;#if $page.data.session&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;</span><span style="color: #22863A">DropdownMenu.Root</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">          &#x3C;</span><span style="color: #22863A">DropdownMenu.Trigger</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;</span><span style="color: #22863A">Avatar.Root</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;</span><span style="color: #22863A">Avatar.Image</span></span>
<span data-line=""><span style="color: #24292EFF">                </span><span style="color: #6F42C1">src</span><span style="color: #D32F2F">=</span><span style="color: #2B5581">&#123;$page.data.session.user?.image&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">                </span><span style="color: #6F42C1">alt</span><span style="color: #D32F2F">=</span><span style="color: #2B5581">&#123;$page.data.session.user?.name&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">              /></span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;</span><span style="color: #22863A">Avatar.Fallback</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                &#123;&#96;$&#123;$page.data.session.user?.name?.split(" ")[0][0]&#125;$&#123;</span></span>
<span data-line=""><span style="color: #24292EFF">                  $page.data.session.user?.name?.split(" ")[1][0]</span></span>
<span data-line=""><span style="color: #24292EFF">                &#125;&#96;&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;/</span><span style="color: #22863A">Avatar.Fallback</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;/</span><span style="color: #22863A">Avatar.Root</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">          &#x3C;/</span><span style="color: #22863A">DropdownMenu.Trigger</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">          &#x3C;</span><span style="color: #22863A">DropdownMenu.Content</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"min-w-[150px] z-50"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;</span><span style="color: #22863A">DropdownMenu.Group</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;</span><span style="color: #22863A">DropdownMenu.Label</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                &#123;$page.data.session.user?.name&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;/</span><span style="color: #22863A">DropdownMenu.Label</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;</span><span style="color: #22863A">DropdownMenu.Separator</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">              &#123;#each links as link (link.href)&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">                &#x3C;</span><span style="color: #22863A">DropdownMenu.Item</span></span>
<span data-line=""><span style="color: #24292EFF">                  </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #2B5581">&#123;$page.url.pathname</span><span style="color: #24292EFF"> === </span><span style="color: #2B5581">link.href</span></span>
<span data-line=""><span style="color: #24292EFF">                    </span><span style="color: #6F42C1">?</span><span style="color: #24292EFF"> "bg-foreground/10 </span><span style="color: #6F42C1">text-foreground</span><span style="color: #24292EFF">"</span></span>
<span data-line=""><span style="color: #24292EFF">                    </span><span style="color: #6F42C1">:</span><span style="color: #24292EFF"> "hover:bg-foreground/10"&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">                ></span></span>
<span data-line=""><span style="color: #24292EFF">                  &#x3C;</span><span style="color: #22863A">a</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">href</span><span style="color: #D32F2F">=</span><span style="color: #2B5581">&#123;link.href&#125;</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"w-full"</span><span style="color: #24292EFF">>&#123;link.name&#125;&#x3C;/</span><span style="color: #22863A">a</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                &#x3C;/</span><span style="color: #22863A">DropdownMenu.Item</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">              &#123;/each&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;</span><span style="color: #22863A">DropdownMenu.Separator</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;</span><span style="color: #22863A">DropdownMenu.Item</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"p-[2px]"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                &#x3C;</span><span style="color: #22863A">AuthButton</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">              &#x3C;/</span><span style="color: #22863A">DropdownMenu.Item</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;/</span><span style="color: #22863A">DropdownMenu.Group</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">          &#x3C;/</span><span style="color: #22863A">DropdownMenu.Content</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;/</span><span style="color: #22863A">DropdownMenu.Root</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">      &#123;:else&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;</span><span style="color: #22863A">AuthButton</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">      &#123;/if&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">  &#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">nav</span><span style="color: #24292EFF">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `add that <code data-svelte-h="svelte-1s5b43a">Navbar</code> component to <code data-svelte-h="svelte-lq727c">+layout.svelte</code> file in your root directory.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// src/routes/+layout.svelte</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">../app.postcss</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">Navbar</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$lib/components</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Navbar</span><span style="color: #86E1FC"> /></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">h-screen pt-20</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">h-full</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">slot </span><span style="color: #FF5370">/</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="html" data-theme="light" data-svelte-h="svelte-1lix5qw">+layout.svelte</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "light",
          __title__: "+layout.svelte"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// src/routes/+layout.svelte</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'../app.postcss'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; Navbar &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$lib/components'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">Navbar</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">div</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"h-screen pt-20"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">div</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"h-full"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;</span><span style="color: #22863A">slot</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `and in your <code data-svelte-h="svelte-1c4jv27">+page.svelte</code> file inside your <code data-svelte-h="svelte-1a8s7x">src/routes</code> directory, add the following code.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// src/routes/+page.svelte</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">page</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$app/stores</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">flex flex-col items-center justify-center h-full gap-4</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">h1 </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">text-5xl</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">Home Page</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">h1</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    &#123;#if $page.data.session&#125; Welcome back,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">span </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">text-4xl</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">&#123;$page.data.session.user?.name&#125;!</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">span</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    &#123;/if&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="html" data-theme="light" data-svelte-h="svelte-18mo8d7">+page.svelte</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "light",
          __title__: "+page.svelte"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// src/routes/+page.svelte</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; page &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$app/stores'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">div</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"flex flex-col items-center justify-center h-full gap-4"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">h1</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"text-5xl"</span><span style="color: #24292EFF">>Home Page&#x3C;/</span><span style="color: #22863A">h1</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;#if $page.data.session&#125; Welcome back,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">span</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"text-4xl"</span><span style="color: #24292EFF">>&#123;$page.data.session.user?.name&#125;!&#x3C;/</span><span style="color: #22863A">span</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;/if&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `if you run the project now, you will see the navbar and if you click on the login button, you will be redirected to the login page but we haven&#39;t created the login page yet. so let&#39;s create it. And in our home page if the user is logged in, we will show their name.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s create a login routes`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">script </span><span style="color: #FFC777">lang</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">ts</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// src/routes/login/+page.svelte</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">page</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$app/stores</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Button</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$lib/components/ui/button/button.svelte</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">*</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">as</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Card</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$lib/components/ui/card</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">signIn</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">@auth/sveltekit/client</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">Github</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">lucide-svelte</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">redirectUrl</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">$page</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">url</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">searchParams</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">get</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">redirectTo</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #86E1FC">||</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/dashboard</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #82AAFF">githubLogin</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #C099FF">async</span><span style="color: #B4C2F0"> () </span><span style="color: #C099FF">=></span><span style="color: #B4C2F0"> &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #86E1FC">if</span><span style="color: #B4C2F0"> (</span><span style="color: #86E1FC">!</span><span style="color: #FFC777">$page</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">data</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">session</span><span style="color: #B4C2F0">) &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #86E1FC">await</span><span style="color: #B4C2F0"> </span><span style="color: #65BCFF">signIn</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">github</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #4FD6BE">callbackUrl</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">&#96;$&#123;</span><span style="color: #C8D3F5">redirectUrl</span><span style="color: #86E1FC">&#125;&#96;</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#125;)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">        &#125;</span></span>
<span data-line=""><span style="color: #B4C2F0">    &#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #82AAFF">googleLogin</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #C099FF">async</span><span style="color: #B4C2F0"> () </span><span style="color: #C099FF">=></span><span style="color: #B4C2F0"> &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #86E1FC">if</span><span style="color: #B4C2F0"> (</span><span style="color: #86E1FC">!</span><span style="color: #FFC777">$page</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">data</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">session</span><span style="color: #B4C2F0">) &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #86E1FC">await</span><span style="color: #B4C2F0"> </span><span style="color: #65BCFF">signIn</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">google</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #4FD6BE">callbackUrl</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">&#96;$&#123;</span><span style="color: #C8D3F5">redirectUrl</span><span style="color: #86E1FC">&#125;&#96;</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#125;)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">        &#125;</span></span>
<span data-line=""><span style="color: #B4C2F0">    &#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">svelte:head</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">title</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">Login | Dall-E Clone</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">title</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">meta </span><span style="color: #FFC777">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">robots</span><span style="color: #86E1FC">"</span><span style="color: #FF757F"> </span><span style="color: #FFC777">content</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">noindex nofollow</span><span style="color: #86E1FC">"</span><span style="color: #FF757F"> </span><span style="color: #86E1FC">/></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">html </span><span style="color: #FFC777">lang</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">en</span><span style="color: #86E1FC">"</span><span style="color: #FF757F"> </span><span style="color: #FF5370">/</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">svelte:head</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">flex items-center justify-center h-full -mt-12 overflow-x-hidden</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Card.Root</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">w-[300px] rounded-lg flex flex-col items-center justify-center</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Card.Header</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Card.Title</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">text-center</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">Dall-E Clone | SvelteKit</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">Card.Title</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Card.Description</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">text-center</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">AI Image Generation</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">Card.Description</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">Card.Header</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Card.Content</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">p-3</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">flex flex-col items-center justify-center gap-6</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">button </span><span style="color: #FFC777">on:click</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">&#123;githubLogin&#125;</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Github</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">w-6 h-6 mr-2</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC"> /></span></span>
<span data-line=""><span style="color: #C8D3F5">                    Login with GitHub</span></span>
<span data-line=""><span style="color: #C8D3F5">                </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">button</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">button </span><span style="color: #FFC777">on:click</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">&#123;googleLogin&#125;</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">svg</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">viewBox</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">0 0 128 128</span><span style="color: #86E1FC">"</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">w-5 h-5 mr-2</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">path</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">fill</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">#fff</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">d</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">M44.59 4.21a63.28 63.28 0 004.33 120.9 67.6 67.6 0 0032.36.35 57.13 57.13 0 0025.9-13.46 57.44 57.44 0 0016-26.26 74.33 74.33 0 001.61-33.58H65.27v24.69h34.47a29.72 29.72 0 01-12.66 19.52 36.16 36.16 0 01-13.93 5.5 41.29 41.29 0 01-15.1 0A37.16 37.16 0 0144 95.74a39.3 39.3 0 01-14.5-19.42 38.31 38.31 0 010-24.63 39.25 39.25 0 019.18-14.91A37.17 37.17 0 0176.13 27a34.28 34.28 0 0113.64 8q5.83-5.8 11.64-11.63c2-2.09 4.18-4.08 6.15-6.22A61.22 61.22 0 0087.2 4.59a64 64 0 00-42.61-.38z</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                        </span><span style="color: #86E1FC">/></span></span>
<span data-line=""><span style="color: #C8D3F5">                        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">path</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">fill</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">#e33629</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">d</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">M44.59 4.21a64 64 0 0142.61.37 61.22 61.22 0 0120.35 12.62c-2 2.14-4.11 4.14-6.15 6.22Q95.58 29.23 89.77 35a34.28 34.28 0 00-13.64-8 37.17 37.17 0 00-37.46 9.74 39.25 39.25 0 00-9.18 14.91L8.76 35.6A63.53 63.53 0 0144.59 4.21z</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                        </span><span style="color: #86E1FC">/></span></span>
<span data-line=""><span style="color: #C8D3F5">                        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">path</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">fill</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">#f8bd00</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">d</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">M3.26 51.5a62.93 62.93 0 015.5-15.9l20.73 16.09a38.31 38.31 0 000 24.63q-10.36 8-20.73 16.08a63.33 63.33 0 01-5.5-40.9z</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                        </span><span style="color: #86E1FC">/></span></span>
<span data-line=""><span style="color: #C8D3F5">                        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">path</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">fill</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">#587dbd</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">d</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">M65.27 52.15h59.52a74.33 74.33 0 01-1.61 33.58 57.44 57.44 0 01-16 26.26c-6.69-5.22-13.41-10.4-20.1-15.62a29.72 29.72 0 0012.66-19.54H65.27c-.01-8.22 0-16.45 0-24.68z</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                        </span><span style="color: #86E1FC">/></span></span>
<span data-line=""><span style="color: #C8D3F5">                        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">path</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">fill</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">#319f43</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                            </span><span style="color: #FFC777">d</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">M8.75 92.4q10.37-8 20.73-16.08A39.3 39.3 0 0044 95.74a37.16 37.16 0 0014.08 6.08 41.29 41.29 0 0015.1 0 36.16 36.16 0 0013.93-5.5c6.69 5.22 13.41 10.4 20.1 15.62a57.13 57.13 0 01-25.9 13.47 67.6 67.6 0 01-32.36-.35 63 63 0 01-23-11.59A63.73 63.73 0 018.75 92.4z</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FF757F">                        </span><span style="color: #86E1FC">/></span></span>
<span data-line=""><span style="color: #C8D3F5">                    </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">svg</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">                    Login with Google</span></span>
<span data-line=""><span style="color: #C8D3F5">                </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">button</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">Card.Content</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF5370">Card.Footer</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">flex flex-col items-center justify-center p-3</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">p</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">by</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">p</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">p </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">p-1</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">Prabhu Kiran Konda</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">p</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">Card.Footer</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF5370">Card.Root</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="html" data-theme="light" data-svelte-h="svelte-18mo8d7">+page.svelte</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "light",
          __title__: "+page.svelte"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">script</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">lang</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"ts"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// src/routes/login/+page.svelte</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; page &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$app/stores'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> Button </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$lib/components/ui/button/button.svelte'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">*</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> Card </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$lib/components/ui/card'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; signIn &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'@auth/sveltekit/client'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; Github &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'lucide-svelte'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">redirectUrl</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">$page</span><span style="color: #6F42C1">.</span><span style="color: #1976D2">url</span><span style="color: #6F42C1">.</span><span style="color: #1976D2">searchParams</span><span style="color: #6F42C1">.get</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'redirectTo'</span><span style="color: #24292EFF">) </span><span style="color: #D32F2F">||</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/dashboard'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">githubLogin</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">async</span><span style="color: #24292EFF"> () </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> (</span><span style="color: #D32F2F">!</span><span style="color: #1976D2">$page</span><span style="color: #24292EFF">.</span><span style="color: #1976D2">data</span><span style="color: #24292EFF">.session) &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">await</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">signIn</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'github'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> &#123; callbackUrl</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">&#96;</span><span style="color: #D32F2F">$&#123;</span><span style="color: #24292EFF">redirectUrl</span><span style="color: #D32F2F">&#125;</span><span style="color: #22863A">&#96;</span><span style="color: #24292EFF"> &#125;);</span></span>
<span data-line=""><span style="color: #24292EFF">        &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">googleLogin</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">async</span><span style="color: #24292EFF"> () </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> (</span><span style="color: #D32F2F">!</span><span style="color: #1976D2">$page</span><span style="color: #24292EFF">.</span><span style="color: #1976D2">data</span><span style="color: #24292EFF">.session) &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">await</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">signIn</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'google'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> &#123; callbackUrl</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">&#96;</span><span style="color: #D32F2F">$&#123;</span><span style="color: #24292EFF">redirectUrl</span><span style="color: #D32F2F">&#125;</span><span style="color: #22863A">&#96;</span><span style="color: #24292EFF"> &#125;);</span></span>
<span data-line=""><span style="color: #24292EFF">        &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">svelte:head</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">title</span><span style="color: #24292EFF">>Login | Dall-E Clone&#x3C;/</span><span style="color: #22863A">title</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">meta</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"robots"</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">content</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"noindex nofollow"</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">html</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">lang</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"en"</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">svelte:head</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">div</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"flex items-center justify-center h-full -mt-12 overflow-x-hidden"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">Card.Root</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"w-[300px] rounded-lg flex flex-col items-center justify-center"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;</span><span style="color: #22863A">Card.Header</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;</span><span style="color: #22863A">Card.Title</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"text-center"</span><span style="color: #24292EFF">>Dall-E Clone | SvelteKit&#x3C;/</span><span style="color: #22863A">Card.Title</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;</span><span style="color: #22863A">Card.Description</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"text-center"</span><span style="color: #24292EFF">>AI Image Generation&#x3C;/</span><span style="color: #22863A">Card.Description</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;/</span><span style="color: #22863A">Card.Header</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;</span><span style="color: #22863A">Card.Content</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"p-3"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;</span><span style="color: #22863A">div</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"flex flex-col items-center justify-center gap-6"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                &#x3C;</span><span style="color: #22863A">button</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">on:click</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"&#123;githubLogin&#125;"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                    &#x3C;</span><span style="color: #22863A">Github</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"w-6 h-6 mr-2"</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">                    Login with GitHub</span></span>
<span data-line=""><span style="color: #24292EFF">                &#x3C;/</span><span style="color: #22863A">button</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                &#x3C;</span><span style="color: #22863A">button</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">on:click</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"&#123;googleLogin&#125;"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                    &#x3C;</span><span style="color: #22863A">svg</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">viewBox</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"0 0 128 128"</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"w-5 h-5 mr-2"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                        &#x3C;</span><span style="color: #22863A">path</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">fill</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"#fff"</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">d</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"M44.59 4.21a63.28 63.28 0 004.33 120.9 67.6 67.6 0 0032.36.35 57.13 57.13 0 0025.9-13.46 57.44 57.44 0 0016-26.26 74.33 74.33 0 001.61-33.58H65.27v24.69h34.47a29.72 29.72 0 01-12.66 19.52 36.16 36.16 0 01-13.93 5.5 41.29 41.29 0 01-15.1 0A37.16 37.16 0 0144 95.74a39.3 39.3 0 01-14.5-19.42 38.31 38.31 0 010-24.63 39.25 39.25 0 019.18-14.91A37.17 37.17 0 0176.13 27a34.28 34.28 0 0113.64 8q5.83-5.8 11.64-11.63c2-2.09 4.18-4.08 6.15-6.22A61.22 61.22 0 0087.2 4.59a64 64 0 00-42.61-.38z"</span></span>
<span data-line=""><span style="color: #24292EFF">                        /></span></span>
<span data-line=""><span style="color: #24292EFF">                        &#x3C;</span><span style="color: #22863A">path</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">fill</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"#e33629"</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">d</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"M44.59 4.21a64 64 0 0142.61.37 61.22 61.22 0 0120.35 12.62c-2 2.14-4.11 4.14-6.15 6.22Q95.58 29.23 89.77 35a34.28 34.28 0 00-13.64-8 37.17 37.17 0 00-37.46 9.74 39.25 39.25 0 00-9.18 14.91L8.76 35.6A63.53 63.53 0 0144.59 4.21z"</span></span>
<span data-line=""><span style="color: #24292EFF">                        /></span></span>
<span data-line=""><span style="color: #24292EFF">                        &#x3C;</span><span style="color: #22863A">path</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">fill</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"#f8bd00"</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">d</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"M3.26 51.5a62.93 62.93 0 015.5-15.9l20.73 16.09a38.31 38.31 0 000 24.63q-10.36 8-20.73 16.08a63.33 63.33 0 01-5.5-40.9z"</span></span>
<span data-line=""><span style="color: #24292EFF">                        /></span></span>
<span data-line=""><span style="color: #24292EFF">                        &#x3C;</span><span style="color: #22863A">path</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">fill</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"#587dbd"</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">d</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"M65.27 52.15h59.52a74.33 74.33 0 01-1.61 33.58 57.44 57.44 0 01-16 26.26c-6.69-5.22-13.41-10.4-20.1-15.62a29.72 29.72 0 0012.66-19.54H65.27c-.01-8.22 0-16.45 0-24.68z"</span></span>
<span data-line=""><span style="color: #24292EFF">                        /></span></span>
<span data-line=""><span style="color: #24292EFF">                        &#x3C;</span><span style="color: #22863A">path</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">fill</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"#319f43"</span></span>
<span data-line=""><span style="color: #24292EFF">                            </span><span style="color: #6F42C1">d</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"M8.75 92.4q10.37-8 20.73-16.08A39.3 39.3 0 0044 95.74a37.16 37.16 0 0014.08 6.08 41.29 41.29 0 0015.1 0 36.16 36.16 0 0013.93-5.5c6.69 5.22 13.41 10.4 20.1 15.62a57.13 57.13 0 01-25.9 13.47 67.6 67.6 0 01-32.36-.35 63 63 0 01-23-11.59A63.73 63.73 0 018.75 92.4z"</span></span>
<span data-line=""><span style="color: #24292EFF">                        /></span></span>
<span data-line=""><span style="color: #24292EFF">                    &#x3C;/</span><span style="color: #22863A">svg</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">                    Login with Google</span></span>
<span data-line=""><span style="color: #24292EFF">                &#x3C;/</span><span style="color: #22863A">button</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;/</span><span style="color: #22863A">Card.Content</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;</span><span style="color: #22863A">Card.Footer</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"flex flex-col items-center justify-center p-3"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;</span><span style="color: #22863A">p</span><span style="color: #24292EFF">>by&#x3C;/</span><span style="color: #22863A">p</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">            &#x3C;</span><span style="color: #22863A">p</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"p-1"</span><span style="color: #24292EFF">>Prabhu Kiran Konda&#x3C;/</span><span style="color: #22863A">p</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">        &#x3C;/</span><span style="color: #22863A">Card.Footer</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;/</span><span style="color: #22863A">Card.Root</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `and the most important thing is to add <code data-svelte-h="svelte-19d50wc">+page.server.ts</code> file to all your routes as we use per path authentication. it will export a load function that contains the session info. so that we can use it in our components. we can use a common <code data-svelte-h="svelte-1qvjv9r">+layout.server.ts</code> but that&#39;s not secure.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="ts" data-theme="dark" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">redirect</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">@sveltejs/kit</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">load</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">async</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">event</span><span style="color: #B4C2F0">)</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">=></span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">session</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">await</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">event</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">locals</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">getSession</span><span style="color: #B4C2F0">()</span><span style="color: #86E1FC">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">   </span><span style="color: #858AA6">// only in src/routes/login/+page.server.ts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">   </span><span style="color: #86E1FC">if</span><span style="color: #B4C2F0"> (</span><span style="color: #FFC777">session</span><span style="color: #86E1FC">?.</span><span style="color: #A9B8E8">user</span><span style="color: #B4C2F0">) &#123;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">       </span><span style="color: #86E1FC">throw</span><span style="color: #B4C2F0"> </span><span style="color: #65BCFF">redirect</span><span style="color: #B4C2F0">(</span><span style="color: #FF966C">303</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/dashboard</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">   &#125;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #C8D3F5">session</span></span>
<span data-line=""><span style="color: #B4C2F0">    &#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="ts" data-theme="light" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; redirect &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'@sveltejs/kit'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">load</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">async</span><span style="color: #24292EFF"> (event) </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">session</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">await</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">event</span><span style="color: #6F42C1">.</span><span style="color: #1976D2">locals</span><span style="color: #6F42C1">.getSession</span><span style="color: #24292EFF">();</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">   </span><span style="color: #C2C3C5">// only in src/routes/login/+page.server.ts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">   </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> (</span><span style="color: #1976D2">session</span><span style="color: #24292EFF">?.user) &#123;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">       </span><span style="color: #D32F2F">throw</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">redirect</span><span style="color: #24292EFF">(</span><span style="color: #1976D2">303</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/dashboard'</span><span style="color: #24292EFF">);</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">   &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        session</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this code is common to all routes. but only in login route, add a redirect block. what it does is, if a session is already there which means the user is already logged in, then we redirect them to dashboard page even if they try to access the login page.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `we are missing one component that is <code data-svelte-h="svelte-3xvpci">AuthButton</code> that we have used in our Navbar. let&#39;s create that component.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">  </span><span style="color: #858AA6">// src/lib/components/AuthButton.svelte</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">page</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">$app/stores</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">signOut</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">@auth/sveltekit/client</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Button</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">./ui/button/button.svelte</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">&#123;#if !$page.data.session&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">  </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">a </span><span style="color: #FFC777">href</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">/login</span><span style="color: #86E1FC">"</span><span style="color: #FF757F"> </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">buttonClass</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5"> Sign in </span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">a</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">&#123;:else&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">  </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">Button</span></span>
<span data-line=""><span style="color: #FF757F">    </span><span style="color: #FFC777">on:click</span><span style="color: #86E1FC">=</span><span style="color: #C3E88D">&#123;()</span><span style="color: #FF757F"> </span><span style="color: #FF5370">=</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5"> &#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">      signOut(&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        callbackUrl: "/",</span></span>
<span data-line=""><span style="color: #C8D3F5">      &#125;);</span></span>
<span data-line=""><span style="color: #C8D3F5">    &#125;&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">    class="w-full">Sign out</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">Button</span></span>
<span data-line=""><span style="color: #FF757F">  </span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">&#123;/if&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="html" data-theme="light" data-svelte-h="svelte-tbi82z">AuthButton.svelte</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "light",
          __title__: "AuthButton.svelte"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #C2C3C5">// src/lib/components/AuthButton.svelte</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; page &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"$app/stores"</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; signOut &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"@auth/sveltekit/client"</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> Button </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"./ui/button/button.svelte"</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#123;#if !$page.data.session&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">  &#x3C;</span><span style="color: #22863A">a</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">href</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"/login"</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"buttonClass"</span><span style="color: #24292EFF">> Sign in &#x3C;/</span><span style="color: #22863A">a</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">&#123;:else&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">  &#x3C;</span><span style="color: #22863A">Button</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #6F42C1">on:click</span><span style="color: #D32F2F">=</span><span style="color: #2B5581">&#123;()</span><span style="color: #24292EFF"> => &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">      signOut(&#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        callbackUrl: "/",</span></span>
<span data-line=""><span style="color: #24292EFF">      &#125;);</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    class="w-full">Sign out&#x3C;/</span><span style="color: #22863A">Button</span></span>
<span data-line=""><span style="color: #24292EFF">  ></span></span>
<span data-line=""><span style="color: #24292EFF">&#123;/if&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `if the user is not logged in, we show a login button and if the user is logged in, we show a logout button and if the user clicks on the logout button, we sign them out and redirect them to the home page.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `now, let&#39;s create a dashboard page. we will be using the same code that we have used in our home page.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// src/routes/dashboard/+page.svelte</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">export</span><span style="color: #B4C2F0"> </span><span style="color: #C099FF">let</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">data</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">flex flex-col items-center justify-center h-full gap-4</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    &#123;#if data.session&#125;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">h1 </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">text-5xl</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">Dashboard</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">h1</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    Welcome back,</span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">span </span><span style="color: #FFC777">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">text-4xl</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span><span style="color: #C8D3F5">&#123;data.session.user?.name&#125;!</span><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">span</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #C8D3F5">    &#123;/if&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="html" data-theme="light" data-svelte-h="svelte-18mo8d7">+page.svelte</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "html",
          "data-theme": "light",
          __title__: "+page.svelte"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="html" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// src/routes/dashboard/+page.svelte</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">let</span><span style="color: #24292EFF"> data;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">div</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"flex flex-col items-center justify-center h-full gap-4"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;#if data.session&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #22863A">h1</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"text-5xl"</span><span style="color: #24292EFF">>Dashboard&#x3C;/</span><span style="color: #22863A">h1</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    Welcome back,&#x3C;</span><span style="color: #22863A">span</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"text-4xl"</span><span style="color: #24292EFF">>&#123;data.session.user?.name&#125;!&#x3C;/</span><span style="color: #22863A">span</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;/if&#125;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `and in <code data-svelte-h="svelte-1hj7jrw">routes/dashboard/+page.server.ts</code> file, add the following code.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="ts" data-theme="dark" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #858AA6">// src/routes/dashboard/+page.server.ts</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">redirect</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">@sveltejs/kit</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">type</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">PageServerLoad</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">../$types</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">load</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">PageServerLoad</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">async</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">event</span><span style="color: #B4C2F0">)</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">=></span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">session</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">await</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">event</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">locals</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">getSession</span><span style="color: #B4C2F0">()</span><span style="color: #86E1FC">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">   </span><span style="color: #858AA6">// only in src/routes/dashboard/+page.server.ts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">   </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">fromUrl</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">event</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">url</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">pathname</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">+</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">event</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">url</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">search</span><span style="color: #86E1FC">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">   </span><span style="color: #86E1FC">if</span><span style="color: #B4C2F0"> (</span><span style="color: #86E1FC">!</span><span style="color: #FFC777">session</span><span style="color: #86E1FC">?.</span><span style="color: #A9B8E8">user</span><span style="color: #B4C2F0">) &#123;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">       </span><span style="color: #86E1FC">throw</span><span style="color: #B4C2F0"> </span><span style="color: #65BCFF">redirect</span><span style="color: #B4C2F0">(</span><span style="color: #FF966C">303</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">&#96;</span><span style="color: #C3E88D">/login?redirectTo=</span><span style="color: #86E1FC">$&#123;</span><span style="color: #C8D3F5">fromUrl</span><span style="color: #86E1FC">&#125;&#96;</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #86E1FC">+</span><span style="color: #B4C2F0">    &#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #C8D3F5">session</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">    &#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-1l4yo0w">+page.server.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "+page.server.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="ts" data-theme="light" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #C2C3C5">// src/routes/dashboard/+page.server.ts</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; redirect &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"@sveltejs/kit"</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> &#123; PageServerLoad &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">"../$types"</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">load</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">PageServerLoad</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">async</span><span style="color: #24292EFF"> (event) </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">session</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">await</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">event</span><span style="color: #6F42C1">.</span><span style="color: #1976D2">locals</span><span style="color: #6F42C1">.getSession</span><span style="color: #24292EFF">();</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">   </span><span style="color: #C2C3C5">// only in src/routes/dashboard/+page.server.ts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">   </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">fromUrl</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">event</span><span style="color: #24292EFF">.</span><span style="color: #1976D2">url</span><span style="color: #24292EFF">.pathname </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">event</span><span style="color: #24292EFF">.</span><span style="color: #1976D2">url</span><span style="color: #24292EFF">.search;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">   </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> (</span><span style="color: #D32F2F">!</span><span style="color: #1976D2">session</span><span style="color: #24292EFF">?.user) &#123;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">       </span><span style="color: #D32F2F">throw</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">redirect</span><span style="color: #24292EFF">(</span><span style="color: #1976D2">303</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">&#96;/login?redirectTo=</span><span style="color: #D32F2F">$&#123;</span><span style="color: #24292EFF">fromUrl</span><span style="color: #D32F2F">&#125;</span><span style="color: #22863A">&#96;</span><span style="color: #24292EFF">);</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #D32F2F">+</span><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        session</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `what the newly added lines of code does is, when a user is not logged in and tries to access the dashboard page, we redirect them to the login page and after they login, we redirect them back to the dashboard page.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you can use this code in any protected route where you want to redirect the user to login page if they are not logged in.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `And that&#39;s it. we have successfully integrated Auth.js (NextAuth) and Prisma with SvelteKit. you can see the full code in my ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://github.com/PrabhuKiran8790/sveltekit-authjs-prisma-template.git",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `github repo`;
              }
            }
          )}.`;
        }
      })} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://raw.githubusercontent.com/PrabhuKiran8790/sveltekit-authjs-prisma-template/main/static/login_page.png",
          alt: "login Page"
        },
        {},
        {}
      )} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://raw.githubusercontent.com/PrabhuKiran8790/sveltekit-authjs-prisma-template/main/static/dashboard_page.png",
          alt: "Dashboard Page"
        },
        {},
        {}
      )} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://raw.githubusercontent.com/PrabhuKiran8790/sveltekit-authjs-prisma-template/main/static/prisma_studio.png",
          alt: "Prisma Studio"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Thanks for reading. If you have any questions, feel free to comment down below or reach out to me on twitter ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://twitter.com/prabhukirantwt",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `@prabhukirantwt`;
              }
            }
          )}.`;
        }
      })}`;
    }
  })}`;
});
const __vite_glob_0_0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$7,
  metadata: metadata$9
}, Symbol.toStringTag, { value: "Module" }));
const metadata$8 = {
  "title": "Dimensionality Reduction using Auto-Encoders",
  "description": "Let's look at how we can perform the dimensionality reduction using the Auto-Encoders using Tensorflow.",
  "date": "2023-11-10",
  "tags": ["Tensorflow", "Deep Learning"],
  "image": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*DcsT4AtAq8dxqbDHP_Uppg.jpeg",
  "draft": false
};
const Page$6 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$8), {}, {
    default: () => {
      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Imagine having over thousands of input features in your dataset and you&#39;ve to train them all..well, sometimes we wish we could compress the dataset to less number of features. Right? well, we can do that using a special type of Neural Network called Auto-encoders.
So, let&#39;s have a brief introduction to Auto-encoders.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "what-in-the-world-are-auto-encoders",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `What in the world are Auto-encoders`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `<strong data-svelte-h="svelte-eec9jz">Auto-encoders</strong> are a branch of neural networks which basically compresses the information of the input variables into a reduced dimensional space and then it recreate the input data set to train it all over again.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Auto-encoder consists of 3 main components`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Encoder`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Code`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Decoder`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `<strong data-svelte-h="svelte-96kk1m">Encoder</strong>: An encoder is a feed-forward, fully connected neural network that compresses the input into a latent space representation and encodes the input image as a compressed representation in a reduced dimension, and produces code. <code data-svelte-h="svelte-1oa53aa">The lower the size of the code, the higher the compression.</code>`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `<strong data-svelte-h="svelte-1pxl4t5">Code</strong>: This part of the network contains the reduced representation of the input that is fed into the decoder.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `<strong data-svelte-h="svelte-1di3a6e">Decoder</strong>: A decoder is also a feed-forward neural network that is similar to an encoder but the representation is the exact mirror image of the encoder. The decoder reconstructs the input back to the original dimensions from the code.`;
        }
      })} ${validate_component(Blockquote, "Components.blockquote").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
            default: () => {
              return `Note: The dimensions of both input and output must be the same.`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `first, the input passes through the encoder, which is a fully-connected ANN, to produce the code. The decoder, which has the similar ANN structure, then produces the output only using the code. The goal is to get an output identical with the input. Note that the decoder architecture is the mirror image of the encoder. This is not a requirement but it&#39;s typically the case. The only requirement is the dimensionality of the input and output needs to be the same. Anything in the middle can be played with.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "hyperparameters", headerTag: "h2" }, {}, {
        default: () => {
          return `Hyperparameters`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Auto Encoders can have many different hyperparameters but the very important ones are:`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<strong data-svelte-h="svelte-1t4nlqc">Code size</strong>: number of nodes in the middle layer. Smaller size results in more compression.`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<strong data-svelte-h="svelte-1my6g0">Number of layers</strong>: the auto-encoder can be as deep as we like. In the figure above we have 2 layers in both the encoder and decoder, without considering the input and output.`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<strong data-svelte-h="svelte-1x5vluh">Number of nodes per layer</strong>: the auto-encoder architecture we&#39;re working on is called a stacked auto-encoder since the layers are stacked one after another. Usually stacked autoencoders look like a &quot;sandwich&quot;. The number of nodes per layer decreases with each subsequent layer of the encoder and increases back in the decoder. Also, the decoder is symmetric to the encoder in terms of the layer structure. As noted above this is not necessary and we have total control over these parameters.`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<strong data-svelte-h="svelte-1y07lvd">Loss function</strong>: we either use mean squared error (mse) or binary cross-entropy. If the input values are in the range [0, 1] then we typically use cross-entropy, otherwise, we use the mean squared error.`;
            }
          })}`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "code-implementation",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Code Implementation`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Let&#39;s look at how we can do dimensionality reduction using auto-encoders. Let&#39;s take a dataset that has 12 features and 8664 columns. Now our goal is to compress the dataset into 6 features.`;
        }
      })} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*5Lw8YLwLpAsq9wTNdSyDUA.jpeg",
          alt: "Original dataset with 12 features"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Let us scale the data so that all our data points lie in the same range`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> sklearn</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">preprocessing </span><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> MinMaxScaler</span></span>
<span data-line=""><span style="color: #C8D3F5">scaler </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> MinMaxScaler</span><span style="color: #86E1FC">()</span></span>
<span data-line=""><span style="color: #C8D3F5">df_scaled </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> scaler</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">fit_transform</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">df</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">X_train_df </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> pd</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">DataFrame</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">df_scaled</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">columns</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">df</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">columns</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">X_train_df</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="py" data-theme="light" data-svelte-h="svelte-1pd9nkw">autoencoder.py</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light",
          __title__: "autoencoder.py"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> sklearn</span><span style="color: #212121">.</span><span style="color: #24292EFF">preprocessing </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> MinMaxScaler</span></span>
<span data-line=""><span style="color: #24292EFF">scaler </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">MinMaxScaler</span><span style="color: #212121">()</span></span>
<span data-line=""><span style="color: #24292EFF">df_scaled </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> scaler</span><span style="color: #212121">.</span><span style="color: #6F42C1">fit_transform</span><span style="color: #212121">(df)</span></span>
<span data-line=""><span style="color: #24292EFF">X_train_df </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> pd</span><span style="color: #212121">.</span><span style="color: #6F42C1">DataFrame</span><span style="color: #212121">(df_scaled, columns</span><span style="color: #D32F2F">=</span><span style="color: #212121">df.columns)</span></span>
<span data-line=""><span style="color: #24292EFF">X_train_df</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*6whoBrbY9x-2gzxbjJhWww.jpeg",
          alt: "dataset after scaling"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Let&#39;s build an auto-encoder with a code size of 6.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> tensorflow </span><span style="color: #86E1FC">as</span><span style="color: #C8D3F5"> tf</span></span>
<span data-line=""><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> tensorflow</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">keras</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">layers </span><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> Input</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> Dense</span></span>
<span data-line=""><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> tensorflow</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">keras</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">models </span><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> Model</span></span>
<span data-line=""><span style="color: #858AA6"># 12, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 12</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6"># encoder</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_input </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Input</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">shape</span><span style="color: #86E1FC">=(</span><span style="color: #C8D3F5">n_features</span><span style="color: #86E1FC">),</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_input</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer1 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">11</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer1</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_input</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer2 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">10</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer2</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer1</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer3 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">9</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer3</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer2</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer4 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">8</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer4</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer3</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer5 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">7</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer5</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer4</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">latent_space </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">6</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">latent_space</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer5</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6">#decoder</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer1 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">7</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer1</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">latent_space</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer2 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">8</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer2</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer1</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer3 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">9</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer3</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer2</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer4 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">10</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer4</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer3</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer5 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">11</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer5</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer4</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">output </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n_features</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">sigmoid</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Output</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer5</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">autoencoder </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Model</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">encoder_input</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> output</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Autoencoder</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">autoencoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">compile</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">optimizer</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">adam</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                    </span><span style="color: #FCA7EA">loss</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">tf</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">keras</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">losses</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">mean_squared_error</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">autoencoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">summary</span><span style="color: #86E1FC">()</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="py" data-theme="light" data-svelte-h="svelte-1pd9nkw">autoencoder.py</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light",
          __title__: "autoencoder.py"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> tensorflow </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> tf</span></span>
<span data-line=""><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> tensorflow</span><span style="color: #212121">.</span><span style="color: #24292EFF">keras</span><span style="color: #212121">.</span><span style="color: #24292EFF">layers </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> Input</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Dense</span></span>
<span data-line=""><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> tensorflow</span><span style="color: #212121">.</span><span style="color: #24292EFF">keras</span><span style="color: #212121">.</span><span style="color: #24292EFF">models </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> Model</span></span>
<span data-line=""><span style="color: #C2C3C5"># 12, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 12</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5"># encoder</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_input </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Input</span><span style="color: #212121">(shape</span><span style="color: #D32F2F">=</span><span style="color: #212121">(n_features), name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_input'</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer1 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">11</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer1'</span><span style="color: #212121">)(encoder_input)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer2 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">10</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer2'</span><span style="color: #212121">)(encoder_layer1)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer3 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">9</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer3'</span><span style="color: #212121">)(encoder_layer2)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer4 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">8</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer4'</span><span style="color: #212121">)(encoder_layer3)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer5 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">7</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer5'</span><span style="color: #212121">)(encoder_layer4)</span></span>
<span data-line=""><span style="color: #24292EFF">latent_space </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">6</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'latent_space'</span><span style="color: #212121">)(encoder_layer5)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5">#decoder</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer1 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">7</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer1'</span><span style="color: #212121">)(latent_space)</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer2 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">8</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer2'</span><span style="color: #212121">)(decoder_layer1)</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer3 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">9</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer3'</span><span style="color: #212121">)(decoder_layer2)</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer4 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">10</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer4'</span><span style="color: #212121">)(decoder_layer3)</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer5 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">11</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer5'</span><span style="color: #212121">)(decoder_layer4)</span></span>
<span data-line=""><span style="color: #24292EFF">output </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(n_features, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'sigmoid'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'Output'</span><span style="color: #212121">)(decoder_layer5)</span></span>
<span data-line=""><span style="color: #24292EFF">autoencoder </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Model</span><span style="color: #212121">(encoder_input, output, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'Autoencoder'</span><span style="color: #212121">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">autoencoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">compile</span><span style="color: #212121">(optimizer</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'adam'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #212121">                    loss</span><span style="color: #D32F2F">=</span><span style="color: #212121">tf.keras.losses.mean_squared_error)</span></span>
<span data-line=""><span style="color: #24292EFF">autoencoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">summary</span><span style="color: #212121">()</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s train the model`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">history </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> autoencoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">fit</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train_df</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                          X_train_df</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                          </span><span style="color: #FCA7EA">epochs</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">100</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                          </span><span style="color: #FCA7EA">steps_per_epoch</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">10</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                          </span><span style="color: #FCA7EA">verbose</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">0</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #858AA6"># only the encoder part</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Model</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">inputs</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">encoder_input</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">outputs</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">latent_space</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">compile</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">optimizer</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">adam</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                        </span><span style="color: #FCA7EA">loss</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">tf</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">keras</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">losses</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">mean_squared_error</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">X_train_encode </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> encoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">predict</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train_df</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoded_train </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> pd</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">DataFrame</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train_encode</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                             </span><span style="color: #FCA7EA">columns</span><span style="color: #86E1FC">=[</span><span style="color: #C099FF">f</span><span style="color: #C3E88D">"X</span><span style="color: #FF98A4">&#123;</span><span style="color: #C8D3F5">x</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">"</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">for</span><span style="color: #C8D3F5"> x </span><span style="color: #86E1FC">in</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">range</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> X_train_encode</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">shape</span><span style="color: #86E1FC">[</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">]+</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">)])</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="py" data-theme="light" data-svelte-h="svelte-1pd9nkw">autoencoder.py</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light",
          __title__: "autoencoder.py"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">history </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> autoencoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">fit</span><span style="color: #212121">(X_train_df,</span></span>
<span data-line=""><span style="color: #212121">                          X_train_df,</span></span>
<span data-line=""><span style="color: #212121">                          epochs</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">100</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #212121">                          steps_per_epoch</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">10</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #212121">                          verbose</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">0</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #C2C3C5"># only the encoder part</span></span>
<span data-line=""><span style="color: #24292EFF">encoder </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Model</span><span style="color: #212121">(inputs</span><span style="color: #D32F2F">=</span><span style="color: #212121">encoder_input, outputs</span><span style="color: #D32F2F">=</span><span style="color: #212121">latent_space)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">compile</span><span style="color: #212121">(optimizer</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'adam'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #212121">                        loss</span><span style="color: #D32F2F">=</span><span style="color: #212121">tf.keras.losses.mean_squared_error)</span></span>
<span data-line=""><span style="color: #24292EFF">X_train_encode </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> encoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">predict</span><span style="color: #212121">(X_train_df)</span></span>
<span data-line=""><span style="color: #24292EFF">encoded_train </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> pd</span><span style="color: #212121">.</span><span style="color: #6F42C1">DataFrame</span><span style="color: #212121">(X_train_encode,</span></span>
<span data-line=""><span style="color: #212121">                             columns</span><span style="color: #D32F2F">=</span><span style="color: #212121">[</span><span style="color: #D32F2F">f</span><span style="color: #22863A">"X</span><span style="color: #1976D2">&#123;</span><span style="color: #212121">x</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">"</span><span style="color: #212121"> </span><span style="color: #D32F2F">for</span><span style="color: #212121"> x </span><span style="color: #D32F2F">in</span><span style="color: #212121"> </span><span style="color: #6F42C1">range</span><span style="color: #212121">(</span><span style="color: #1976D2">1</span><span style="color: #212121">, X_train_encode.shape[</span><span style="color: #1976D2">1</span><span style="color: #212121">]</span><span style="color: #D32F2F">+</span><span style="color: #1976D2">1</span><span style="color: #212121">)])</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*7y62pJS6SXaorbOvOuW_ew.jpeg",
          alt: "autoencoder model summary"
        },
        {},
        {}
      )} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ADFWIJH8y935y_q4YfNtlg.jpeg",
          alt: "Compressed version of the original (12 features) dataset with 6 features"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `We can see that output from the encoder which compressed our dataset into 6 features.`;
        }
      })} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*_lKNXKfS443uMV1WfyzwGg.jpeg",
          alt: "Input Vs. Reconstruction plot. The red shaded portion shows the error between Original vs Reconstructed data."
        },
        {},
        {}
      )}`;
    }
  })}`;
});
const __vite_glob_0_1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$6,
  metadata: metadata$8
}, Symbol.toStringTag, { value: "Module" }));
function isSeries(post2) {
  return post2.order !== void 0;
}
const Blogcard = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { post } = $$props;
  let { class: className = "md:max-w-md" } = $$props;
  let { keepImage = true } = $$props;
  let { tagClass = "" } = $$props;
  let { shallow = false } = $$props;
  if ($$props.post === void 0 && $$bindings.post && post !== void 0)
    $$bindings.post(post);
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  if ($$props.keepImage === void 0 && $$bindings.keepImage && keepImage !== void 0)
    $$bindings.keepImage(keepImage);
  if ($$props.tagClass === void 0 && $$bindings.tagClass && tagClass !== void 0)
    $$bindings.tagClass(tagClass);
  if ($$props.shallow === void 0 && $$bindings.shallow && shallow !== void 0)
    $$bindings.shallow(shallow);
  return `<a${add_attribute("class", cn("block pb-0 border-2 rounded-xl hover:border-primary no-highlight relative", className), 0)}${add_attribute("href", `/blog/${post.slug}`, 0)} data-sveltekit-preload-data>${keepImage ? `${post.image ? `<div class="p-2">${typeof post.image === "string" ? `<div class="h-56 w-full"><img${add_attribute("src", post.image, 0)}${add_attribute("alt", post.title, 0)} class="rounded-md w-full h-full" loading="lazy"></div>` : `${Array.isArray(post.image) ? `<div class="h-56 w-full"><img${add_attribute("src", post.image[0], 0)}${add_attribute("alt", post.title, 0)} class="rounded-md w-full h-full dark:hidden" loading="lazy"> <img${add_attribute("src", post.image[1], 0)}${add_attribute("alt", post.title, 0)} class="rounded-md w-full h-full hidden dark:block" loading="lazy"></div>` : ``}`}</div>` : ``}` : ``} <div class="flex flex-col justify-between h-full gap-4 p-2.5 pt-0"><div${add_attribute("class", cn("flex flex-col justify-between gap-1", keepImage ? "" : "pt-2"), 0)}><div class="flex items-center gap-2 text-muted-foreground text-xs">${validate_component(Calendar$1, "Calendar").$$render($$result, { class: "w-3 h-3" }, {}, {})} <h1>${escape(formatDate(post.date))}</h1></div> <h1${add_attribute("class", `text-lg font-semibold ${""}`, 0)}>${escape(post.title)}</h1> <div class="flex gap-2 flex-wrap">${each(post.tags, (tag) => {
    return `${validate_component(Tag, "Tag").$$render(
      $$result,
      {
        tag,
        href: `/tags/${tagToSlug(tag)}`,
        class: tagClass,
        shallow
      },
      {},
      {}
    )}`;
  })}</div></div> <div><p class="text-muted-foreground">${escape(post.description)}</p></div></div> ${isSeries(post) ? `<div class="absolute -top-3 right-4 px-2 bg-zinc-200 dark:bg-zinc-800 rounded-lg" data-svelte-h="svelte-167v2at"><p class="text-black dark:text-white">Series</p></div>` : ``}</a>`;
});
const Dialog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $idValues, $$unsubscribe_idValues;
  let { preventScroll = void 0 } = $$props;
  let { closeOnEscape = void 0 } = $$props;
  let { closeOnOutsideClick = void 0 } = $$props;
  let { portal = void 0 } = $$props;
  let { forceVisible = true } = $$props;
  let { open = void 0 } = $$props;
  let { onOpenChange = void 0 } = $$props;
  let { openFocus = void 0 } = $$props;
  let { closeFocus = void 0 } = $$props;
  const { states: { open: localOpen }, updateOption, ids } = setCtx({
    closeOnEscape,
    preventScroll,
    closeOnOutsideClick,
    portal,
    forceVisible,
    defaultOpen: open,
    openFocus,
    closeFocus,
    onOpenChange: ({ next }) => {
      if (open !== next) {
        onOpenChange?.(next);
        open = next;
      }
      return next;
    }
  });
  const idValues = derived([ids.content, ids.description, ids.title], ([$contentId, $descriptionId, $titleId]) => ({
    content: $contentId,
    description: $descriptionId,
    title: $titleId
  }));
  $$unsubscribe_idValues = subscribe(idValues, (value) => $idValues = value);
  if ($$props.preventScroll === void 0 && $$bindings.preventScroll && preventScroll !== void 0)
    $$bindings.preventScroll(preventScroll);
  if ($$props.closeOnEscape === void 0 && $$bindings.closeOnEscape && closeOnEscape !== void 0)
    $$bindings.closeOnEscape(closeOnEscape);
  if ($$props.closeOnOutsideClick === void 0 && $$bindings.closeOnOutsideClick && closeOnOutsideClick !== void 0)
    $$bindings.closeOnOutsideClick(closeOnOutsideClick);
  if ($$props.portal === void 0 && $$bindings.portal && portal !== void 0)
    $$bindings.portal(portal);
  if ($$props.forceVisible === void 0 && $$bindings.forceVisible && forceVisible !== void 0)
    $$bindings.forceVisible(forceVisible);
  if ($$props.open === void 0 && $$bindings.open && open !== void 0)
    $$bindings.open(open);
  if ($$props.onOpenChange === void 0 && $$bindings.onOpenChange && onOpenChange !== void 0)
    $$bindings.onOpenChange(onOpenChange);
  if ($$props.openFocus === void 0 && $$bindings.openFocus && openFocus !== void 0)
    $$bindings.openFocus(openFocus);
  if ($$props.closeFocus === void 0 && $$bindings.closeFocus && closeFocus !== void 0)
    $$bindings.closeFocus(closeFocus);
  open !== void 0 && localOpen.set(open);
  {
    updateOption("preventScroll", preventScroll);
  }
  {
    updateOption("closeOnEscape", closeOnEscape);
  }
  {
    updateOption("closeOnOutsideClick", closeOnOutsideClick);
  }
  {
    updateOption("portal", portal);
  }
  {
    updateOption("forceVisible", forceVisible);
  }
  {
    updateOption("openFocus", openFocus);
  }
  {
    updateOption("closeFocus", closeFocus);
  }
  $$unsubscribe_idValues();
  return `${slots.default ? slots.default({ ids: $idValues }) : ``}`;
});
const DialogClose = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let builder;
  let $$restProps = compute_rest_props($$props, ["asChild"]);
  let $close, $$unsubscribe_close;
  let { asChild = false } = $$props;
  const { elements: { close } } = getCtx();
  $$unsubscribe_close = subscribe(close, (value) => $close = value);
  createDispatcher();
  const attrs = getAttrs("close");
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  builder = $close;
  $$unsubscribe_close();
  return `${asChild ? `${slots.default ? slots.default({ builder, attrs }) : ``}` : `<button${spread(
    [
      escape_object(builder),
      { type: "button" },
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}>${slots.default ? slots.default({ builder, attrs }) : ``}</button>`}`;
});
const DialogPortal = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let builder;
  let $$restProps = compute_rest_props($$props, ["asChild"]);
  let $portalled, $$unsubscribe_portalled;
  let { asChild = false } = $$props;
  const { elements: { portalled } } = getCtx();
  $$unsubscribe_portalled = subscribe(portalled, (value) => $portalled = value);
  const attrs = getAttrs("portal");
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  builder = $portalled;
  $$unsubscribe_portalled();
  return `${asChild ? `${slots.default ? slots.default({ builder, attrs }) : ``}` : `<div${spread([escape_object(builder), escape_object($$restProps), escape_object(attrs)], {})}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>`}`;
});
const DialogContent = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let builder;
  let $$restProps = compute_rest_props($$props, [
    "transition",
    "transitionConfig",
    "inTransition",
    "inTransitionConfig",
    "outTransition",
    "outTransitionConfig",
    "asChild",
    "id"
  ]);
  let $content, $$unsubscribe_content;
  let $open, $$unsubscribe_open;
  let { transition = void 0 } = $$props;
  let { transitionConfig = void 0 } = $$props;
  let { inTransition = void 0 } = $$props;
  let { inTransitionConfig = void 0 } = $$props;
  let { outTransition = void 0 } = $$props;
  let { outTransitionConfig = void 0 } = $$props;
  let { asChild = false } = $$props;
  let { id = void 0 } = $$props;
  const { elements: { content }, states: { open }, ids } = getCtx();
  $$unsubscribe_content = subscribe(content, (value) => $content = value);
  $$unsubscribe_open = subscribe(open, (value) => $open = value);
  const attrs = getAttrs("content");
  if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0)
    $$bindings.transition(transition);
  if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0)
    $$bindings.transitionConfig(transitionConfig);
  if ($$props.inTransition === void 0 && $$bindings.inTransition && inTransition !== void 0)
    $$bindings.inTransition(inTransition);
  if ($$props.inTransitionConfig === void 0 && $$bindings.inTransitionConfig && inTransitionConfig !== void 0)
    $$bindings.inTransitionConfig(inTransitionConfig);
  if ($$props.outTransition === void 0 && $$bindings.outTransition && outTransition !== void 0)
    $$bindings.outTransition(outTransition);
  if ($$props.outTransitionConfig === void 0 && $$bindings.outTransitionConfig && outTransitionConfig !== void 0)
    $$bindings.outTransitionConfig(outTransitionConfig);
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  if ($$props.id === void 0 && $$bindings.id && id !== void 0)
    $$bindings.id(id);
  {
    if (id) {
      ids.content.set(id);
    }
  }
  builder = $content;
  $$unsubscribe_content();
  $$unsubscribe_open();
  return `${asChild && $open ? `${slots.default ? slots.default({ builder, attrs }) : ``}` : `${transition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps), escape_object(attrs)], {})}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : `${inTransition && outTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps), escape_object(attrs)], {})}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : `${inTransition && $open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : `${outTransition && $open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : `${$open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : ``}`}`}`}`}`}`;
});
const DialogOverlay = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let builder;
  let $$restProps = compute_rest_props($$props, [
    "transition",
    "transitionConfig",
    "inTransition",
    "inTransitionConfig",
    "outTransition",
    "outTransitionConfig",
    "asChild"
  ]);
  let $overlay, $$unsubscribe_overlay;
  let $open, $$unsubscribe_open;
  let { transition = void 0 } = $$props;
  let { transitionConfig = void 0 } = $$props;
  let { inTransition = void 0 } = $$props;
  let { inTransitionConfig = void 0 } = $$props;
  let { outTransition = void 0 } = $$props;
  let { outTransitionConfig = void 0 } = $$props;
  let { asChild = false } = $$props;
  const { elements: { overlay }, states: { open } } = getCtx();
  $$unsubscribe_overlay = subscribe(overlay, (value) => $overlay = value);
  $$unsubscribe_open = subscribe(open, (value) => $open = value);
  const attrs = getAttrs("overlay");
  if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0)
    $$bindings.transition(transition);
  if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0)
    $$bindings.transitionConfig(transitionConfig);
  if ($$props.inTransition === void 0 && $$bindings.inTransition && inTransition !== void 0)
    $$bindings.inTransition(inTransition);
  if ($$props.inTransitionConfig === void 0 && $$bindings.inTransitionConfig && inTransitionConfig !== void 0)
    $$bindings.inTransitionConfig(inTransitionConfig);
  if ($$props.outTransition === void 0 && $$bindings.outTransition && outTransition !== void 0)
    $$bindings.outTransition(outTransition);
  if ($$props.outTransitionConfig === void 0 && $$bindings.outTransitionConfig && outTransitionConfig !== void 0)
    $$bindings.outTransitionConfig(outTransitionConfig);
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  builder = $overlay;
  $$unsubscribe_overlay();
  $$unsubscribe_open();
  return `${asChild && $open ? `${slots.default ? slots.default({ builder, attrs }) : ``}` : `${transition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps), escape_object(attrs)], {})}></div>` : `${inTransition && outTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps), escape_object(attrs)], {})}></div>` : `${inTransition && $open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}></div>` : `${outTransition && $open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}></div>` : `${$open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}></div>` : ``}`}`}`}`}`}`;
});
const Popover = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $idValues, $$unsubscribe_idValues;
  let { positioning = void 0 } = $$props;
  let { arrowSize = void 0 } = $$props;
  let { disableFocusTrap = void 0 } = $$props;
  let { closeOnEscape = void 0 } = $$props;
  let { closeOnOutsideClick = void 0 } = $$props;
  let { preventScroll = void 0 } = $$props;
  let { portal = void 0 } = $$props;
  let { open = void 0 } = $$props;
  let { onOpenChange = void 0 } = $$props;
  let { openFocus = void 0 } = $$props;
  let { closeFocus = void 0 } = $$props;
  const { updateOption, states: { open: localOpen }, ids } = setCtx$1({
    positioning,
    arrowSize,
    disableFocusTrap,
    closeOnEscape,
    closeOnOutsideClick,
    preventScroll,
    portal,
    defaultOpen: open,
    openFocus,
    closeFocus,
    onOpenChange: ({ next }) => {
      if (open !== next) {
        onOpenChange?.(next);
        open = next;
      }
      return next;
    }
  });
  const idValues = derived([ids.content, ids.trigger], ([$contentId, $triggerId]) => ({ content: $contentId, trigger: $triggerId }));
  $$unsubscribe_idValues = subscribe(idValues, (value) => $idValues = value);
  if ($$props.positioning === void 0 && $$bindings.positioning && positioning !== void 0)
    $$bindings.positioning(positioning);
  if ($$props.arrowSize === void 0 && $$bindings.arrowSize && arrowSize !== void 0)
    $$bindings.arrowSize(arrowSize);
  if ($$props.disableFocusTrap === void 0 && $$bindings.disableFocusTrap && disableFocusTrap !== void 0)
    $$bindings.disableFocusTrap(disableFocusTrap);
  if ($$props.closeOnEscape === void 0 && $$bindings.closeOnEscape && closeOnEscape !== void 0)
    $$bindings.closeOnEscape(closeOnEscape);
  if ($$props.closeOnOutsideClick === void 0 && $$bindings.closeOnOutsideClick && closeOnOutsideClick !== void 0)
    $$bindings.closeOnOutsideClick(closeOnOutsideClick);
  if ($$props.preventScroll === void 0 && $$bindings.preventScroll && preventScroll !== void 0)
    $$bindings.preventScroll(preventScroll);
  if ($$props.portal === void 0 && $$bindings.portal && portal !== void 0)
    $$bindings.portal(portal);
  if ($$props.open === void 0 && $$bindings.open && open !== void 0)
    $$bindings.open(open);
  if ($$props.onOpenChange === void 0 && $$bindings.onOpenChange && onOpenChange !== void 0)
    $$bindings.onOpenChange(onOpenChange);
  if ($$props.openFocus === void 0 && $$bindings.openFocus && openFocus !== void 0)
    $$bindings.openFocus(openFocus);
  if ($$props.closeFocus === void 0 && $$bindings.closeFocus && closeFocus !== void 0)
    $$bindings.closeFocus(closeFocus);
  open !== void 0 && localOpen.set(open);
  {
    updateOption("positioning", positioning);
  }
  {
    updateOption("arrowSize", arrowSize);
  }
  {
    updateOption("disableFocusTrap", disableFocusTrap);
  }
  {
    updateOption("closeOnEscape", closeOnEscape);
  }
  {
    updateOption("closeOnOutsideClick", closeOnOutsideClick);
  }
  {
    updateOption("preventScroll", preventScroll);
  }
  {
    updateOption("portal", portal);
  }
  {
    updateOption("openFocus", openFocus);
  }
  {
    updateOption("closeFocus", closeFocus);
  }
  $$unsubscribe_idValues();
  return `${slots.default ? slots.default({ ids: $idValues }) : ``}`;
});
const PopoverContent = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let builder;
  let $$restProps = compute_rest_props($$props, [
    "transition",
    "transitionConfig",
    "inTransition",
    "inTransitionConfig",
    "outTransition",
    "outTransitionConfig",
    "asChild",
    "id"
  ]);
  let $content, $$unsubscribe_content;
  let $open, $$unsubscribe_open;
  let { transition = void 0 } = $$props;
  let { transitionConfig = void 0 } = $$props;
  let { inTransition = void 0 } = $$props;
  let { inTransitionConfig = void 0 } = $$props;
  let { outTransition = void 0 } = $$props;
  let { outTransitionConfig = void 0 } = $$props;
  let { asChild = false } = $$props;
  let { id = void 0 } = $$props;
  const { elements: { content }, states: { open }, ids } = getCtx$1();
  $$unsubscribe_content = subscribe(content, (value) => $content = value);
  $$unsubscribe_open = subscribe(open, (value) => $open = value);
  const attrs = getAttrs$1("content");
  if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0)
    $$bindings.transition(transition);
  if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0)
    $$bindings.transitionConfig(transitionConfig);
  if ($$props.inTransition === void 0 && $$bindings.inTransition && inTransition !== void 0)
    $$bindings.inTransition(inTransition);
  if ($$props.inTransitionConfig === void 0 && $$bindings.inTransitionConfig && inTransitionConfig !== void 0)
    $$bindings.inTransitionConfig(inTransitionConfig);
  if ($$props.outTransition === void 0 && $$bindings.outTransition && outTransition !== void 0)
    $$bindings.outTransition(outTransition);
  if ($$props.outTransitionConfig === void 0 && $$bindings.outTransitionConfig && outTransitionConfig !== void 0)
    $$bindings.outTransitionConfig(outTransitionConfig);
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  if ($$props.id === void 0 && $$bindings.id && id !== void 0)
    $$bindings.id(id);
  {
    if (id) {
      ids.content.set(id);
    }
  }
  builder = $content;
  $$unsubscribe_content();
  $$unsubscribe_open();
  return `${asChild && $open ? `${slots.default ? slots.default({ builder, attrs }) : ``}` : `${transition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps), escape_object(attrs)], {})}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : `${inTransition && outTransition && $open ? `<div${spread([escape_object(builder), escape_object($$restProps), escape_object(attrs)], {})}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : `${inTransition && $open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : `${outTransition && $open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : `${$open ? `<div${spread(
    [
      escape_object(builder),
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}>${slots.default ? slots.default({ builder, attrs }) : ``}</div>` : ``}`}`}`}`}`}`;
});
const PopoverTrigger = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let builder;
  let $$restProps = compute_rest_props($$props, ["asChild", "id"]);
  let $trigger, $$unsubscribe_trigger;
  let { asChild = false } = $$props;
  let { id = void 0 } = $$props;
  const { elements: { trigger }, ids } = getCtx$1();
  $$unsubscribe_trigger = subscribe(trigger, (value) => $trigger = value);
  createDispatcher();
  const attrs = getAttrs$1("trigger");
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  if ($$props.id === void 0 && $$bindings.id && id !== void 0)
    $$bindings.id(id);
  {
    if (id) {
      ids.trigger.set(id);
    }
  }
  builder = $trigger;
  $$unsubscribe_trigger();
  return `${asChild ? `${slots.default ? slots.default({ builder, attrs }) : ``}` : `<button${spread(
    [
      escape_object(builder),
      { type: "button" },
      escape_object($$restProps),
      escape_object(attrs)
    ],
    {}
  )}>${slots.default ? slots.default({ builder, attrs }) : ``}</button>`}`;
});
function styleToString(style) {
  return Object.keys(style).reduce((str, key) => {
    if (style[key] === void 0)
      return str;
    return str + `${key}:${style[key]};`;
  }, "");
}
const srOnlyStyles = {
  position: "absolute",
  width: "1px",
  height: "1px",
  padding: "0",
  margin: "-1px",
  overflow: "hidden",
  clip: "rect(0, 0, 0, 0)",
  whiteSpace: "nowrap",
  borderWidth: "0"
};
function addEventListener(target, event, handler, options) {
  const events = Array.isArray(event) ? event : [event];
  events.forEach((_event) => target.addEventListener(_event, handler, options));
  return () => {
    events.forEach((_event) => target.removeEventListener(_event, handler, options));
  };
}
function executeCallbacks(...callbacks) {
  return (...args) => {
    for (const callback of callbacks) {
      if (typeof callback === "function") {
        callback(...args);
      }
    }
  };
}
const Command$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, [
    "label",
    "shouldFilter",
    "filter",
    "value",
    "onValueChange",
    "loop",
    "onKeydown",
    "state",
    "ids",
    "asChild"
  ]);
  let $stateStore, $$unsubscribe_stateStore;
  let { label = void 0 } = $$props;
  let { shouldFilter = true } = $$props;
  let { filter = void 0 } = $$props;
  let { value = void 0 } = $$props;
  let { onValueChange = void 0 } = $$props;
  let { loop = void 0 } = $$props;
  let { onKeydown = void 0 } = $$props;
  let { state = void 0 } = $$props;
  let { ids = void 0 } = $$props;
  let { asChild = false } = $$props;
  const { commandEl, handleRootKeydown, ids: commandIds, state: stateStore } = createCommand({
    label,
    shouldFilter,
    filter,
    value,
    onValueChange: (next) => {
      if (next !== value) {
        value = next;
        onValueChange?.(next);
      }
    },
    loop,
    state,
    ids
  });
  $$unsubscribe_stateStore = subscribe(stateStore, (value2) => $stateStore = value2);
  function syncValueAndState(value2) {
    if (value2 && value2 !== $stateStore.value) {
      set_store_value(stateStore, $stateStore.value = value2, $stateStore);
    }
  }
  function rootAction(node) {
    commandEl.set(node);
    const unsubEvents = executeCallbacks(addEventListener(node, "keydown", handleKeydown));
    return { destroy: unsubEvents };
  }
  const rootAttrs = {
    role: "application",
    id: commandIds.root,
    "data-cmdk-root": ""
  };
  const labelAttrs = {
    "data-cmdk-label": "",
    for: commandIds.input,
    id: commandIds.label,
    style: styleToString(srOnlyStyles)
  };
  function handleKeydown(e) {
    onKeydown?.(e);
    if (e.defaultPrevented)
      return;
    handleRootKeydown(e);
  }
  const root = { action: rootAction, attrs: rootAttrs };
  if ($$props.label === void 0 && $$bindings.label && label !== void 0)
    $$bindings.label(label);
  if ($$props.shouldFilter === void 0 && $$bindings.shouldFilter && shouldFilter !== void 0)
    $$bindings.shouldFilter(shouldFilter);
  if ($$props.filter === void 0 && $$bindings.filter && filter !== void 0)
    $$bindings.filter(filter);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.onValueChange === void 0 && $$bindings.onValueChange && onValueChange !== void 0)
    $$bindings.onValueChange(onValueChange);
  if ($$props.loop === void 0 && $$bindings.loop && loop !== void 0)
    $$bindings.loop(loop);
  if ($$props.onKeydown === void 0 && $$bindings.onKeydown && onKeydown !== void 0)
    $$bindings.onKeydown(onKeydown);
  if ($$props.state === void 0 && $$bindings.state && state !== void 0)
    $$bindings.state(state);
  if ($$props.ids === void 0 && $$bindings.ids && ids !== void 0)
    $$bindings.ids(ids);
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  {
    syncValueAndState(value);
  }
  $$unsubscribe_stateStore();
  return `${asChild ? `${slots.default ? slots.default({ root, label: { attrs: labelAttrs } }) : ``}` : `<div${spread([escape_object(rootAttrs), escape_object($$restProps)], {})}> <label${spread([escape_object(labelAttrs)], {})}>${escape(label ?? "")}</label> ${slots.default ? slots.default({ root, label: { attrs: labelAttrs } }) : ``}</div>`}`;
});
const CommandEmpty = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  compute_rest_props($$props, ["asChild"]);
  let $state, $$unsubscribe_state;
  let { asChild = false } = $$props;
  const state = getState();
  $$unsubscribe_state = subscribe(state, (value) => $state = value);
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  $state.filtered.count === 0;
  $$unsubscribe_state();
  return `${``}`;
});
const CommandGroup = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let containerAttrs;
  let groupAttrs;
  let container;
  let group;
  let $$restProps = compute_rest_props($$props, ["heading", "value", "alwaysRender", "asChild"]);
  let $render, $$unsubscribe_render;
  let { heading = void 0 } = $$props;
  let { value = "" } = $$props;
  let { alwaysRender = false } = $$props;
  let { asChild = false } = $$props;
  const { id } = createGroup(alwaysRender);
  const context = getCtx$2();
  const state = getState();
  const headingId = generateId();
  const render = derived(state, ($state) => {
    if (alwaysRender)
      return true;
    if (context.filter() === false)
      return true;
    if (!$state.search)
      return true;
    return $state.filtered.groups.has(id);
  });
  $$unsubscribe_render = subscribe(render, (value2) => $render = value2);
  function containerAction(node) {
    if (value) {
      context.value(id, value);
      node.setAttribute(VALUE_ATTR, value);
      return;
    }
    if (heading) {
      value = heading.trim().toLowerCase();
    } else if (node.textContent) {
      value = node.textContent.trim().toLowerCase();
    }
    context.value(id, value);
    node.setAttribute(VALUE_ATTR, value);
  }
  const headingAttrs = {
    "data-cmdk-group-heading": "",
    "aria-hidden": true,
    id: headingId
  };
  if ($$props.heading === void 0 && $$bindings.heading && heading !== void 0)
    $$bindings.heading(heading);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.alwaysRender === void 0 && $$bindings.alwaysRender && alwaysRender !== void 0)
    $$bindings.alwaysRender(alwaysRender);
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  containerAttrs = {
    "data-cmdk-group": "",
    role: "presentation",
    hidden: $render ? void 0 : true,
    "data-value": value
  };
  groupAttrs = {
    "data-cmdk-group-items": "",
    role: "group",
    "aria-labelledby": heading ? headingId : void 0
  };
  container = {
    action: containerAction,
    attrs: containerAttrs
  };
  group = { attrs: groupAttrs };
  $$unsubscribe_render();
  return `${asChild ? `${slots.default ? slots.default({
    container,
    group,
    heading: { attrs: headingAttrs }
  }) : ``}` : `<div${spread([escape_object(containerAttrs), escape_object($$restProps)], {})}>${heading ? `<div${spread([escape_object(headingAttrs)], {})}>${escape(heading)}</div>` : ``} <div${spread([escape_object(groupAttrs)], {})}>${slots.default ? slots.default({
    container,
    group,
    heading: { attrs: headingAttrs }
  }) : ``}</div></div>`}`;
});
const CommandInput = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["autofocus", "value", "asChild", "el"]);
  let $selectedItemId, $$unsubscribe_selectedItemId;
  let $search, $$unsubscribe_search;
  const { ids, commandEl } = getCtx$2();
  const state = getState();
  const search = derived(state, ($state) => $state.search);
  $$unsubscribe_search = subscribe(search, (value2) => $search = value2);
  const valueStore = derived(state, ($state) => $state.value);
  let { autofocus = void 0 } = $$props;
  let { value = $search } = $$props;
  let { asChild = false } = $$props;
  let { el = void 0 } = $$props;
  const selectedItemId = derived([valueStore, commandEl], ([$value, $commandEl]) => {
    if (!isBrowser)
      return void 0;
    const item = $commandEl?.querySelector(`${ITEM_SELECTOR}[${VALUE_ATTR}="${$value}"]`);
    return item?.getAttribute("id");
  });
  $$unsubscribe_selectedItemId = subscribe(selectedItemId, (value2) => $selectedItemId = value2);
  function handleValueUpdate(v) {
    state.updateState("search", v);
  }
  function action(node) {
    const unsubEvents = addEventListener(node, "change", (e) => {
      if (!isHTMLInputElement(e.target))
        return;
      state.updateState("search", e.target.value);
    });
    return { destroy: unsubEvents };
  }
  let attrs;
  if ($$props.autofocus === void 0 && $$bindings.autofocus && autofocus !== void 0)
    $$bindings.autofocus(autofocus);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  if ($$props.el === void 0 && $$bindings.el && el !== void 0)
    $$bindings.el(el);
  {
    handleValueUpdate(value);
  }
  attrs = {
    type: "text",
    "data-cmdk-input": "",
    autocomplete: "off",
    autocorrect: "off",
    spellcheck: false,
    "aria-autocomplete": "list",
    role: "combobox",
    "aria-expanded": true,
    "aria-controls": ids.list,
    "aria-labelledby": ids.label,
    "aria-activedescendant": $selectedItemId ?? void 0,
    id: ids.input
  };
  $$unsubscribe_selectedItemId();
  $$unsubscribe_search();
  return `${asChild ? `${slots.default ? slots.default({ action, attrs }) : ``}` : `<input${spread([escape_object(attrs), escape_object($$restProps)], {})}${add_attribute("this", el, 0)}${add_attribute("value", value, 0)}>`}`;
});
const CommandItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let attrs;
  let $$restProps = compute_rest_props($$props, ["disabled", "value", "onSelect", "alwaysRender", "asChild", "id"]);
  let $selected, $$unsubscribe_selected;
  let $render, $$unsubscribe_render;
  let { disabled = false } = $$props;
  let { value = "" } = $$props;
  let { onSelect = void 0 } = $$props;
  let { alwaysRender = false } = $$props;
  let { asChild = false } = $$props;
  let { id = generateId() } = $$props;
  const groupContext = getGroup();
  const context = getCtx$2();
  const state = getState();
  const trueAlwaysRender = alwaysRender ?? groupContext?.alwaysRender;
  const render = derived(state, ($state) => {
    if (trueAlwaysRender || context.filter() === false || !$state.search)
      return true;
    const currentScore = $state.filtered.items.get(id);
    if (isUndefined(currentScore))
      return false;
    return currentScore > 0;
  });
  $$unsubscribe_render = subscribe(render, (value2) => $render = value2);
  let isFirstRender = true;
  const selected = derived(state, ($state) => $state.value === value);
  $$unsubscribe_selected = subscribe(selected, (value2) => $selected = value2);
  function action(node) {
    if (!value && node.textContent) {
      value = node.textContent.trim().toLowerCase();
    }
    context.value(id, value);
    node.setAttribute(VALUE_ATTR, value);
    const unsubEvents = executeCallbacks(
      addEventListener(node, "pointermove", () => {
        if (disabled)
          return;
        select();
      }),
      addEventListener(node, "click", () => {
        if (disabled)
          return;
        handleItemClick();
      })
    );
    return {
      destroy() {
        unsubEvents();
      }
    };
  }
  function handleItemClick() {
    select();
    onSelect?.(value);
  }
  function select() {
    state.updateState("value", value, true);
  }
  if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
    $$bindings.disabled(disabled);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.onSelect === void 0 && $$bindings.onSelect && onSelect !== void 0)
    $$bindings.onSelect(onSelect);
  if ($$props.alwaysRender === void 0 && $$bindings.alwaysRender && alwaysRender !== void 0)
    $$bindings.alwaysRender(alwaysRender);
  if ($$props.asChild === void 0 && $$bindings.asChild && asChild !== void 0)
    $$bindings.asChild(asChild);
  if ($$props.id === void 0 && $$bindings.id && id !== void 0)
    $$bindings.id(id);
  attrs = {
    "aria-disabled": disabled ? true : void 0,
    "aria-selected": $selected ? true : void 0,
    "data-disabled": disabled ? true : void 0,
    "data-selected": $selected ? true : void 0,
    "data-cmdk-item": "",
    "data-value": value,
    role: "option",
    id
  };
  $$unsubscribe_selected();
  $$unsubscribe_render();
  return `${$render || isFirstRender ? `${asChild ? `${slots.default ? slots.default({ action, attrs }) : ``}` : `<div${spread([escape_object(attrs), escape_object($$restProps)], {})}>${slots.default ? slots.default({ action, attrs }) : ``}</div>`}` : ``}`;
});
const Command = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["value", "class"]);
  let { value = void 0 } = $$props;
  let { class: className = void 0 } = $$props;
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    $$rendered = `${validate_component(Command$1, "CommandPrimitive.Root").$$render(
      $$result,
      Object.assign(
        {},
        {
          class: cn("flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground", className)
        },
        $$restProps,
        { value }
      ),
      {
        value: ($$value) => {
          value = $$value;
          $$settled = false;
        }
      },
      {
        default: () => {
          return `${slots.default ? slots.default({}) : ``}`;
        }
      }
    )}`;
  } while (!$$settled);
  return $$rendered;
});
const Dialog_portal = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, []);
  return `${validate_component(DialogPortal, "DialogPrimitive.Portal").$$render($$result, Object.assign({}, $$restProps), {}, {
    default: () => {
      return `${slots.default ? slots.default({}) : ``}`;
    }
  })}`;
});
const Dialog_overlay = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class", "transition", "transitionConfig"]);
  let { class: className = void 0 } = $$props;
  let { transition = fade } = $$props;
  let { transitionConfig = { duration: 150 } } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0)
    $$bindings.transition(transition);
  if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0)
    $$bindings.transitionConfig(transitionConfig);
  return `${validate_component(DialogOverlay, "DialogPrimitive.Overlay").$$render(
    $$result,
    Object.assign(
      {},
      { transition },
      { transitionConfig },
      {
        class: cn("fixed inset-0 z-50 bg-background/80 backdrop-blur-sm", className)
      },
      $$restProps
    ),
    {},
    {}
  )}`;
});
const Dialog_content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class", "transition", "transitionConfig"]);
  let { class: className = void 0 } = $$props;
  let { transition = flyAndScale } = $$props;
  let { transitionConfig = { duration: 200 } } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0)
    $$bindings.transition(transition);
  if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0)
    $$bindings.transitionConfig(transitionConfig);
  return `${validate_component(Dialog_portal, "Dialog.Portal").$$render($$result, {}, {}, {
    default: () => {
      return `${validate_component(Dialog_overlay, "Dialog.Overlay").$$render($$result, {}, {}, {})} ${validate_component(DialogContent, "DialogPrimitive.Content").$$render(
        $$result,
        Object.assign(
          {},
          { transition },
          { transitionConfig },
          {
            class: cn("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg sm:rounded-lg md:w-full", className)
          },
          $$restProps
        ),
        {},
        {
          default: () => {
            return `${slots.default ? slots.default({}) : ``} ${validate_component(DialogClose, "DialogPrimitive.Close").$$render(
              $$result,
              {
                class: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
              },
              {},
              {
                default: () => {
                  return `${validate_component(X, "X").$$render($$result, { class: "w-4 h-4" }, {}, {})} <span class="sr-only" data-svelte-h="svelte-1pewzs3">Close</span>`;
                }
              }
            )}`;
          }
        }
      )}`;
    }
  })}`;
});
const Root$1 = Dialog;
const Command_empty = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `${validate_component(CommandEmpty, "CommandPrimitive.Empty").$$render(
    $$result,
    Object.assign(
      {},
      {
        class: cn("py-6 text-center text-sm", className)
      },
      $$restProps
    ),
    {},
    {
      default: () => {
        return `${slots.default ? slots.default({}) : ``}`;
      }
    }
  )}`;
});
const Command_group = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `${validate_component(CommandGroup, "CommandPrimitive.Group").$$render(
    $$result,
    Object.assign(
      {},
      {
        class: cn("overflow-hidden p-1 text-foreground [&_[data-cmdk-group-heading]]:px-2 [&_[data-cmdk-group-heading]]:py-1.5 [&_[data-cmdk-group-heading]]:text-xs [&_[data-cmdk-group-heading]]:font-medium [&_[data-cmdk-group-heading]]:text-muted-foreground", className)
      },
      $$restProps
    ),
    {},
    {
      default: () => {
        return `${slots.default ? slots.default({}) : ``}`;
      }
    }
  )}`;
});
const Command_item = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `${validate_component(CommandItem, "CommandPrimitive.Item").$$render(
    $$result,
    Object.assign(
      {},
      {
        class: cn("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", className)
      },
      $$restProps
    ),
    {},
    {
      default: () => {
        return `${slots.default ? slots.default({}) : ``}`;
      }
    }
  )}`;
});
const Command_input = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class"]);
  let { class: className = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  return `<div class="flex items-center px-2 border-b" data-cmdk-input-wrapper="">${validate_component(Search$1, "Search").$$render(
    $$result,
    {
      class: "w-4 h-4 mr-2 opacity-50 shrink-0"
    },
    {},
    {}
  )} ${validate_component(CommandInput, "CommandPrimitive.Input").$$render(
    $$result,
    Object.assign(
      {},
      {
        class: cn("flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50", className)
      },
      $$restProps
    ),
    {},
    {}
  )}</div>`;
});
const Page$5 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { data } = $$props;
  if ($$props.data === void 0 && $$bindings.data && data !== void 0)
    $$bindings.data(data);
  return `<div class="p-1 md:p-4 mt-4 md:mt-8 md:container space-y-7"><div class="flex flex-col items-center justify-center gap-5"><div><h1 class="text-3xl font-bold text-transparent bg-gradient-to-r from-primary to-gray-400 bg-clip-text md:text-5xl">${escape(data.currentTag)}</h1></div> <div class="h-[0.3px] -mt-3 md:hidden w-[50%] bg-gradient-to-r from-gray-400 via-primary to-gray-400"></div> <div class="md:hidden no-highlight">${validate_component(Combobox, "ComboBox").$$render(
    $$result,
    {
      tags: data.tags,
      currentTag: data.currentTag,
      postsByTag: data.postsByTag
    },
    {},
    {}
  )}</div></div> <div class="flex justify-start gap-4"><div class="hidden md:block mt-3">${validate_component(Combobox, "ComboBox").$$render(
    $$result,
    {
      tags: data.tags,
      currentTag: data.currentTag,
      postsByTag: data.postsByTag
    },
    {},
    {}
  )}</div> <div class="w-full">${validate_component(Masonry, "Masonry").$$render(
    $$result,
    {
      gridGap: "0.75rem",
      items: data.postsByTag[data.currentTag].posts,
      stretchFirst: false,
      reset: true
    },
    {},
    {
      default: () => {
        return `${each(data.postsByTag[data.currentTag].posts, (post) => {
          return `${validate_component(Blogcard, "Blogcard").$$render(
            $$result,
            {
              post,
              class: "max-w-lg",
              keepImage: false,
              tagClass: "dark:bg-zinc-800 dark:text-white dark:hover:bg-zinc-700"
            },
            {},
            {}
          )}`;
        })}`;
      }
    }
  )}</div></div></div>`;
});
const Tag = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  let { tag } = $$props;
  let { count = 0 } = $$props;
  let { href = "" } = $$props;
  let hover = false;
  let { class: className = void 0 } = $$props;
  let { shallow = false } = $$props;
  let showModal__ = false;
  if ($$props.tag === void 0 && $$bindings.tag && tag !== void 0)
    $$bindings.tag(tag);
  if ($$props.count === void 0 && $$bindings.count && count !== void 0)
    $$bindings.count(count);
  if ($$props.href === void 0 && $$bindings.href && href !== void 0)
    $$bindings.href(href);
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  if ($$props.shallow === void 0 && $$bindings.shallow && shallow !== void 0)
    $$bindings.shallow(shallow);
  $$unsubscribe_page();
  return `${count > 0 ? `<a${add_attribute("href", href, 0)} class="border border-muted-foreground/50 hover:border-primary rounded-md flex"><h1 class="px-2 text-base font-medium text-primary">${escape(tag)}</h1> <p${add_attribute("class", cn("bg-zinc-200 dark:bg-zinc-700/80 rounded-r-[5px] px-2 border-l border-muted-foreground/50", hover), 0)}>${escape(count)}</p></a> ` : `${validate_component(Badge, "Badge").$$render($$result, { class: cn("rounded", className), href }, {}, {
    default: () => {
      return `${escape(tag)}`;
    }
  })}`} ${validate_component(Root$1, "Dialog.Root").$$render(
    $$result,
    {
      open: showModal__,
      onOpenChange: () => {
        history.back();
        showModal__ = false;
      }
    },
    {},
    {
      default: () => {
        return `${validate_component(Dialog_content, "Dialog.Content").$$render(
          $$result,
          {
            class: "max-w-5xl h-[80vh] overflow-scroll"
          },
          {},
          {
            default: () => {
              return `<div class="w-full h-full">${$page.state.tagsData ? `${validate_component(Page$5, "TagsPage").$$render($$result, { data: $page.state.tagsData }, {}, {})}` : ``}</div>`;
            }
          }
        )}`;
      }
    }
  )}`;
});
const Popover_content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["class", "transition", "transitionConfig"]);
  let { class: className = void 0 } = $$props;
  let { transition = flyAndScale } = $$props;
  let { transitionConfig = void 0 } = $$props;
  if ($$props.class === void 0 && $$bindings.class && className !== void 0)
    $$bindings.class(className);
  if ($$props.transition === void 0 && $$bindings.transition && transition !== void 0)
    $$bindings.transition(transition);
  if ($$props.transitionConfig === void 0 && $$bindings.transitionConfig && transitionConfig !== void 0)
    $$bindings.transitionConfig(transitionConfig);
  return `${validate_component(PopoverContent, "PopoverPrimitive.Content").$$render(
    $$result,
    Object.assign(
      {},
      { transition },
      { transitionConfig },
      {
        class: cn("z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none", className)
      },
      $$restProps
    ),
    {},
    {
      default: () => {
        return `${slots.default ? slots.default({}) : ``}`;
      }
    }
  )}`;
});
const Root = Popover;
const Trigger = PopoverTrigger;
const Combobox = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { tags = [] } = $$props;
  let { currentTag } = $$props;
  let { postsByTag } = $$props;
  let tags_ = tags.map((tag) => ({ slug: tagToSlug(tag), label: tag }));
  let open = false;
  let value = "";
  function closeAndFocusTrigger(triggerId) {
    open = false;
    tick().then(() => {
      document.getElementById(triggerId)?.focus();
    });
  }
  if ($$props.tags === void 0 && $$bindings.tags && tags !== void 0)
    $$bindings.tags(tags);
  if ($$props.currentTag === void 0 && $$bindings.currentTag && currentTag !== void 0)
    $$bindings.currentTag(currentTag);
  if ($$props.postsByTag === void 0 && $$bindings.postsByTag && postsByTag !== void 0)
    $$bindings.postsByTag(postsByTag);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    tags_.find((f) => f.slug === value)?.label ?? "Select a tag";
    $$rendered = `${validate_component(Root, "Popover.Root").$$render(
      $$result,
      { open },
      {
        open: ($$value) => {
          open = $$value;
          $$settled = false;
        }
      },
      {
        default: ({ ids }) => {
          return `${validate_component(Trigger, "Popover.Trigger").$$render($$result, { asChild: true }, {}, {
            default: ({ builder }) => {
              return `${validate_component(Button, "Button").$$render(
                $$result,
                {
                  builders: [builder],
                  variant: "outline",
                  role: "combobox",
                  "aria-expanded": open,
                  class: "w-[350px] justify-between md:w-[300px] no-highlight"
                },
                {},
                {
                  default: () => {
                    return `<div class="flex items-center gap-1">${validate_component(Tag$2, "Tag").$$render($$result, { class: "mr-1 h-3 w-3" }, {}, {})} <span class="bg-zinc-200 dark:bg-zinc-700 px-2 rounded-md">${escape(currentTag)}</span></div> ${validate_component(ChevronsUpDown, "ChevronsUpDown").$$render(
                      $$result,
                      {
                        class: "ml-2 h-4 w-4 shrink-0 opacity-50"
                      },
                      {},
                      {}
                    )}`;
                  }
                }
              )}`;
            }
          })} ${validate_component(Popover_content, "Popover.Content").$$render($$result, { class: "w-[350px] md:w-[300px] p-0" }, {}, {
            default: () => {
              return `${validate_component(Command, "Command.Root").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Command_input, "Command.Input").$$render($$result, { placeholder: "Search..." }, {}, {})} ${validate_component(Command_empty, "Command.Empty").$$render($$result, {}, {}, {
                    default: () => {
                      return `No Tags found`;
                    }
                  })} ${validate_component(Command_group, "Command.Group").$$render($$result, {}, {}, {
                    default: () => {
                      return `${each(tags_, (tag) => {
                        return `${validate_component(Command_item, "Command.Item").$$render(
                          $$result,
                          {
                            value: tag.slug,
                            onSelect: (currentValue) => {
                              value = currentValue;
                              goto();
                              closeAndFocusTrigger(ids.trigger);
                            },
                            class: "cursor-pointer no-highlight"
                          },
                          {},
                          {
                            default: () => {
                              return `<div class="flex justify-between items-center w-full"><div class="flex items-center">${escape(tag.label)}</div> <div>${escape(postsByTag[tag.label].count)} </div></div> `;
                            }
                          }
                        )}`;
                      })}`;
                    }
                  })}`;
                }
              })}`;
            }
          })}`;
        }
      }
    )}`;
  } while (!$$settled);
  return $$rendered;
});
const metadata$7 = {
  "title": "Getting Started",
  "description": "A guide on how to use this sveltekit + markdown blog.",
  "date": "2023-11-20",
  "tags": ["SvelteKit"],
  "image": "https://res.cloudinary.com/practicaldev/image/fetch/s--YFzS8yLr--/c_imagga_scale,f_auto,fl_progressive,h_720,q_auto,w_1280/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9o5387e8s37g7r4i6dy.png",
  "draft": false
};
const Page$4 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$7), {}, {
    default: () => {
      return `${validate_component(H2, "Components.h2").$$render($$result, { id: "introduction", headerTag: "h2" }, {}, {
        default: () => {
          return `Introduction`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Welcome, this will guide you through this template and how to use it. This is a SvelteKit + MDsveX Personal website and a blog completely designed with ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://shadcn-svelte.com/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `Shadcn-Svelte`;
              }
            }
          )}, it has everything you need get started and you can fully customise it.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `to get started, clone the repo: ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://github.com/PrabhuKiran8790/prabhukirankonda-portfolio.git",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `repo link`;
              }
            }
          )}`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "shell",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="shell" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">git clone https://github.com/PrabhuKiran8790/prabhukirankonda-portfolio.git</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "shell",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="shell" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">git clone https://github.com/PrabhuKiran8790/prabhukirankonda-portfolio.git</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(H2, "Components.h2").$$render($$result, { id: "features", headerTag: "h2" }, {}, {
        default: () => {
          return `Features`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `it&#39;s got ton of features that you don&#39;t wanna miss out.`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Tailwind CSS for styling`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(A, "Components.a").$$render(
                    $$result,
                    {
                      href: "https://shadcn-svelte.com/",
                      rel: "nofollow"
                    },
                    {},
                    {
                      default: () => {
                        return `Shadcn-Svelte`;
                      }
                    }
                  )} for UI Components`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Light and Dark mode`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Syntax Highlighting`;
                }
              })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `with toast notifications for copy feedback`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `individual words highlighting<div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                        $$result,
                        {
                          class: "Moonlight II",
                          tabindex: "0",
                          "data-language": "py",
                          "data-theme": "dark"
                        },
                        {},
                        {
                          default: () => {
                            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="py" data-theme="dark" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">n</span><span style="color: #B4C2F0">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">if</span><span style="color: #C8D3F5"> n </span><span style="color: #86E1FC">&#x3C;=</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #858AA6"># base case</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="hi">return</span><span style="color: #C8D3F5"> n</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">else:</span></span>
<span data-line=""><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="hi">return</span><span style="color: #C8D3F5"> </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">+</span><span style="color: #C8D3F5"> </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
                          }
                        }
                      )}<div data-rehype-pretty-code-title data-language="py" data-theme="light" data-svelte-h="svelte-tlfsmo">fib.py</div>${validate_component(Pre, "Components.pre").$$render(
                        $$result,
                        {
                          class: "min-light",
                          tabindex: "0",
                          "data-language": "py",
                          "data-theme": "light",
                          __title__: "fib.py"
                        },
                        {},
                        {
                          default: () => {
                            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="py" data-theme="light" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">n</span><span style="color: #24292EFF">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> n </span><span style="color: #D32F2F">&#x3C;=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">1</span><span style="color: #212121">:</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5"># base case</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F" data-highlighted-chars="" data-chars-id="hi">return</span><span style="color: #24292EFF"> n</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">else</span><span style="color: #212121">:</span></span>
<span data-line=""><span style="color: #D32F2F" data-highlighted-chars="" data-chars-id="hi">return</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">1</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">2</span><span style="color: #212121">)</span></span></code>`}<!-- HTML_TAG_END -->`;
                          }
                        }
                      )}</div>`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `inline syntax highlighting example: <span data-rehype-pretty-code-fragment data-svelte-h="svelte-14h8fuq"><code data-language="js" data-theme="dark"><span class="line"><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">&quot;</span><span style="color: #C3E88D">Hey there</span><span style="color: #86E1FC">&quot;</span><span style="color: #B4C2F0">)</span></span></code><code data-language="js" data-theme="light"><span class="line"><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">&quot;Hey there&quot;</span><span style="color: #24292EFF">)</span></span></code></span>`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `ability to inlcude an icon if title with an extension is provided.`;
                    }
                  })}`;
                }
              })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "Moonlight II",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "dark"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;js title="example.js"</span></span>
<span data-line=""><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Hello from JS</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "min-light",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "light"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;js title="example.js"</span></span>
<span data-line=""><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'Hello from JS'</span><span style="color: #24292EFF">);</span></span>
<span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `will render into`;
                }
              })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "Moonlight II",
                  tabindex: "0",
                  "data-language": "js",
                  "data-theme": "dark"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Hello from JS</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}<div data-rehype-pretty-code-title data-language="js" data-theme="light" data-svelte-h="svelte-1gdg245">example.js</div>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "min-light",
                  tabindex: "0",
                  "data-language": "js",
                  "data-theme": "light",
                  __title__: "example.js"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'Hello from JS'</span><span style="color: #24292EFF">);</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `you can add icons for other languages as well`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(A, "Components.a").$$render(
                    $$result,
                    {
                      href: "https://mdsvex.pngwn.io/",
                      rel: "nofollow"
                    },
                    {},
                    {
                      default: () => {
                        return `MDsveX`;
                      }
                    }
                  )} to support markdown files so that you can write your blogs in markdown.`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Custom Components`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `use svelte components inside markdown`;
                }
              })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `example<div class="flex items-center gap-4">try changing the theme 👉
    ${validate_component(Theme_toggle, "ThemeToggle").$$render($$result, {}, {}, {})}</div>`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Table of Contents`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Giscus Comments (based on Github Discussions)`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Image Optimization`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Support for Nested routing of blogs`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Projects Page`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Support for math`;
                }
              })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>⋅</mo><mi mathvariant="bold">E</mi><mo>=</mo><mfrac><mi>ρ</mi><msub><mi>ε</mi><mn>0</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">
abla cdot mathbf{E} = \frac{\rho}{\varepsilon_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9436em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ρ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>⋅</mo><mi mathvariant="bold">B</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">
abla cdot mathbf{B} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span>`}<!-- HTML_TAG_END --></span> <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">E</mi><mo>=</mo><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">B</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">
abla 	imes mathbf{E} = -\frac{partial mathbf{B}}{partial t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathbf">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">B</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><mi mathvariant="bold">J</mi><mo>+</mo><msub><mi>ε</mi><mn>0</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">E</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
abla 	imes mathbf{B} = mu_0 left(mathbf{J} + \varepsilon_0 \frac{partial mathbf{E}}{partial t}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathbf">J</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathbf">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `wondering what those equations are? Maxwells Equations 🙃`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(Math$1, "Math").$$render(
                        $$result,
                        {
                          eq: `$\\nabla \\cdot \\mathbf{E} = \\frac{\\rho}{\\varepsilon_0}$`
                        },
                        {},
                        {}
                      )} this is an example of inline equation (using external component)`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">B</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><mi mathvariant="bold">J</mi><mo>+</mo><msub><mi>ε</mi><mn>0</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">E</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">&#92;nabla &#92;times mathbf&#123;B&#125; = mu_0 left(mathbf&#123;J&#125; + \varepsilon_0 \frac&#123;partial mathbf&#123;E&#125;&#125;&#123;partial t&#125;&#92;right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2301em;vertical-align:-0.35em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathbf">J</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathbf mtight">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> is an inline equation (I somehow created a plugin to render inline equation without relying on external component.)`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `Mobile friendly interface`;
                }
              })}`;
            }
          })}`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "how-to-use?", headerTag: "h2" }, {}, {
        default: () => {
          return `How to use?`;
        }
      })} ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "starting-from-home-page",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `Starting from home page`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `in home page at <code data-svelte-h="svelte-n3xlcd">src/routes/+page.svelte</code> we have two components, <code data-svelte-h="svelte-8u81l4">Hero</code> and <code data-svelte-h="svelte-ptrqzl">LatestPost</code>`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "svelte",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="svelte" data-theme="dark" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">script </span><span style="color: #C099FF">lang</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">ts</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">Hero</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">LatestPost</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$lib/components/site</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">type</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">PageData</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">./$types</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">export</span><span style="color: #B4C2F0"> </span><span style="color: #C099FF">let</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">data</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">PageData</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">div </span><span style="color: #C099FF">class</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">p-4</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FFC777">Hero</span><span style="color: #FF757F"> </span><span style="color: #86E1FC">/></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FFC777">LatestPost</span><span style="color: #FF757F"> </span><span style="color: #C099FF">&#123;</span><span style="color: #C8D3F5">data</span><span style="color: #C099FF">&#125;</span><span style="color: #FF757F"> </span><span style="color: #86E1FC">/></span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">div</span><span style="color: #86E1FC">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="svelte" data-theme="light" data-svelte-h="svelte-11puv5">+page.svelte</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "svelte",
          "data-theme": "light",
          __title__: "+page.svelte"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="svelte" data-theme="light" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">script</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">lang</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"ts"</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; Hero</span><span style="color: #212121">,</span><span style="color: #24292EFF"> LatestPost &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$lib/components/site'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> &#123; PageData &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'./$types'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">let</span><span style="color: #24292EFF"> data</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">PageData</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">div</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">class</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"p-4"</span><span style="color: #24292EFF">></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #1976D2">Hero</span><span style="color: #24292EFF"> /></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">    &#x3C;</span><span style="color: #1976D2">LatestPost</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">&#123;</span><span style="color: #24292EFF">data</span><span style="color: #6F42C1">&#125;</span><span style="color: #24292EFF"> /></span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">div</span><span style="color: #24292EFF">></span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `here i&#39;m not going with the sveltekit internals, i assume you know the basics.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `the <code data-svelte-h="svelte-8u81l4">Hero</code> component render the profile picture, Intro and social icons. to chage the social icons, change <code data-svelte-h="svelte-yapukx">config.ts</code> file.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">LinkedIn</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">X</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$lib/components/site/icons</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">FileText</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Github</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Mail</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">lucide-svelte</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">routesType</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">socialsType</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">typeof</span><span style="color: #C8D3F5"> Github</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">class</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6">// nav routes</span></span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">routes</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">routesType</span><span style="color: #86E1FC">[]</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Blog</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/blog</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Projects</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/projects</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">About</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/about</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6">// social icons with links</span></span>
<span data-line=""><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">socials</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">socialsType</span><span style="color: #86E1FC">[]</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://github.com/prabhukiran8790</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">Github</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">GitHub</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://linkedin.com/in/PrabhuKiranKonda</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">LinkedIn</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">LinkedIn</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://x.com/prabhukirantwt</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF98A4">X</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Twitter</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">class</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">h-4 w-4</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">mailto:prabhukiran426@gmail.com</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">Mail</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Mail</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">class</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">h-4 w-4</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/Prabhu Kiran Konda Resume.pdf</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">FileText</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Resume</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">getSocials</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">&#123;</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">exclude</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">&#125;:</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span><span style="color: #C8D3F5"> </span><span style="color: #4FD6BE">exclude</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;&#125;)</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">socialsType</span><span style="color: #86E1FC">[]</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">=></span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">if</span><span style="color: #B4C2F0"> (</span><span style="color: #C8D3F5">exclude</span><span style="color: #B4C2F0">) &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">socials</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">filter</span><span style="color: #B4C2F0">((</span><span style="color: #FCA7EA">social</span><span style="color: #B4C2F0">) </span><span style="color: #C099FF">=></span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">social</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">display</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">!==</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">exclude</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    &#125;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">socials</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">githubConfig</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">username</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">PrabhuKiran8790</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">repo</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">sveltekit-portfolio</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">branch</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">main</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-q4g3f9">config.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "config.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; LinkedIn</span><span style="color: #212121">,</span><span style="color: #24292EFF"> X &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$lib/components/site/icons'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; FileText</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Github</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Mail &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'lucide-svelte'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">routesType</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">socialsType</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">typeof</span><span style="color: #24292EFF"> Github;</span></span>
<span data-line=""><span style="color: #24292EFF">    display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    class</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5">// nav routes</span></span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">routes</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">routesType</span><span style="color: #24292EFF">[] </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Blog'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/blog'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Projects'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/projects'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'About'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/about'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5">// social icons with links</span></span>
<span data-line=""><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">socials</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">socialsType</span><span style="color: #24292EFF">[] </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://github.com/prabhukiran8790'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> Github</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'GitHub'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://linkedin.com/in/PrabhuKiranKonda'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> LinkedIn</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'LinkedIn'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://x.com/prabhukirantwt'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">X</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Twitter'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        class</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'h-4 w-4'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'mailto:prabhukiran426@gmail.com'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> Mail</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Mail'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        class</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'h-4 w-4'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/Prabhu Kiran Konda Resume.pdf'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> FileText</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Resume'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">getSocials</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> (&#123; exclude &#125;</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123; exclude</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF"> &#125; </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;&#125;)</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">socialsType</span><span style="color: #24292EFF">[] </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> (exclude) &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">socials</span><span style="color: #6F42C1">.filter</span><span style="color: #24292EFF">((social) </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> </span><span style="color: #1976D2">social</span><span style="color: #24292EFF">.display </span><span style="color: #D32F2F">!==</span><span style="color: #24292EFF"> exclude);</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> socials;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">githubConfig</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    username</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'PrabhuKiran8790'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    repo</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'sveltekit-portfolio'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    branch</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'main'</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `To ensure that your local images, located in the <code data-svelte-h="svelte-1x1zqph">posts/[slug]</code> folder, can be converted to GitHub URLs, it&#39;s essential to include your <code data-svelte-h="svelte-1kwnkx5">githubConfig</code> in the <code data-svelte-h="svelte-yapukx">config.ts</code> file. This is particularly useful when you want to include images in your blog posts and prefer to store them in the same folder as your post for better organization.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `However, there&#39;s a caveat – assets in other than public folder (static), won&#39;t be processed by Vite. As a result, these images won&#39;t have a definite URL. To obtain the URL, you&#39;ll need to incorporate your <code data-svelte-h="svelte-1kwnkx5">githubConfig</code>, which transforms your local images into GitHub raw URL format. This ensures that when you deploy your application, the images will correctly point to your GitHub repository.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Alternatively, you can place your images directly in the static folder and access them using <code data-svelte-h="svelte-3m7v69">/</code> which points to static folder. example: <code data-svelte-h="svelte-bosllr">/image.png</code>`;
        }
      })} ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "creating-a-new-blog",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `Creating a new blog`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `to create a new blog, create a folder with the slug you want and create a <code data-svelte-h="svelte-1aow4w">page.md</code> file. the slug will acts as the blog url which will be <code data-svelte-h="svelte-12r8fh3">/blog/[slug]</code>`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">├── README.md</span></span>
<span data-line=""><span style="color: #C8D3F5">├── about</span></span>
<span data-line=""><span style="color: #C8D3F5">├── node_modules</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">├── posts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│ ├── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">authjs-sveltekit-prisma</span><span style="color: #C8D3F5"> &#x3C;!-- slug --></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│ │ └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="yb">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│ ├── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">dimensionality-reduction-using-auto-encoders</span><span style="color: #C8D3F5"> &#x3C;!-- slug --></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│ │ └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="yb">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│ └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">getting-started</span><span style="color: #C8D3F5"> &#x3C;!-- slug --></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│ └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="yb">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">├── src</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">├── static</span></span>
<span data-line=""><span style="color: #C8D3F5">├── package.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── components.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── pnpm-lock.yaml</span></span>
<span data-line=""><span style="color: #C8D3F5">├── postcss.config.cjs</span></span>
<span data-line=""><span style="color: #C8D3F5">├── svelte.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── mdsvex.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── tailwind.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── tsconfig.json</span></span>
<span data-line=""><span style="color: #C8D3F5">└── vite.config.ts</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">├── README.md</span></span>
<span data-line=""><span style="color: #24292EFF">├── about</span></span>
<span data-line=""><span style="color: #24292EFF">├── node_modules</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">├── posts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│ ├── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="rb">authjs-sveltekit-prisma</span><span style="color: #24292EFF"> &#x3C;!-- slug --></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│ │ └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="yb">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│ ├── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="rb">dimensionality-reduction-using-auto-encoders</span><span style="color: #24292EFF"> &#x3C;!-- slug --></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│ │ └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="yb">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│ └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="rb">getting-started</span><span style="color: #24292EFF"> &#x3C;!-- slug --></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│ └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="yb">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">├── src</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">├── static</span></span>
<span data-line=""><span style="color: #24292EFF">├── package.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── components.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── pnpm-lock.yaml</span></span>
<span data-line=""><span style="color: #24292EFF">├── postcss.config.cjs</span></span>
<span data-line=""><span style="color: #24292EFF">├── svelte.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── mdsvex.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── tailwind.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── tsconfig.json</span></span>
<span data-line=""><span style="color: #24292EFF">└── vite.config.ts</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "adding-frontmatter",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `Adding frontmatter`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Frontmatter allows you to specify metadata and options. Included in frontmatter are things like the document or project title, what thumbnail to use for site or content previews, authors that contributed to the work etc,`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for this template the frontmatter is`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">---</span></span>
<span data-line=""><span style="color: #FF757F">title</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #FF757F">description</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #FF757F">date</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">2023-11-26</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #FF757F">tags</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #B4C2F0">  - </span><span style="color: #C3E88D">SvelteKit</span></span>
<span data-line=""><span style="color: #FF757F">image</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">url or a pathname</span></span>
<span data-line=""><span style="color: #FF757F">draft</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">false</span></span>
<span data-line=""><span style="color: #C8D3F5">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">---</span></span>
<span data-line=""><span style="color: #D32F2F">title</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #D32F2F">description</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #D32F2F">date</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'2023-11-26'</span></span>
<span data-line=""><span style="color: #D32F2F">tags</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #24292EFF">  - </span><span style="color: #22863A">SvelteKit</span></span>
<span data-line=""><span style="color: #D32F2F">image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">url or a pathname</span></span>
<span data-line=""><span style="color: #D32F2F">draft</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">false</span></span>
<span data-line=""><span style="color: #24292EFF">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `<code data-svelte-h="svelte-4ktypd">tags</code> is an array so if you want to declare multiple tags just add a new tag below it and of course you can change these but you need to change the Post type as well accordingly.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you can find the <code data-svelte-h="svelte-1jcb0a2">Post</code> type in <code data-svelte-h="svelte-16bn5o3">src/lib/types.ts</code>`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">Post</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">title</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// slug is not related to the frontmatter but is included to get the slug via an api</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">slug</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">description</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">date</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">tags</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">[];</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">image</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">draft</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">boolean</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-1cg5pn">src/lib/types.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "src/lib/types.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Post</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// slug is not related to the frontmatter but is included to get the slug via an api</span></span>
<span data-line=""><span style="color: #24292EFF">    slug</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    description</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    date</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    tags</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">[];</span></span>
<span data-line=""><span style="color: #24292EFF">    image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    draft</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">boolean</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(H3, "Components.h3").$$render($$result, { id: "code-blocks", headerTag: "h3" }, {}, {
        default: () => {
          return `Code Blocks`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Syntax highlighting is made possible using shiki and ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://rehype-pretty-code.netlify.app/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `rehype-pretty-code`;
              }
            }
          )} plugin.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `a small example:`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;ts title="hello.ts" showLineNumbers &#123;1&#125; /Hello/#yb</span></span>
<span data-line=""><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Hello</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;ts title="hello.ts" showLineNumbers &#123;1&#125; /Hello/#yb</span></span>
<span data-line=""><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'Hello'</span><span style="color: #24292EFF">);</span></span>
<span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `will render into`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="ts" data-theme="dark" style="display: grid;" data-line-numbers-max-digits="1"><span data-line="" data-highlighted-line=""><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D" data-highlighted-chars="" data-chars-id="yb">Hello</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-1tecfsv">hello.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "hello.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="ts" data-theme="light" style="display: grid;" data-line-numbers-max-digits="1"><span data-line="" data-highlighted-line=""><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'</span><span style="color: #22863A" data-highlighted-chars="" data-chars-id="yb">Hello</span><span style="color: #22863A">'</span><span style="color: #24292EFF">);</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `and for code diffing,`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;js title="code-diff.js"</span></span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #B4C2F0"> </span><span style="color: #C099FF">function</span><span style="color: #B4C2F0"> </span><span style="color: #82AAFF">foo</span><span style="color: #B4C2F0">() &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">hewwo</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// [!code --] // this should be hello</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">hello</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// [!code ++]</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;js title="code-diff.js"</span></span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">function</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">foo</span><span style="color: #24292EFF">() &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'hewwo'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// [!code --] // this should be hello</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'hello'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// [!code ++]</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span>
<span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this will become`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">function</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">foo</span><span style="color: #B4C2F0">()</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">hewwo</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// [!code --] // this should be hello</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">hello</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// [!code ++]</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="js" data-theme="light" data-svelte-h="svelte-vomlsa">code-diff.js</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light",
          __title__: "code-diff.js"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">function</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">foo</span><span style="color: #24292EFF">() &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'hewwo'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// [!code --] // this should be hello</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'hello'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// [!code ++]</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(Blockquote, "Components.blockquote").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
            default: () => {
              return `it is important to add <code data-svelte-h="svelte-1z0wwg8">// [!code --]</code> and <code data-svelte-h="svelte-sj74so">// [!code ++]</code> to see the changes, that inlcudes the whitespace after the comment`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you can change these styles in <code data-svelte-h="svelte-9wvbt6">markdown.postcss</code> file and <code data-svelte-h="svelte-1fgs43u">pre.svelte</code> file and for more information visit ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://rehype-pretty-code.netlify.app/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `rehype-pretty-code`;
              }
            }
          )}`;
        }
      })} ${validate_component(H3, "Components.h3").$$render($$result, { id: "math-blocks", headerTag: "h3" }, {}, {
        default: () => {
          return `Math Blocks`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `to write inline math equations,`;
                }
              })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "Moonlight II",
                  tabindex: "0",
                  "data-language": "svelte",
                  "data-theme": "dark"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="svelte" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">import</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #C8D3F5">Math</span><span style="color: #B4C2F0"> &#125; </span><span style="color: #86E1FC">from</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$lib/components/markdown</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#x3C;/</span><span style="color: #FF757F">script</span><span style="color: #86E1FC">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">&#x3C;</span><span style="color: #FFC777">Math</span><span style="color: #FF757F"> </span><span style="color: #C099FF">eq</span><span style="color: #86E1FC">=&#123;</span><span style="color: #86E1FC">&#96;</span><span style="color: #C3E88D">$</span><span style="color: #86E1FC">\\&#92;n</span><span style="color: #C3E88D">abla </span><span style="color: #86E1FC">\\\\</span><span style="color: #C3E88D">cdot </span><span style="color: #86E1FC">\\\\</span><span style="color: #C3E88D">mathbf&#123;E&#125; = </span><span style="color: #86E1FC">\\\\</span><span style="color: #C3E88D">frac&#123;</span><span style="color: #86E1FC">\\&#92;r</span><span style="color: #C3E88D">ho&#125;&#123;</span><span style="color: #86E1FC">\\\\</span><span style="color: #C3E88D">varepsilon_0&#125;$</span><span style="color: #86E1FC">&#96;</span><span style="color: #86E1FC">&#125;</span><span style="color: #FF757F"> </span><span style="color: #86E1FC">/></span><span style="color: #C8D3F5"> this is an example</span></span>
<span data-line=""><span style="color: #C8D3F5">of inline equation</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "min-light",
                  tabindex: "0",
                  "data-language": "svelte",
                  "data-theme": "light"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="svelte" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; Math &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$lib/components/markdown'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#x3C;/</span><span style="color: #22863A">script</span><span style="color: #24292EFF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">&#x3C;</span><span style="color: #1976D2">Math</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">eq</span><span style="color: #D32F2F">=</span><span style="color: #24292EFF">&#123;</span><span style="color: #22863A">&#96;$\\&#92;nabla \\\\cdot \\\\mathbf&#123;E&#125; = \\\\frac&#123;\\&#92;rho&#125;&#123;\\\\varepsilon_0&#125;$&#96;</span><span style="color: #24292EFF">&#125; /> this is an example</span></span>
<span data-line=""><span style="color: #24292EFF">of inline equation</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}</div> ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                        default: () => {
                          return `add a script tag inside your markdown and import the <code data-svelte-h="svelte-aggv3r">Math.svelte</code> component and write your LaTeX equation.`;
                        }
                      })}`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                        default: () => {
                          return `you can add path aliases to shorten the path if you use it more often.`;
                        }
                      })}`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                        default: () => {
                          return `the above equation will become`;
                        }
                      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                        default: () => {
                          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                            default: () => {
                              return `${validate_component(Math$1, "Math").$$render(
                                $$result,
                                {
                                  eq: `$\\nabla \\cdot \\mathbf{E} = \\frac{\\rho}{\\varepsilon_0}$`
                                },
                                {},
                                {}
                              )} this is an example of inline equation`;
                            }
                          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                            default: () => {
                              return `${validate_component(Math$1, "Math").$$render(
                                $$result,
                                {
                                  eq: `$$\\nabla \\cdot \\mathbf{E} = \\frac{\\rho}{\\varepsilon_0}$$`
                                },
                                {},
                                {}
                              )} this is an example of inline equation`;
                            }
                          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                            default: () => {
                              return `to make the inline equations bigger, wrap the equation in <code data-svelte-h="svelte-ztmugk">$$</code> instead of single <code data-svelte-h="svelte-44q85m">$</code>`;
                            }
                          })}`;
                        }
                      })}`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                        default: () => {
                          return `the reason why we&#39;re adding double backslashes (<code data-svelte-h="svelte-hxrqic">\\\\</code>) is to avoid unicode escape sequence.`;
                        }
                      })} ${validate_component(Blockquote, "Components.blockquote").$$render($$result, {}, {}, {
                        default: () => {
                          return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                            default: () => {
                              return `<strong data-svelte-h="svelte-1nncehc">Note</strong>: one thing to make sure that, you cannot add inline equations in a list. Well, you might be thinking that above inline equation is indeed a list item, then what&#39;s the problem? The problem comes when we add inline equation in a list item that already has content.`;
                            }
                          })}`;
                        }
                      })}`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                        default: () => {
                          return `below inline equation will not work`;
                        }
                      })}`;
                    }
                  })}`;
                }
              })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "Moonlight II",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "dark"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> this will not work &#x3C;Math eq=&#123;</span><span style="color: #86E1FC">&#96;$\\&#92;nabla \\\\cdot \\\\mathbf&#123;E&#125; = \\\\frac&#123;\\&#92;rho&#125;&#123;\\\\varepsilon_0&#125;$&#96;</span><span style="color: #C8D3F5">&#125;/> this is an example of inline equation</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "min-light",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "light"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">- this will not work &#x3C;Math eq=&#123;</span><span style="color: #2B5581">&#96;$\\&#92;nabla \\\\cdot \\\\mathbf&#123;E&#125; = \\\\frac&#123;\\&#92;rho&#125;&#123;\\\\varepsilon_0&#125;$&#96;</span><span style="color: #24292EFF">&#125;/> this is an example of inline equation</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}</div> ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `but this will work`;
                    }
                  })}`;
                }
              })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "Moonlight II",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "dark"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> &#x3C;Math eq=&#123;</span><span style="color: #86E1FC">&#96;$\\&#92;nabla \\\\cdot \\\\mathbf&#123;E&#125; = \\\\frac&#123;\\&#92;rho&#125;&#123;\\\\varepsilon_0&#125;$&#96;</span><span style="color: #C8D3F5">&#125;/>  this is an example of inline equation</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "min-light",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "light"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">- &#x3C;Math eq=&#123;</span><span style="color: #2B5581">&#96;$\\&#92;nabla \\\\cdot \\\\mathbf&#123;E&#125; = \\\\frac&#123;\\&#92;rho&#125;&#123;\\\\varepsilon_0&#125;$&#96;</span><span style="color: #24292EFF">&#125;/>  this is an example of inline equation</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}</div> ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                        default: () => {
                          return `I don&#39;t know the reason but if there&#39;s any fix i&#39;ll update or you can fix it and make a pull request.`;
                        }
                      })}`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                        default: () => {
                          return `but when it comes to block equations, there is no need to do this. it&#39;s pretty easy. all you need to do is`;
                        }
                      })}`;
                    }
                  })}`;
                }
              })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "Moonlight II",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "dark"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="rb">math</span></span>
<span data-line=""><span style="color: #86E1FC">&#92;nabla &#92;times mathbf&#123;B&#125; = \\mu_0 \\left(\\mathbf&#123;J&#125; + \\varepsilon_0 \\frac&#123;\\partial \\mathbf&#123;E&#125;&#125;&#123;\\partial t&#125;&#92;right)</span></span>
<span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}<div data-rehype-pretty-code-title data-language="md" data-theme="light" data-svelte-h="svelte-15q5i4d">math.md</div>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "min-light",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "light",
                  __title__: "math.md"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span><span style="color: #2B5581" data-highlighted-chars="" data-chars-id="rb">math</span></span>
<span data-line=""><span style="color: #2B5581">&#92;nabla &#92;times mathbf&#123;B&#125; = \\mu_0 \\left(\\mathbf&#123;J&#125; + \\varepsilon_0 \\frac&#123;\\partial \\mathbf&#123;E&#125;&#125;&#123;\\partial t&#125;&#92;right)</span></span>
<span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}</div> ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `define a codeblock with <code data-svelte-h="svelte-hr0t6a">math</code> as the language and the above equation becomes`;
                    }
                  })}`;
                }
              })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">B</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><mi mathvariant="bold">J</mi><mo>+</mo><msub><mi>ε</mi><mn>0</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">E</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
abla 	imes mathbf{B} = mu_0 left(mathbf{J} + \varepsilon_0 \frac{partial mathbf{E}}{partial t}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathbf">J</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathbf">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `To render inline equations without using any component, you can use this below`;
                }
              })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "Moonlight II",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "dark"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">$$&#92;nabla </span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">times </span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">mathbf&#123;B&#125; = </span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">mu_0 </span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">left(</span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">mathbf&#123;J&#125; + </span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">varepsilon_0 </span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">frac&#123;</span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">partial </span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">mathbf&#123;E&#125;&#125;&#123;</span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">partial t&#125;</span><span style="color: #86E1FC">\\</span><span style="color: #C8D3F5">right)$$</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}<div data-rehype-pretty-code-title data-language="md" data-theme="light" data-svelte-h="svelte-1926n61">inline-math.md</div>${validate_component(Pre, "Components.pre").$$render(
                $$result,
                {
                  class: "min-light",
                  tabindex: "0",
                  "data-language": "md",
                  "data-theme": "light",
                  __title__: "inline-math.md"
                },
                {},
                {
                  default: () => {
                    return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">$$&#92;nabla &#92;times \\mathbf&#123;B&#125; = \\mu_0 \\left(\\mathbf&#123;J&#125; + \\varepsilon_0 \\frac&#123;\\partial \\mathbf&#123;E&#125;&#125;&#123;\\partial t&#125;&#92;right)$$</span></span></code>`}<!-- HTML_TAG_END -->`;
                  }
                }
              )}</div> ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `this is as of Dec 5, 2023. I added a new plugin to render inline maths.`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `this will fix the above mentioned issue of not rendering inline math equation in list item with content.`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `example: <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">B</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><mi mathvariant="bold">J</mi><mo>+</mo><msub><mi>ε</mi><mn>0</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">E</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">&#92;nabla &#92;times mathbf&#123;B&#125; = mu_0 left(mathbf&#123;J&#125; + \varepsilon_0 \frac&#123;partial mathbf&#123;E&#125;&#125;&#123;partial t&#125;&#92;right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2301em;vertical-align:-0.35em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathbf">J</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathbf mtight">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> this will work`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `you don&#39;t even need to put double backslashes <code data-svelte-h="svelte-hxrqic">\\\\</code>, just write like you write them in math blocks, but wrap between double dollar signs.`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `this is the recommended way from now on.`;
                    }
                  })}`;
                }
              })}`;
            }
          })}`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "blog-comments", headerTag: "h2" }, {}, {
        default: () => {
          return `Blog Comments`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Comments are made possible using ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://giscus.app/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `Giscus`;
              }
            }
          )}, a GitHub discussion based commenting system. Start by changing some environment variables to setup Giscus. In you <code data-svelte-h="svelte-gbe68h">.env</code> file change the following variables. These environment variables are imported in <code data-svelte-h="svelte-ndvtqp">routes/blog/[slug]/+page.svelte</code>`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #FF98A4">PUBLIC_GITHUB_REPO</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> prabhukirankonda</span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5">portfolio</span></span>
<span data-line=""><span style="color: #FF98A4">PUBLIC_GITHUB_USERNAME</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> PrabhuKiran8790</span></span>
<span data-line=""><span style="color: #FF98A4">PUBLIC_GITHUB_REPO_ID</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span></span>
<span data-line=""><span style="color: #FF98A4">PUBLIC_CATEGORY</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> General</span></span>
<span data-line=""><span style="color: #FF98A4">PUBLIC_CATEGORY_ID</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #1976D2">PUBLIC_GITHUB_REPO</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> prabhukirankonda</span><span style="color: #D32F2F">-</span><span style="color: #24292EFF">portfolio</span></span>
<span data-line=""><span style="color: #1976D2">PUBLIC_GITHUB_USERNAME</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> PrabhuKiran8790</span></span>
<span data-line=""><span style="color: #1976D2">PUBLIC_GITHUB_REPO_ID</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span></span>
<span data-line=""><span style="color: #1976D2">PUBLIC_CATEGORY</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> General</span></span>
<span data-line=""><span style="color: #1976D2">PUBLIC_CATEGORY_ID</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `to get Repo ID, Category ID goto ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://giscus.app/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `Giscus`;
              }
            }
          )} and follow the instructions.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "projects", headerTag: "h2" }, {}, {
        default: () => {
          return `Projects`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `To add a new project, you can start by chaging the <code data-svelte-h="svelte-vkj9nm">src/lib/projects.ts</code> file.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">type</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">TechStack</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">./types</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">ProjectType</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">title</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">image</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">description</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">techstack</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">TechStack</span><span style="color: #86E1FC">[];</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">projects</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">ProjectType</span><span style="color: #86E1FC">[]</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">title</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Personal Portfolio with Markdown Blog</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">description</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #A9B8E8">            </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">This website, prabhukirankonda.vercel.app is my personal website with a markdown blog written in SvelteKit and deployed using Vercel. Styled using Taiwind CSS and Shadcn-UI and completely written in TypeScript.</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://prabhukirankonda.vercel.app</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">image</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/sveltekit-portfolio.png</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">techstack</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">SvelteKit</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Tailwind</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">TypeScript</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">]</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">];</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-ukyo5q">src/lib/projects.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "src/lib/projects.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> &#123; TechStack &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'./types'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">ProjectType</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    description</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    techstack</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">TechStack</span><span style="color: #24292EFF">[];</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">projects</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">ProjectType</span><span style="color: #24292EFF">[] </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Personal Portfolio with Markdown Blog'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        description</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #22863A">'This website, prabhukirankonda.vercel.app is my personal website with a markdown blog written in SvelteKit and deployed using Vercel. Styled using Taiwind CSS and Shadcn-UI and completely written in TypeScript.'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://prabhukirankonda.vercel.app'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/sveltekit-portfolio.png'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        techstack</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [</span><span style="color: #22863A">'SvelteKit'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Tailwind'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'TypeScript'</span><span style="color: #24292EFF">]</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">];</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `make sure the techstack is of type <code data-svelte-h="svelte-17r666e">TechStack[]</code> so that it&#39;s possible to render the respective icons to showcase projects. see ${validate_component(A, "Components.a").$$render($$result, { href: "/projects" }, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-1oak2fb">/projects</code>`;
            }
          })} to get an idea on how icons are rendered and see <code data-svelte-h="svelte-16bn5o3">src/lib/types.ts</code> for more information.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "about", headerTag: "h2" }, {}, {
        default: () => {
          return `About`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `About page is also rendered using markdown but it has its own layout. <code data-svelte-h="svelte-16ucymt">src/lib/components/markdown/about-layout.svelte</code>. To change about edit <code data-svelte-h="svelte-srxtd2">about/about.md</code>. if you see the fronmatter for <code data-svelte-h="svelte-ottnik">about.md</code> there&#39;s a <code data-svelte-h="svelte-r4n69l">layout: about</code> which tells the MDsveX preprocessor to use about layout.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `about layout is defined in <code data-svelte-h="svelte-948ldg">mdsvex.config.js</code>`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" style="counter-set: line 86;display: grid;" data-language="js" data-theme="dark" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #858AA6">/** </span><span style="color: #86E1FC">@</span><span style="color: #C099FF">type</span><span style="color: #858AA6"> </span><span style="color: #86E1FC">&#123;</span><span style="color: #FFC777">import('mdsvex').MdsvexOptions</span><span style="color: #86E1FC">&#125;</span><span style="color: #858AA6"> */</span></span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">mdsvexOptions</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">extensions</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">.md</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">.svx</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">],</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">layout</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">_</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #65BCFF">resolve</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">./src/lib/components/markdown/layout.svelte</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #858AA6">//default or fallback layout</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">about</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #65BCFF">resolve</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">./src/lib/components/markdown/about-layout.svelte</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #A9B8E8"> </span><span style="color: #858AA6">// named layout</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">remarkPlugins</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[],</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">rehypePlugins</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[]</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="js" data-theme="light" data-svelte-h="svelte-43xpu">mdsvex.config.js</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light",
          __title__: "mdsvex.config.js"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" style="counter-set: line 86;display: grid;" data-language="js" data-theme="light" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #C2C3C5">/** </span><span style="color: #D32F2F">@type</span><span style="color: #C2C3C5"> </span><span style="color: #6F42C1">&#123;import('mdsvex').MdsvexOptions&#125;</span><span style="color: #C2C3C5"> */</span></span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">mdsvexOptions</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    extensions</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [</span><span style="color: #22863A">'.md'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'.svx'</span><span style="color: #24292EFF">]</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    layout</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">        _</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">resolve</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'./src/lib/components/markdown/layout.svelte'</span><span style="color: #24292EFF">)</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5">//default or fallback layout</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">        about</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">resolve</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'./src/lib/components/markdown/about-layout.svelte'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// named layout</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    remarkPlugins</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> []</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    rehypePlugins</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> []</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(Hr, "Components.hr").$$render($$result, {}, {}, {})} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `These are the some of the important changes to be made to get started. If you have any issues, feel free to open an issue. In the next update, I&#39;ll include related posts based on tags.`;
        }
      })}`;
    }
  })}`;
});
const __vite_glob_0_2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$4,
  metadata: metadata$7
}, Symbol.toStringTag, { value: "Module" }));
const metadata$6 = {
  "title": "Gradient Descent: A Step-by-Step Guide to Optimization",
  "description": "Explore the fundamental algorithm powering machine learning and deep learning",
  "date": "2024-01-12",
  "image": "/posts/gradient-descent/thumbnail.jpeg",
  "tags": ["Gradient Descent", "Machine Learning"],
  "draft": false
};
const Page$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$6), {}, {
    default: () => {
      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `On the second day of 100 days of AI, we&#39;re diving into one of the fundamental optimization algorithms used in machine learning: Gradient Descent. Gradient Descent is a first-order iterative optimization algorithm used to find the minimum of a function. In the context of machine learning, this function is often a cost function that represents the difference between the predicted and actual values in a model.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "what-is-gradient-descent-?",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `What is Gradient Descent ?`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Imagine you&#39;re blindfolded on a weird, lumpy landscape, trying to find the lowest point without falling over. You can only sense if you&#39;re going downhill or uphill. Gradient Descent is like this quirky adventure, but for finding the lowest point of a wacky mathematical &quot;hill&quot; that represents how wrong our guesses are. Instead of feeling the terrain, we use math to figure out which way is downhill, and then we take tiny, careful steps in that direction until we hit the bottom. It&#39;s like teaching a computer to dance its way to the best answers in a game or recognize cats in pictures — it&#39;s all about finding that sweet spot where things just work!`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Okay! That&#39;s not a technical definition of it. For people who love more technical definitions, Gradient Descent is an iterative optimization algorithm used to minimize a function by moving in the direction of the steepest descent, as defined by the negative of the gradient. The gradient represents the slope of the function at a given point, and moving in the opposite direction of the gradient allows us to descend toward the minimum of the function.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `In machine learning, this function is often a cost function that measures the difference between predicted and actual values. By iteratively adjusting the parameters of a model in the direction that decreases the cost function the most, Gradient Descent effectively optimizes the model&#39;s performance.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `There are different variants of Gradient Descent, such as <strong data-svelte-h="svelte-1jusz12">Batch Gradient Descent</strong>, <strong data-svelte-h="svelte-5vfpwd">Stochastic Gradient Descent</strong>, and <strong data-svelte-h="svelte-12nqswi">Mini-batch Gradient Descent</strong> (we will discuss about each of them in next series of posts), each with its own trade-offs in terms of computational efficiency and convergence speed. Overall, Gradient Descent is a fundamental tool for training machine learning models and is widely used in various optimization problems across different domains.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Enough of definitions. It&#39;s time to work on it.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "requirements-of-gradient-descent",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Requirements of Gradient Descent`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Gradient Descent doesn&#39;t work for all functions. It has it&#39;s own requirements that needs to be satisfied by the function. They are:`;
        }
      })} ${validate_component(Ol, "Components.ol").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<strong data-svelte-h="svelte-1oqeoo4">Differentiability</strong>`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<strong data-svelte-h="svelte-14mlr3q">Convexity (for global minimum)</strong>`;
            }
          })}`;
        }
      })} ${validate_component(H3, "Components.h3").$$render($$result, { id: "differentiability", headerTag: "h3" }, {}, {
        default: () => {
          return `Differentiability`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `What does it mean ? Well, The function to be minimized must be differentiable, meaning its derivative exists at every point where it&#39;s being optimized — not all functions meet these criteria.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Let&#39;s see some example functions that meet this criteria.`;
        }
      })} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/gradient-descent/differentiable_funs_plots.png",
          alt: "Differentiable Functions"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Where as, non-differentiable functions have a step a cusp or a discontinuity:`;
        }
      })} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/gradient-descent/non-diff-funcs.png",
          alt: "Non Differentiable Functions"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `by now, you might have an idea about Differentiability of a function. The next requirement is Convexity.`;
        }
      })} ${validate_component(H3, "Components.h3").$$render($$result, { id: "convexity", headerTag: "h3" }, {}, {
        default: () => {
          return `Convexity`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `If the goal is to find the global minimum, the function should be convex, meaning it has a single minimum that Gradient Descent can converge to.`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `A function <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>`}<!-- HTML_TAG_END --></span> is said to be convex over an interval if, for any two points <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">x1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">x</span><span class="mord">1</span></span></span></span>`}<!-- HTML_TAG_END --></span> and <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">x2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord mathnormal">x</span><span class="mord">2</span></span></span></span>`}<!-- HTML_TAG_END --></span> in that interval, the line segment connecting the points lies above the graph of the function:`;
            }
          })}`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>λ</mi><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>λ</mi><mo stretchy="false">)</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>≤</mo><mi>λ</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>λ</mi><mo stretchy="false">)</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(lambda x_1 + (1-lambda)x_2) leq lambda f(x_1) + (1-lambda)f(x_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">λ</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">λ</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">λ</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `where <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>λ</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 leq lambda leq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>`}<!-- HTML_TAG_END --></span> This property is known as Jensen&#39;s inequality.`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Geometrically, a function is convex if its graph does not curve downward. In other words, if you draw a line between any two points on the graph, the line lies above the graph itself.`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Another way to check mathematically if a univariate function is convex is to calculate the second derivative and check if its value is always bigger than 0.`;
            }
          })}`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><msup><mi>d</mi><mn>2</mn></msup><mrow><mi>d</mi><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{d^2}{dx^2}f(x) geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Let&#39;s move on.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "but-what-is-a-gradient-?",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `But what is a Gradient ?`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `In the context of Gradient Descent, the &quot;gradient&quot; is a vector that contains the partial derivatives of a function with respect to each of its variables. For example, if you have a function <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>`}<!-- HTML_TAG_END --></span>, its gradient <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">&#92;nabla f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>`}<!-- HTML_TAG_END --></span> is a vector <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo separator="true">,</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">left( \frac&#123;partial f&#125;&#123;partial x&#125;, \frac&#123;partial f&#125;&#123;partial y&#125; &#92;right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span>. This vector points in the direction of the steepest increase of the function at a specific point.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `When you&#39;re using Gradient Descent to minimize a function <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(W)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span></span></span></span>`}<!-- HTML_TAG_END --></span>, where <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>`}<!-- HTML_TAG_END --></span> is a vector of parameters (like weights in a machine learning model), you want to find the values of <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>`}<!-- HTML_TAG_END --></span> that minimize <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>`}<!-- HTML_TAG_END --></span>. To do this, you start with an initial guess for <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>`}<!-- HTML_TAG_END --></span> and then update it iteratively using the gradient.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `The update rule is:`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub><mo>−</mo><mi>α</mi><mi mathvariant="normal">∇</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">W_{new} = W_{old} - alpha 
abla f(W_{old})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Here, <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>`}<!-- HTML_TAG_END --></span> is the learning rate, which controls how big the steps are that we take in the direction of the negative gradient. By subtracting,
<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mi mathvariant="normal">∇</mi><mi>f</mi><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">alpha &#92;nabla f(W_&#123;old&#125;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>`}<!-- HTML_TAG_END --></span> from <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>W</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">W^&#123;old&#125;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> we&#39;re effectively moving in the direction opposite to the gradient, which is the direction of the steepest decrease of the function.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `By repeating this process, updating <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>`}<!-- HTML_TAG_END --></span> with each step, you gradually descend towards the minimum of the function. The gradient provides the direction for each step, helping you navigate towards the lowest point (minimum) of the function.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "significance-of-learning-rate",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Significance of Learning Rate`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `The learning rate (<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>`}<!-- HTML_TAG_END --></span>) is a crucial hyperparameter in the Gradient Descent algorithm that determines the size of the steps taken during each iteration towards minimizing the loss function. Here&#39;s the significance of the learning rate:`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-1vyoajl">Controls Step Size</strong>: The learning rate dictates how much the parameters (weights) of the model should be adjusted with each iteration. A larger learning rate means taking larger steps, while a smaller learning rate means taking smaller steps.`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-15o3upk">Impact on Convergence</strong>: The choice of learning rate can significantly impact the convergence of the algorithm. If the learning rate is too large, the algorithm may overshoot the minimum and fail to converge. On the other hand, if the learning rate is too small, the algorithm may take too long to converge or get stuck in a local minimum.`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-oh6muc">Trade-off between</strong> Speed and Accuracy: A higher learning rate can lead to faster convergence, but it may also cause oscillations or overshooting around the minimum. Conversely, a lower learning rate may converge more slowly but with greater stability.`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-1vn1dp7">Sensitive to Scale</strong>: The learning rate is sensitive to the scale of the input features and the magnitude of the gradients. Rescaling the features or using techniques like batch normalization can help in choosing an appropriate learning rate.`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-4joqtk">Hyperparameter Tuning:</strong> Selecting an optimal learning rate often involves hyperparameter tuning. It is common to experiment with different learning rates to find the one that results in the fastest convergence without oscillations or divergence.`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-n2gw1r">Adaptive Learning Rates</strong>: There are variations of Gradient Descent, such as AdaGrad, RMSprop, and Adam, which adapt the learning rate during training based on the history of gradients. These adaptive methods can often converge faster and more reliably than using a fixed learning rate.`;
                }
              })}`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `at this point, you have a solid understanding of Gradient Descent. Let&#39;s get our hands dirty by implementing it from scratch in Python.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "python-implementation",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Python Implementation`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s take a simple quadratic function, <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>5</mn><mi>x</mi><mo>+</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">f(x) = x^2 + 5x + 6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span>`}<!-- HTML_TAG_END --></span> and optimise it.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `function to optimise:`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>5</mn><mi>x</mi><mo>+</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">f(x) = x^2 + 5x + 6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `derivative of the function:`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>f</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">\frac{d}{dx} f(x) = f&#x27;(x) = 2x + 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s code it.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> numpy </span><span style="color: #86E1FC">as</span><span style="color: #C8D3F5"> np</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> matplotlib</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">pyplot </span><span style="color: #86E1FC">as</span><span style="color: #C8D3F5"> plt</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">gradient_descent</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">function_to_optimize</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                     </span><span style="color: #FCA7EA">derivative</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                     </span><span style="color: #FCA7EA">lr</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">float</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">0.1</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                     </span><span style="color: #FCA7EA">initial_x</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">float</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">-</span><span style="color: #FF966C">6.5</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5">  </span><span style="color: #858AA6"># random</span></span>
<span data-line=""><span style="color: #C8D3F5">                     </span><span style="color: #FCA7EA">iterations</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">int</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">50</span><span style="color: #B4C2F0">):</span></span>
<span data-line=""><span style="color: #C8D3F5">    x_values </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span><span style="color: #C8D3F5">initial_x</span><span style="color: #86E1FC">]</span></span>
<span data-line=""><span style="color: #C8D3F5">    costs </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span><span style="color: #C8D3F5">function_to_optimize</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">initial_x</span><span style="color: #86E1FC">)]</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">for</span><span style="color: #C8D3F5"> i </span><span style="color: #86E1FC">in</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">range</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">iterations</span><span style="color: #86E1FC">):</span></span>
<span data-line=""><span style="color: #C8D3F5">        current_x </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> x_values</span><span style="color: #86E1FC">[-</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">]</span></span>
<span data-line=""><span style="color: #C8D3F5">        gradient </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> derivative</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">current_x</span><span style="color: #86E1FC">)</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">        new_x </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> current_x </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> lr </span><span style="color: #86E1FC">*</span><span style="color: #C8D3F5"> gradient</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span></span>
<span data-line=""><span style="color: #C8D3F5">        x_values</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">append</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">new_x</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">        costs</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">append</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">function_to_optimize</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">new_x</span><span style="color: #86E1FC">))</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">return</span><span style="color: #C8D3F5"> x_values</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> costs</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> lr</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> iterations</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> numpy </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> np</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> matplotlib</span><span style="color: #212121">.</span><span style="color: #24292EFF">pyplot </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> plt</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">gradient_descent</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">function_to_optimize</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                     </span><span style="color: #FF9800">derivative</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                     </span><span style="color: #FF9800">lr</span><span style="color: #212121">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">float</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">0.1</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                     </span><span style="color: #FF9800">initial_x</span><span style="color: #212121">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">float</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">-</span><span style="color: #1976D2">6.5</span><span style="color: #212121">,</span><span style="color: #24292EFF">  </span><span style="color: #C2C3C5"># random</span></span>
<span data-line=""><span style="color: #24292EFF">                     </span><span style="color: #FF9800">iterations</span><span style="color: #212121">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">int</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">50</span><span style="color: #24292EFF">):</span></span>
<span data-line=""><span style="color: #24292EFF">    x_values </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [initial_x]</span></span>
<span data-line=""><span style="color: #24292EFF">    costs </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [</span><span style="color: #6F42C1">function_to_optimize</span><span style="color: #212121">(initial_x)</span><span style="color: #24292EFF">]</span></span>
<span data-line=""><span style="color: #24292EFF">    </span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">for</span><span style="color: #24292EFF"> i </span><span style="color: #D32F2F">in</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">range</span><span style="color: #212121">(iterations):</span></span>
<span data-line=""><span style="color: #24292EFF">        current_x </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> x_values</span><span style="color: #212121">[</span><span style="color: #D32F2F">-</span><span style="color: #1976D2">1</span><span style="color: #212121">]</span></span>
<span data-line=""><span style="color: #24292EFF">        gradient </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">derivative</span><span style="color: #212121">(current_x)</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">        new_x </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> current_x </span><span style="color: #D32F2F">-</span><span style="color: #24292EFF"> lr </span><span style="color: #D32F2F">*</span><span style="color: #24292EFF"> gradient</span></span>
<span data-line=""><span style="color: #24292EFF">        </span></span>
<span data-line=""><span style="color: #24292EFF">        x_values</span><span style="color: #212121">.</span><span style="color: #6F42C1">append</span><span style="color: #212121">(new_x)</span></span>
<span data-line=""><span style="color: #24292EFF">        costs</span><span style="color: #212121">.</span><span style="color: #6F42C1">append</span><span style="color: #212121">(</span><span style="color: #6F42C1">function_to_optimize</span><span style="color: #212121">(new_x))</span></span>
<span data-line=""><span style="color: #24292EFF">        </span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> x_values</span><span style="color: #212121">,</span><span style="color: #24292EFF"> costs</span><span style="color: #212121">,</span><span style="color: #24292EFF"> lr</span><span style="color: #212121">,</span><span style="color: #24292EFF"> iterations</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s create anotehr function that helps us to animate the Gradient Descent Optimisation`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> matplotlib</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">animation </span><span style="color: #86E1FC">as</span><span style="color: #C8D3F5"> animation</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">create_animation</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">x_values</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">costs</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">lr</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">iterations</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">function_to_optimize</span><span style="color: #B4C2F0">):</span></span>
<span data-line=""><span style="color: #C8D3F5">    fig</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> ax </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">subplots</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">figsize</span><span style="color: #86E1FC">=(</span><span style="color: #FF966C">10</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">6</span><span style="color: #86E1FC">))</span></span>
<span data-line=""><span style="color: #C8D3F5">    plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">grid</span><span style="color: #86E1FC">()</span></span>
<span data-line=""><span style="color: #C8D3F5">    ax</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">set_xlim</span><span style="color: #86E1FC">(-</span><span style="color: #FF966C">7</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    ax</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">set_ylim</span><span style="color: #86E1FC">(-</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">20</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    ax</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">set_xlabel</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">x</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    ax</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">set_ylabel</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">y</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    ax</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">set_title</span><span style="color: #86E1FC">(</span><span style="color: #C099FF">f</span><span style="color: #C3E88D">'Gradient Descent Optimization, lr = </span><span style="color: #FF98A4">&#123;</span><span style="color: #C8D3F5">lr</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #858AA6"># init empty plots for function and optimization process</span></span>
<span data-line=""><span style="color: #C8D3F5">    x </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">linspace</span><span style="color: #86E1FC">(-</span><span style="color: #FF966C">7</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">100</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    y </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> function_to_optimize</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">x</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    function_line</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> ax</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">plot</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">x</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">r-</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">label</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Function to Optimize</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    optimization_line</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> ax</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">plot</span><span style="color: #86E1FC">([],</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[],</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">bo-</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">label</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Gradient Descent Optimization</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #858AA6"># Update function for animation</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">update</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">frame</span><span style="color: #B4C2F0">):</span></span>
<span data-line=""><span style="color: #C8D3F5">        optimization_line</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">set_data</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">x_values</span><span style="color: #86E1FC">[:</span><span style="color: #C8D3F5">frame</span><span style="color: #86E1FC">+</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">],</span><span style="color: #C8D3F5"> costs</span><span style="color: #86E1FC">[:</span><span style="color: #C8D3F5">frame</span><span style="color: #86E1FC">+</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">])</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">return</span><span style="color: #C8D3F5"> optimization_line</span><span style="color: #86E1FC">,</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">    ani </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> animation</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">FuncAnimation</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">fig</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> update</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">frames</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">iterations</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">blit</span><span style="color: #86E1FC">=</span><span style="color: #FF98A4">True</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">legend</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">handles</span><span style="color: #86E1FC">=[</span><span style="color: #C8D3F5">function_line</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> optimization_line</span><span style="color: #86E1FC">],</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">loc</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">upper right</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    ani</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">save</span><span style="color: #86E1FC">(</span><span style="color: #C099FF">f</span><span style="color: #C3E88D">'gradient_descent_animation_</span><span style="color: #FF98A4">&#123;</span><span style="color: #C8D3F5">lr</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">.gif'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">writer</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">pillow</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">fps</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">5</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">    plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">show</span><span style="color: #86E1FC">()</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> matplotlib</span><span style="color: #212121">.</span><span style="color: #24292EFF">animation </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> animation</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">create_animation</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">x_values</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">costs</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">lr</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">iterations</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">function_to_optimize</span><span style="color: #24292EFF">):</span></span>
<span data-line=""><span style="color: #24292EFF">    fig</span><span style="color: #212121">,</span><span style="color: #24292EFF"> ax </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">subplots</span><span style="color: #212121">(figsize</span><span style="color: #D32F2F">=</span><span style="color: #212121">(</span><span style="color: #1976D2">10</span><span style="color: #212121">, </span><span style="color: #1976D2">6</span><span style="color: #212121">))</span></span>
<span data-line=""><span style="color: #24292EFF">    plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">grid</span><span style="color: #212121">()</span></span>
<span data-line=""><span style="color: #24292EFF">    ax</span><span style="color: #212121">.</span><span style="color: #6F42C1">set_xlim</span><span style="color: #212121">(</span><span style="color: #D32F2F">-</span><span style="color: #1976D2">7</span><span style="color: #212121">, </span><span style="color: #1976D2">2</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    ax</span><span style="color: #212121">.</span><span style="color: #6F42C1">set_ylim</span><span style="color: #212121">(</span><span style="color: #D32F2F">-</span><span style="color: #1976D2">1</span><span style="color: #212121">, </span><span style="color: #1976D2">20</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    ax</span><span style="color: #212121">.</span><span style="color: #6F42C1">set_xlabel</span><span style="color: #212121">(</span><span style="color: #22863A">'x'</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    ax</span><span style="color: #212121">.</span><span style="color: #6F42C1">set_ylabel</span><span style="color: #212121">(</span><span style="color: #22863A">'y'</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    ax</span><span style="color: #212121">.</span><span style="color: #6F42C1">set_title</span><span style="color: #212121">(</span><span style="color: #D32F2F">f</span><span style="color: #22863A">'Gradient Descent Optimization, lr = </span><span style="color: #1976D2">&#123;</span><span style="color: #212121">lr</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">'</span><span style="color: #212121">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5"># init empty plots for function and optimization process</span></span>
<span data-line=""><span style="color: #24292EFF">    x </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> np</span><span style="color: #212121">.</span><span style="color: #6F42C1">linspace</span><span style="color: #212121">(</span><span style="color: #D32F2F">-</span><span style="color: #1976D2">7</span><span style="color: #212121">, </span><span style="color: #1976D2">2</span><span style="color: #212121">, </span><span style="color: #1976D2">100</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    y </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">function_to_optimize</span><span style="color: #212121">(x)</span></span>
<span data-line=""><span style="color: #24292EFF">    function_line</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> ax</span><span style="color: #212121">.</span><span style="color: #6F42C1">plot</span><span style="color: #212121">(x, y, </span><span style="color: #22863A">'r-'</span><span style="color: #212121">, label</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'Function to Optimize'</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    optimization_line</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> ax</span><span style="color: #212121">.</span><span style="color: #6F42C1">plot</span><span style="color: #212121">([], [], </span><span style="color: #22863A">'bo-'</span><span style="color: #212121">, label</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'Gradient Descent Optimization'</span><span style="color: #212121">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5"># Update function for animation</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">update</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">frame</span><span style="color: #24292EFF">):</span></span>
<span data-line=""><span style="color: #24292EFF">        optimization_line</span><span style="color: #212121">.</span><span style="color: #6F42C1">set_data</span><span style="color: #212121">(x_values[:frame</span><span style="color: #D32F2F">+</span><span style="color: #1976D2">1</span><span style="color: #212121">], costs[:frame</span><span style="color: #D32F2F">+</span><span style="color: #1976D2">1</span><span style="color: #212121">])</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> optimization_line</span><span style="color: #212121">,</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    ani </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> animation</span><span style="color: #212121">.</span><span style="color: #6F42C1">FuncAnimation</span><span style="color: #212121">(fig, update, frames</span><span style="color: #D32F2F">=</span><span style="color: #212121">iterations, blit</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">True</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">legend</span><span style="color: #212121">(handles</span><span style="color: #D32F2F">=</span><span style="color: #212121">[function_line, optimization_line], loc</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'upper right'</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    ani</span><span style="color: #212121">.</span><span style="color: #6F42C1">save</span><span style="color: #212121">(</span><span style="color: #D32F2F">f</span><span style="color: #22863A">'gradient_descent_animation_</span><span style="color: #1976D2">&#123;</span><span style="color: #212121">lr</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">.gif'</span><span style="color: #212121">, writer</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'pillow'</span><span style="color: #212121">, fps</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">5</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">    plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">show</span><span style="color: #212121">()</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s play with these functions`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "plots-at-different-learning-rates",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Plots at different learning rates`;
          }
        }
      )} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">function_to_optimize</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">x</span><span style="color: #B4C2F0">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">return</span><span style="color: #C8D3F5"> x</span><span style="color: #86E1FC">**</span><span style="color: #FF966C">2</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">+</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">5</span><span style="color: #86E1FC">*</span><span style="color: #C8D3F5">x </span><span style="color: #86E1FC">+</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">6</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">derivative</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">x</span><span style="color: #B4C2F0">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">return</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">*</span><span style="color: #C8D3F5">x </span><span style="color: #86E1FC">+</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">5</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">x_values</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> costs</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> lr</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> iterations </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> gradient_descent</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">function_to_optimize</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> derivative</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">create_animation</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">x_values</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> costs</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> lr</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> iterations</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> function_to_optimize</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">function_to_optimize</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">x</span><span style="color: #24292EFF">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> x</span><span style="color: #D32F2F">**</span><span style="color: #1976D2">2</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">5</span><span style="color: #D32F2F">*</span><span style="color: #24292EFF">x </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">6</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">derivative</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">x</span><span style="color: #24292EFF">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">2</span><span style="color: #D32F2F">*</span><span style="color: #24292EFF">x </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">5</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">x_values</span><span style="color: #212121">,</span><span style="color: #24292EFF"> costs</span><span style="color: #212121">,</span><span style="color: #24292EFF"> lr</span><span style="color: #212121">,</span><span style="color: #24292EFF"> iterations </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">gradient_descent</span><span style="color: #212121">(function_to_optimize, derivative)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #6F42C1">create_animation</span><span style="color: #212121">(x_values, costs, lr, iterations, function_to_optimize)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "learning-rate-=-0.1",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `learning rate = 0.1`;
          }
        }
      )} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/gradient-descent/gradient_descent_animation_0.1.gif",
          alt: "Gradient Descent @ lr = 0.1"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `just play with the learning rate parameter in the <code data-svelte-h="svelte-1jmmnm9">gradient_descent</code> function and see how learning rate affects the optimisation.
also you can play with different functions and iterations and see how it goes.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `as you can see, when learning rate set to 0.1, the optimisation tries to reach the minimum point and takes more steps to reach there. let&#39;s try with slightly higher learning rate 0.3.`;
        }
      })} ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "learning-rate-=-0.3",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `learning rate = 0.3`;
          }
        }
      )} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/gradient-descent/gradient_descent_animation_0.3.gif",
          alt: "Gradient Descent @ lr = 0.3"
        },
        {},
        {}
      )} ${validate_component(Blockquote, "Components.blockquote").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
            default: () => {
              return `it starts from the initial point and takes a huge jump downward to reach the minimum. you can say this obvisouly took less steps.`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s have a look at an interesting case, learning rate = 0.9`;
        }
      })} ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "learning-rate-=-0.9",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `learning rate = 0.9`;
          }
        }
      )} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/gradient-descent/gradient_descent_animation_0.9.gif",
          alt: "Gradient Descent @ lr = 0.9"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `What just happend there?`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Well, it means that we&#39;re taking relatively large steps towards the minimum of our loss function. The negative and positive steps we&#39;re observing indicate that the algorithm is overshooting the minimum and then oscillating around it.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `what happends if we go beyond 0.9 ? let&#39;s set learning rate = 1.0`;
        }
      })} ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "learning-rate-=-1.0",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `learning rate = 1.0`;
          }
        }
      )} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/gradient-descent/gradient_descent_animation_1.gif",
          alt: "Gradient Descent @ lr = 1.0"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `This doesn&#39;t even reach the minumum point. it just oscialtes between negative and positive.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s set our learning rate very low, something like 0.01, what do you think happens to our algorithm ? Let&#39;s have a look.`;
        }
      })} ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "learning-rate-=-0.01",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `learning rate = 0.01`;
          }
        }
      )} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/gradient-descent/gradient_descent_animation_0.01.gif",
          alt: "Gradient Descent @ lr = 0.01"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `well this too, did not reach its destination. it stopped midway. But hey, you might think that it&#39;s going downhill but why did it stop? well, it ran out of fuel. just kidding, it stopped because iterations are not enough to reach the minimum. if we do this for more iterations, it will reach eventually.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `So, to conclude, it&#39;s always recommended to keep the learing rate at optimum value. Not too low, or not too high. it&#39;s not something that is fixed for different set of problems. you just have to play with that and see what works best. That&#39;s why we have several other Optimising methods in Gradient Descent that optimises the learning rate. We will learn about them in next upcomming series. Stay tuned and that&#39;s all for now. G&#39;Day.`;
        }
      })} ${validate_component(Blockquote, "Components.blockquote").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
            default: () => {
              return `In upcomming posts, we will see more hands on Gradio demos to let you guys play with the models right here.`;
            }
          })}`;
        }
      })}`;
    }
  })}`;
});
const __vite_glob_0_3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$3,
  metadata: metadata$6
}, Symbol.toStringTag, { value: "Module" }));
const metadata$5 = {
  "title": "Linear Regression: A Mathematical and Practical Guide with NumPy",
  "description": "Learn about the mathematical concepts behind linear regression and how to implement them using NumPy in Python.",
  "date": "2024-01-15",
  "image": ["/linear-reg-scratch.png", "/linear-reg-scratch-dark.png"],
  "tags": ["Machine Learning"],
  "draft": false
};
const Page$2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$5), {}, {
    default: () => {
      return `${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "what-is-linear-regression?",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `What is Linear Regression?`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Linear regression is a fundamental statistical method used for modeling the relationship between a dependent variable and one or more independent variables. It&#39;s a type of linear approach to modeling the relationship between a dependent variable and one or more independent variables. The case of one independent variable is called <code data-svelte-h="svelte-1f1qtck">simple linear regression</code>; for more than one, the process is called <code data-svelte-h="svelte-15c1spq">multiple linear regression</code>.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `In simple linear regression, the relationship between the independent variable <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span> and the dependent variable <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> is modeled as a straight line. The goal is to find the best-fitting line that describes the relationship between the variables. This line is represented by the equation <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = mx + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>`}<!-- HTML_TAG_END --></span>`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `where:`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> = dependent variable or the one we want to predict.`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span> = independent variable or the one we use to make predictions.`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>`}<!-- HTML_TAG_END --></span> = slope of the line, which represents the change in slope for one unit change in <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span>`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>`}<!-- HTML_TAG_END --></span> = the y-intercept which is the value of <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> when <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>`}<!-- HTML_TAG_END --></span>`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `The values of <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>`}<!-- HTML_TAG_END --></span> and <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>`}<!-- HTML_TAG_END --></span> are determined during the training phase of the linear regression model. The model is trained using a dataset pairs of <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span> and <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> values. The training process involves finding the values of <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>`}<!-- HTML_TAG_END --></span> and <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>`}<!-- HTML_TAG_END --></span> that minimizes the differences between actual <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> values in the dataset and the <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> values predicted by the model.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Once the model is trained, it can be used to make predictions on new data by plugging the new <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span> values into the equation <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = mx+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>`}<!-- HTML_TAG_END --></span>. The model will then output the predicted <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> values based on the input <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span> values.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "types-of-linear-regression",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Types of Linear Regression`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `In the context of machine learning and statistical modeling, linear regression can be classified into several types based on the number of independent variables and the nature of the relationships they represent. Here are some common types of linear regression:`;
        }
      })} ${validate_component(Ol, "Components.ol").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-m8dx24">Simple Linear Regression:</strong>`;
                }
              })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Simple linear regression involves only one independent variable. The relationship between the independent variable <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span> and the dependent variable <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> is modeled as a straight line.`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `The equation for simple linear regression is <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>m</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y = mx + b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>`}<!-- HTML_TAG_END --></span>, where <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>`}<!-- HTML_TAG_END --></span> is the slope of the line and <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>`}<!-- HTML_TAG_END --></span> is the y-intercept.`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-3tjodi">Multiple Linear Regression:</strong>`;
                }
              })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Multiple linear regression involves more than one independent variable. The relationship between the dependent variable <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> and multiple independent variables <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>x</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">x1, x2, …, xn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal">n</span></span></span></span>`}<!-- HTML_TAG_END --></span> is modeled as a linear combination of these variables.`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `The equation for multiple linear regression is <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>b</mi><mn>0</mn></msub><mo>+</mo><msup><mi>b</mi><mn>1</mn></msup><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>…</mo><mo>+</mo><msup><mi>b</mi><mi>n</mi></msup><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">y = b_0 + b^1x_1 + b^2x_2 + … + b^nx_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9641em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9641em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> where <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">b_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> is the intercept, and <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>b</mi><mn>1</mn></msup><mo separator="true">,</mo><msup><mi>b</mi><mn>2</mn></msup><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">b^1, b^2, …, b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> are the coefficients for the independent variables.`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-18beatf">Polynomial Regression:</strong>`;
                }
              })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Polynomial regression is a type of regression analysis in which the relationship between the independent variable <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span> and the dependent variable <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span> is modeled as an <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>`}<!-- HTML_TAG_END --></span>-degree polynomial.`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `The equation for polynomial regression is <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>b</mi><mn>0</mn></msub><mo>+</mo><msup><mi>b</mi><mn>1</mn></msup><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mo>…</mo><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">y = b_0 + b^1x + b_2x^2 + … + b_nx^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9641em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span>, where <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>0</mn></msub><mo separator="true">,</mo><msup><mi>b</mi><mn>1</mn></msup><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">b_0, b^1, …, b^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> are the coefficients of the polynomial terms.`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-5iw7dg">Ridge Regression:</strong>`;
                }
              })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Ridge regression is a variation of linear regression that includes a regularization term in the loss function. This regularization term helps to prevent overfitting by penalizing large coefficient values.`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Ridge regression is particularly useful when dealing with multicollinearity (high correlation between independent variables) in multiple linear regression.`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-13kh4k3">Lasso Regression:</strong>`;
                }
              })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Lasso regression, like ridge regression, is a regularization technique that adds a penalty term to the loss function. However, lasso regression uses the L1 norm of the coefficient vector as the penalty term, which can lead to sparse solutions (i.e., some coefficients may become exactly zero).`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Lasso regression is often used for feature selection in high-dimensional datasets.`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
                default: () => {
                  return `<strong data-svelte-h="svelte-1xnodhv">ElasticNet Regression:</strong>`;
                }
              })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `ElasticNet regression is a combination of ridge and lasso regression. It uses a penalty term that is a mix of both L1 and L2 norms, allowing it to benefit from the strengths of both regularization techniques.`;
                    }
                  })}`;
                }
              })}`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `These are some of the common types of linear regression used in machine learning and statistics. Each type has its own advantages and is suitable for different types of data and modeling tasks.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Let&#39;s get to real deal`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "the-math-behind-linear-regression",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `The Math behind Linear Regression`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `To understand the mathematics involved, I recommend going through the previous two blog posts where we discussed gradient descent and cost functions. They will be helpful.`;
        }
      })} ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "hypothesis-function",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `Hypothesis Function`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `The hypothesis function in linear regression is a linear equation that represents the relationship between the independent variable (<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>`}<!-- HTML_TAG_END --></span>) and the dependent variable (<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>`}<!-- HTML_TAG_END --></span>).
The equation is given by:`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><mi>x</mi></mrow><annotation encoding="application/x-tex">h_{	heta}(x) = 	heta_{0} + 	heta_{1}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `it&#39;s same as the one we discussed earlier in this post.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Here, <span class="text-base mx-1"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">	heta_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> is intercept and <span class="text-base mx-1"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">	heta_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> is the slope of the line`;
        }
      })} ${validate_component(H3, "Components.h3").$$render($$result, { id: "cost-function", headerTag: "h3" }, {}, {
        default: () => {
          return `Cost Function`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `The cost function measures how well the hypothesis function predicts the actual values (In our case, it gives us the best fit line). In linear regression, the cost function is often the mean squared error (MSE), given by:`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `error = (predicted - actual)<span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span>`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mi>i</mi></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = (h_{	heta}(x^i) - y^i)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1247em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1247em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this gives the error for just one data point.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `We may have multiple data points, in which case we sum up the errors at every data point to obtain the total error.`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mn>1</mn><mo>=</mo><mn>0</mn></mrow><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mi>i</mi></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">sum_{1=0}^{m} (h_{	heta}(x^i) - y^i)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9185em;vertical-align:-1.2671em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1247em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `and average of all`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mn>1</mn><mo>=</mo><mn>0</mn></mrow><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mi>i</mi></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J(	heta) = \frac{1}{2m}sum_{1=0}^{m} (h_{	heta}(x^i) - y^i)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9185em;vertical-align:-1.2671em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1247em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for mathematical convenience, we multiply the above equation with <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac&#123;1&#125;&#123;2&#125;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>`}<!-- HTML_TAG_END --></span>. When we take the derivative of the cost function <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(&#92;theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>`}<!-- HTML_TAG_END --></span> with respect to the parameters <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">&#92;theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>`}<!-- HTML_TAG_END --></span> for the purpose of gradient descent, the <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac&#123;1&#125;&#123;2&#125;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> cancels out with the power of 2 in the squared error term, simplifying the derivative calculation.`;
        }
      })} ${validate_component(H3, "Components.h3").$$render($$result, { id: "gradient-descent", headerTag: "h3" }, {}, {
        default: () => {
          return `Gradient Descent`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `We use gradient descent to update the parameters <span class="text-base mx-1"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">	heta_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> and <span class="text-base mx-1"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">	heta_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> to minimize the cost function:`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>−</mo><mi>α</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mn>1</mn><mo>=</mo><mn>0</mn></mrow><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mi>i</mi></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">	heta_{0} := 	heta_{0} - alpha \frac{1}{m} sum_{1=0}^{m} (h_{	heta}(x^i) - y^i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.9185em;vertical-align:-1.2671em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1247em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span>`}<!-- HTML_TAG_END --></span> <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mn>1</mn></msub><mo>−</mo><mi>α</mi><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mn>1</mn><mo>=</mo><mn>0</mn></mrow><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mi>i</mi></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><mo stretchy="false">)</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">	heta_{1} := 	heta_{1} - alpha \frac{1}{m} sum_{1=0}^{m} (h_{	heta}(x^i) - y^i)x^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.9185em;vertical-align:-1.2671em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8829em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2671em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.188em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `We repeat this process until the cost converges to a minimum.<br>
Once we have the optimized parameters <span class="text-base mx-1"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">	heta_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> and <span class="text-base mx-1"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">	heta_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span>, we can use the hypothesis function to make predictions for new values.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Let&#39;s implement this using Python from scratch.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "python-implementation",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Python Implementation`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s import the required libraries`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> numpy </span><span style="color: #86E1FC">as</span><span style="color: #C8D3F5"> np</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> matplotlib</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">pyplot </span><span style="color: #86E1FC">as</span><span style="color: #C8D3F5"> plt</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> os</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> imageio</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> numpy </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> np</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> matplotlib</span><span style="color: #212121">.</span><span style="color: #24292EFF">pyplot </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> plt</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> os</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> imageio</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `now let&#39;s implement the linear regression`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C099FF">class</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">LinearRegression</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">__init__</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">self</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">lr</span><span style="color: #86E1FC">:</span><span style="color: #FF966C">float</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">0.01</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">iters</span><span style="color: #86E1FC">:</span><span style="color: #FF966C">int</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">300</span><span style="color: #B4C2F0">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">-></span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">None</span><span style="color: #B4C2F0">:</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">lr </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> lr</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">iters </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> iters</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">weights </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">None</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">bias </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">None</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span></span>
<span data-line=""><span style="color: #C8D3F5">        </span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">fit</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">self</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">X</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5">np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">ndarray</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">y</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5">np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">ndarray</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">**</span><span style="color: #FCA7EA">kwargs</span><span style="color: #B4C2F0">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">-></span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">None</span><span style="color: #B4C2F0">:</span></span>
<span data-line=""><span style="color: #C8D3F5">        n_samples</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> n_features </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> X</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">shape</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">weights </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">zeros</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n_features</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">bias </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">0</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">if</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">plot_dir</span><span style="color: #86E1FC">'</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">in</span><span style="color: #C8D3F5"> kwargs</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">plot_dir </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> kwargs</span><span style="color: #86E1FC">[</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">plot_dir</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">]</span></span>
<span data-line=""><span style="color: #C8D3F5">            </span></span>
<span data-line=""><span style="color: #C8D3F5">            os</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">makedirs</span><span style="color: #86E1FC">(</span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">plot_dir</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">exist_ok</span><span style="color: #86E1FC">=</span><span style="color: #FF98A4">True</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">for</span><span style="color: #C8D3F5"> i </span><span style="color: #86E1FC">in</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">range</span><span style="color: #86E1FC">(</span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">iters</span><span style="color: #86E1FC">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">            y_pred </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">predict</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X</span><span style="color: #86E1FC">)</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">            </span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">            dw </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">(</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">/</span><span style="color: #C8D3F5">n_samples</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">*</span><span style="color: #C8D3F5"> np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">dot</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">T</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">y_pred </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> y</span><span style="color: #86E1FC">))</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">            db </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">(</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">/</span><span style="color: #C8D3F5">n_samples</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">*</span><span style="color: #C8D3F5"> np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">sum</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">y_pred </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> y</span><span style="color: #86E1FC">)</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">            </span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">            </span><span style="color: #858AA6"># updating the weights</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">            </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">weights </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">weights </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">lr </span><span style="color: #86E1FC">*</span><span style="color: #C8D3F5"> dw</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">            </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">bias </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">bias </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">lr </span><span style="color: #86E1FC">*</span><span style="color: #C8D3F5"> db</span></span>
<span data-line=""><span style="color: #C8D3F5">            </span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #858AA6"># optional (for plotting at each epoch)</span></span>
<span data-line=""><span style="color: #C8D3F5">            </span><span style="color: #86E1FC">if</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">plot_dir</span><span style="color: #86E1FC">'</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">in</span><span style="color: #C8D3F5"> kwargs</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #C8D3F5">                plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">figure</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">figsize</span><span style="color: #86E1FC">=(</span><span style="color: #FF966C">8</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">8</span><span style="color: #86E1FC">))</span></span>
<span data-line=""><span style="color: #C8D3F5">                plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">scatter</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">color</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">b</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">label</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Actual</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">                plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">plot</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_pred</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">color</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">r</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">label</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Predicted</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">                plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">title</span><span style="color: #86E1FC">(</span><span style="color: #C099FF">f</span><span style="color: #C3E88D">"Epoch: </span><span style="color: #FF98A4">&#123;</span><span style="color: #C8D3F5">i</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">, Weight: </span><span style="color: #FF98A4">&#123;</span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">weights</span><span style="color: #86E1FC">[</span><span style="color: #FF966C">0</span><span style="color: #86E1FC">]</span><span style="color: #C099FF">:.3f</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">, bias: </span><span style="color: #FF98A4">&#123;</span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">bias</span><span style="color: #C099FF">:.3f</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">                plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">legend</span><span style="color: #86E1FC">()</span></span>
<span data-line=""><span style="color: #C8D3F5">                plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">savefig</span><span style="color: #86E1FC">(</span><span style="color: #C099FF">f</span><span style="color: #C3E88D">"</span><span style="color: #FF98A4">&#123;</span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">plot_dir</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">/</span><span style="color: #FF98A4">&#123;</span><span style="color: #C8D3F5">i</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">_plot.png"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">                plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">close</span><span style="color: #86E1FC">()</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">predict</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">self</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">X</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5">np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">ndarray</span><span style="color: #B4C2F0">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">-></span><span style="color: #C8D3F5"> np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">ndarray</span><span style="color: #B4C2F0">:</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">return</span><span style="color: #C8D3F5"> np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">dot</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">weights</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">+</span><span style="color: #C8D3F5"> </span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">bias</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">make_gif</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">self</span><span style="color: #B4C2F0">):</span></span>
<span data-line=""><span style="color: #C8D3F5">        images </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span><span style="color: #C8D3F5">imageio</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">imread</span><span style="color: #86E1FC">(</span><span style="color: #C099FF">f</span><span style="color: #C3E88D">"</span><span style="color: #FF98A4">&#123;</span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">plot_dir</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">/</span><span style="color: #FF98A4">&#123;</span><span style="color: #C8D3F5">x</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">_plot.png"</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">for</span><span style="color: #C8D3F5"> x </span><span style="color: #86E1FC">in</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">range</span><span style="color: #86E1FC">(</span><span style="color: #FF757F">self</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">iters</span><span style="color: #86E1FC">)]</span></span>
<span data-line=""><span style="color: #C8D3F5">        imageio</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">mimsave</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">lr_gif.gif</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> images</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">class</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">LinearRegression</span><span style="color: #24292EFF">:</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">__init__</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">self</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">lr</span><span style="color: #212121">:</span><span style="color: #1976D2">float</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">0.01</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">iters</span><span style="color: #212121">:</span><span style="color: #1976D2">int</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">300</span><span style="color: #24292EFF">) </span><span style="color: #212121">-></span><span style="color: #24292EFF"> </span><span style="color: #1976D2">None</span><span style="color: #24292EFF">:</span></span>
<span data-line=""><span style="color: #24292EFF">        self</span><span style="color: #212121">.</span><span style="color: #24292EFF">lr </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> lr</span></span>
<span data-line=""><span style="color: #24292EFF">        self</span><span style="color: #212121">.</span><span style="color: #24292EFF">iters </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> iters</span></span>
<span data-line=""><span style="color: #24292EFF">        self</span><span style="color: #212121">.</span><span style="color: #24292EFF">weights </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">None</span></span>
<span data-line=""><span style="color: #24292EFF">        self</span><span style="color: #212121">.</span><span style="color: #24292EFF">bias </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">None</span></span>
<span data-line=""><span style="color: #24292EFF">        </span></span>
<span data-line=""><span style="color: #24292EFF">        </span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fit</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">self</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">X</span><span style="color: #212121">:</span><span style="color: #24292EFF">np</span><span style="color: #212121">.</span><span style="color: #24292EFF">ndarray</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">y</span><span style="color: #212121">:</span><span style="color: #24292EFF">np</span><span style="color: #212121">.</span><span style="color: #24292EFF">ndarray</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">**</span><span style="color: #FF9800">kwargs</span><span style="color: #24292EFF">) </span><span style="color: #212121">-></span><span style="color: #24292EFF"> </span><span style="color: #1976D2">None</span><span style="color: #24292EFF">:</span></span>
<span data-line=""><span style="color: #24292EFF">        n_samples</span><span style="color: #212121">,</span><span style="color: #24292EFF"> n_features </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> X</span><span style="color: #212121">.</span><span style="color: #24292EFF">shape</span></span>
<span data-line=""><span style="color: #24292EFF">        self</span><span style="color: #212121">.</span><span style="color: #24292EFF">weights </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> np</span><span style="color: #212121">.</span><span style="color: #6F42C1">zeros</span><span style="color: #212121">(n_features)</span></span>
<span data-line=""><span style="color: #24292EFF">        self</span><span style="color: #212121">.</span><span style="color: #24292EFF">bias </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">0</span></span>
<span data-line=""><span style="color: #24292EFF">        </span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'plot_dir'</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">in</span><span style="color: #24292EFF"> kwargs</span><span style="color: #212121">:</span></span>
<span data-line=""><span style="color: #24292EFF">            self</span><span style="color: #212121">.</span><span style="color: #24292EFF">plot_dir </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> kwargs</span><span style="color: #212121">[</span><span style="color: #22863A">'plot_dir'</span><span style="color: #212121">]</span></span>
<span data-line=""><span style="color: #24292EFF">            </span></span>
<span data-line=""><span style="color: #24292EFF">            os</span><span style="color: #212121">.</span><span style="color: #6F42C1">makedirs</span><span style="color: #212121">(self.plot_dir, exist_ok</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">True</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">        </span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">for</span><span style="color: #24292EFF"> i </span><span style="color: #D32F2F">in</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">range</span><span style="color: #212121">(self.iters):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">            y_pred </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> self</span><span style="color: #212121">.</span><span style="color: #6F42C1">predict</span><span style="color: #212121">(X)</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">            </span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">            dw </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> (</span><span style="color: #1976D2">1</span><span style="color: #D32F2F">/</span><span style="color: #24292EFF">n_samples) </span><span style="color: #D32F2F">*</span><span style="color: #24292EFF"> np</span><span style="color: #212121">.</span><span style="color: #6F42C1">dot</span><span style="color: #212121">(X.T, (y_pred </span><span style="color: #D32F2F">-</span><span style="color: #212121"> y))</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">            db </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> (</span><span style="color: #1976D2">1</span><span style="color: #D32F2F">/</span><span style="color: #24292EFF">n_samples) </span><span style="color: #D32F2F">*</span><span style="color: #24292EFF"> np</span><span style="color: #212121">.</span><span style="color: #6F42C1">sum</span><span style="color: #212121">(y_pred </span><span style="color: #D32F2F">-</span><span style="color: #212121"> y)</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">            </span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">            </span><span style="color: #C2C3C5"># updating the weights</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">            self</span><span style="color: #212121">.</span><span style="color: #24292EFF">weights </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> self</span><span style="color: #212121">.</span><span style="color: #24292EFF">weights </span><span style="color: #D32F2F">-</span><span style="color: #24292EFF"> self</span><span style="color: #212121">.</span><span style="color: #24292EFF">lr </span><span style="color: #D32F2F">*</span><span style="color: #24292EFF"> dw</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">            self</span><span style="color: #212121">.</span><span style="color: #24292EFF">bias </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> self</span><span style="color: #212121">.</span><span style="color: #24292EFF">bias </span><span style="color: #D32F2F">-</span><span style="color: #24292EFF"> self</span><span style="color: #212121">.</span><span style="color: #24292EFF">lr </span><span style="color: #D32F2F">*</span><span style="color: #24292EFF"> db</span></span>
<span data-line=""><span style="color: #24292EFF">            </span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #C2C3C5"># optional (for plotting at each epoch)</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'plot_dir'</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">in</span><span style="color: #24292EFF"> kwargs</span><span style="color: #212121">:</span></span>
<span data-line=""><span style="color: #24292EFF">                plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">figure</span><span style="color: #212121">(figsize</span><span style="color: #D32F2F">=</span><span style="color: #212121">(</span><span style="color: #1976D2">8</span><span style="color: #212121">, </span><span style="color: #1976D2">8</span><span style="color: #212121">))</span></span>
<span data-line=""><span style="color: #24292EFF">                plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">scatter</span><span style="color: #212121">(X, y, color</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"b"</span><span style="color: #212121">, label</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"Actual"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">                plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">plot</span><span style="color: #212121">(X, y_pred, color</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"r"</span><span style="color: #212121">, label</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"Predicted"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">                plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">title</span><span style="color: #212121">(</span><span style="color: #D32F2F">f</span><span style="color: #22863A">"Epoch: </span><span style="color: #1976D2">&#123;</span><span style="color: #212121">i</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">, Weight: </span><span style="color: #1976D2">&#123;</span><span style="color: #212121">self.weights[</span><span style="color: #1976D2">0</span><span style="color: #212121">]</span><span style="color: #D32F2F">:.3f</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">, bias: </span><span style="color: #1976D2">&#123;</span><span style="color: #212121">self.bias</span><span style="color: #D32F2F">:.3f</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">                plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">legend</span><span style="color: #212121">()</span></span>
<span data-line=""><span style="color: #24292EFF">                plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">savefig</span><span style="color: #212121">(</span><span style="color: #D32F2F">f</span><span style="color: #22863A">"</span><span style="color: #1976D2">&#123;</span><span style="color: #212121">self.plot_dir</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">/</span><span style="color: #1976D2">&#123;</span><span style="color: #212121">i</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">_plot.png"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">                plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">close</span><span style="color: #212121">()</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">predict</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">self</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #FF9800">X</span><span style="color: #212121">:</span><span style="color: #24292EFF">np</span><span style="color: #212121">.</span><span style="color: #24292EFF">ndarray) </span><span style="color: #212121">-></span><span style="color: #24292EFF"> np</span><span style="color: #212121">.</span><span style="color: #24292EFF">ndarray:</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> np</span><span style="color: #212121">.</span><span style="color: #6F42C1">dot</span><span style="color: #212121">(X, self.weights)</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> self</span><span style="color: #212121">.</span><span style="color: #24292EFF">bias</span></span>
<span data-line=""><span style="color: #24292EFF">    </span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">make_gif</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">self</span><span style="color: #24292EFF">):</span></span>
<span data-line=""><span style="color: #24292EFF">        images </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [imageio</span><span style="color: #212121">.</span><span style="color: #6F42C1">imread</span><span style="color: #212121">(</span><span style="color: #D32F2F">f</span><span style="color: #22863A">"</span><span style="color: #1976D2">&#123;</span><span style="color: #212121">self.plot_dir</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">/</span><span style="color: #1976D2">&#123;</span><span style="color: #212121">x</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">_plot.png"</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">for</span><span style="color: #24292EFF"> x </span><span style="color: #D32F2F">in</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">range</span><span style="color: #212121">(self.iters)</span><span style="color: #24292EFF">]</span></span>
<span data-line=""><span style="color: #24292EFF">        imageio</span><span style="color: #212121">.</span><span style="color: #6F42C1">mimsave</span><span style="color: #212121">(</span><span style="color: #22863A">"lr_gif.gif"</span><span style="color: #212121">, images)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s prepare some data for linear regression`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> sklearn</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">datasets </span><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> make_regression</span></span>
<span data-line=""><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> sklearn</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">model_selection </span><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> train_test_split</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">X</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> make_regression</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">n_samples</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">1000</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">n_features</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">noise</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">20</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">random_state</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">42</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">X_train</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> X_test</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_train</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_test </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> train_test_split</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">test_size</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">0.2</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">random_state</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">42</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">shuffle</span><span style="color: #86E1FC">=</span><span style="color: #FF98A4">True</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> sklearn</span><span style="color: #212121">.</span><span style="color: #24292EFF">datasets </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> make_regression</span></span>
<span data-line=""><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> sklearn</span><span style="color: #212121">.</span><span style="color: #24292EFF">model_selection </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> train_test_split</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">X</span><span style="color: #212121">,</span><span style="color: #24292EFF"> y </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">make_regression</span><span style="color: #212121">(n_samples</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">1000</span><span style="color: #212121">, n_features</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">1</span><span style="color: #212121">, noise</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">20</span><span style="color: #212121">, random_state</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">42</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">X_train</span><span style="color: #212121">,</span><span style="color: #24292EFF"> X_test</span><span style="color: #212121">,</span><span style="color: #24292EFF"> y_train</span><span style="color: #212121">,</span><span style="color: #24292EFF"> y_test </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">train_test_split</span><span style="color: #212121">(X, y, test_size</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">0.2</span><span style="color: #212121">, random_state</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">42</span><span style="color: #212121">, shuffle</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">True</span><span style="color: #212121">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s have a look at the first 10 samples from X and y below`;
        }
      })} ${validate_component(Table, "Components.table").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Thead, "Components.thead").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Th, "Components.th").$$render($$result, {}, {}, {
                    default: () => {
                      return `X`;
                    }
                  })} ${validate_component(Th, "Components.th").$$render($$result, {}, {}, {
                    default: () => {
                      return `y`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Tbody, "Components.tbody").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-1.758739`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-36.084949`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `1.031845`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-10.272417`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-0.487606`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-27.694060`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `0.186454`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-11.103187`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `0.725767`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `14.055202`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `0.972554`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `51.280219`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `0.645376`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-23.945672`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `0.681891`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `49.248252`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-1.430141`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-8.350814`;
                    }
                  })}`;
                }
              })} ${validate_component(Tr, "Components.tr").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `1.066675`;
                    }
                  })} ${validate_component(Td, "Components.td").$$render($$result, {}, {}, {
                    default: () => {
                      return `-4.097966`;
                    }
                  })}`;
                }
              })}`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `if we plot all the data points, this is how it looks`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">scatter</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">color</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">b</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">label</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Actual</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">legend</span><span style="color: #86E1FC">()</span></span>
<span data-line=""><span style="color: #C8D3F5">plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">title</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Sample Plot</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">scatter</span><span style="color: #212121">(X, y, color</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"b"</span><span style="color: #212121">, label</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"Actual"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">legend</span><span style="color: #212121">()</span></span>
<span data-line=""><span style="color: #24292EFF">plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">title</span><span style="color: #212121">(</span><span style="color: #22863A">"Sample Plot"</span><span style="color: #212121">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/linear-regression-from-scratch/scatter.png",
          alt: "Sample Scatter Plot"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s train our model`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">reg </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> LinearRegression</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">iters</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">500</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">reg</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">fit</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_train</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">plot_dir</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">linear_reg_plots</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">y_pred </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> reg</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">predict</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_test</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">reg </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">LinearRegression</span><span style="color: #212121">(iters</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">500</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">reg</span><span style="color: #212121">.</span><span style="color: #6F42C1">fit</span><span style="color: #212121">(X_train, y_train, plot_dir</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'linear_reg_plots'</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">y_pred </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> reg</span><span style="color: #212121">.</span><span style="color: #6F42C1">predict</span><span style="color: #212121">(X_test)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `if we plot the best fit line after training`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">scatter</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_train</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">color</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">b</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">label</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Actual</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">plot</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_pred</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">color</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">r</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">label</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Predicted</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">title</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Linear Regresion best fit line</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">plt</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">legend</span><span style="color: #86E1FC">()</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">scatter</span><span style="color: #212121">(X_train, y_train, color</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"b"</span><span style="color: #212121">, label</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"Actual"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">plot</span><span style="color: #212121">(X_train, y_pred, color</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"r"</span><span style="color: #212121">, label</span><span style="color: #D32F2F">=</span><span style="color: #22863A">"Predicted"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">title</span><span style="color: #212121">(</span><span style="color: #22863A">"Linear Regresion best fit line"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">plt</span><span style="color: #212121">.</span><span style="color: #6F42C1">legend</span><span style="color: #212121">()</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/linear-regression-from-scratch/lr_plot.png",
          alt: "Regression Plot"
        },
        {},
        {}
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s have a look at how our model performed`;
        }
      })} ${validate_component(Img, "Components.img").$$render(
        $$result,
        {
          src: "/posts/linear-regression-from-scratch/lr_gif.gif",
          alt: "Linear Regression Animation"
        },
        {},
        {}
      )} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "comparision-with-standard-library",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Comparision with Standard Library`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s compare our model with standard library, scikit-learn`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": true,
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">from sklearn import linear_model</span></span>
<span data-line=""><span style="color: #c8d3f5">from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score</span></span>
<span data-line=""><span style="color: #c8d3f5"></span></span>
<span data-line=""><span style="color: #c8d3f5">lr = linear_model.LinearRegression()</span></span>
<span data-line=""><span style="color: #c8d3f5">lr.fit(X_train, y_train)</span></span>
<span data-line=""><span style="color: #c8d3f5">y_pred_sk = lr.predict(X_train)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": true,
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">from sklearn import linear_model</span></span>
<span data-line=""><span style="color: #24292eff">from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score</span></span>
<span data-line=""><span style="color: #24292eff"></span></span>
<span data-line=""><span style="color: #24292eff">lr = linear_model.LinearRegression()</span></span>
<span data-line=""><span style="color: #24292eff">lr.fit(X_train, y_train)</span></span>
<span data-line=""><span style="color: #24292eff">y_pred_sk = lr.predict(X_train)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `if we compare the error metrics on test data for both models, we get`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Our Model (Scratch):`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">mae </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> mean_absolute_error</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">y_test</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_pred</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">mse </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> mean_squared_error</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">y_test</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_pred</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">rmse </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">sqrt</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">mse</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">r_squared </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> r2_score</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">y_test</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_pred</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6"># Print the error metrics</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Mean Absolute Error (MAE):</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> mae</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Mean Squared Error (MSE):</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> mse</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Root Mean Squared Error (RMSE):</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> rmse</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">R-squared (R2):</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> r_squared</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">mae </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">mean_absolute_error</span><span style="color: #212121">(y_test, y_pred)</span></span>
<span data-line=""><span style="color: #24292EFF">mse </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">mean_squared_error</span><span style="color: #212121">(y_test, y_pred)</span></span>
<span data-line=""><span style="color: #24292EFF">rmse </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> np</span><span style="color: #212121">.</span><span style="color: #6F42C1">sqrt</span><span style="color: #212121">(mse)</span></span>
<span data-line=""><span style="color: #24292EFF">r_squared </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">r2_score</span><span style="color: #212121">(y_test, y_pred)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5"># Print the error metrics</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"Mean Absolute Error (MAE):"</span><span style="color: #212121">, mae)</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"Mean Squared Error (MSE):"</span><span style="color: #212121">, mse)</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"Root Mean Squared Error (RMSE):"</span><span style="color: #212121">, rmse)</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"R-squared (R2):"</span><span style="color: #212121">, r_squared)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `the output is:`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": true,
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">Mean Absolute Error (MAE): 16.340180822972712</span></span>
<span data-line=""><span style="color: #c8d3f5">Mean Squared Error (MSE): 431.3609648508903</span></span>
<span data-line=""><span style="color: #c8d3f5">Root Mean Squared Error (RMSE): 20.769231205099775</span></span>
<span data-line=""><span style="color: #c8d3f5">R-squared (R2): 0.37607990198934305</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": true,
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">Mean Absolute Error (MAE): 16.340180822972712</span></span>
<span data-line=""><span style="color: #24292eff">Mean Squared Error (MSE): 431.3609648508903</span></span>
<span data-line=""><span style="color: #24292eff">Root Mean Squared Error (RMSE): 20.769231205099775</span></span>
<span data-line=""><span style="color: #24292eff">R-squared (R2): 0.37607990198934305</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Scikit-Learn Model:`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">mae </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> mean_absolute_error</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">y_test</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_pred_sk</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">mse </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> mean_squared_error</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">y_test</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_pred_sk</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">rmse </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> np</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">sqrt</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">mse</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">r_squared </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> r2_score</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">y_test</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> y_pred_sk</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6"># Print the error metrics</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Mean Absolute Error (MAE):</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> mae</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Mean Squared Error (MSE):</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> mse</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Root Mean Squared Error (RMSE):</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> rmse</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">R-squared (R2):</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> r_squared</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">mae </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">mean_absolute_error</span><span style="color: #212121">(y_test, y_pred_sk)</span></span>
<span data-line=""><span style="color: #24292EFF">mse </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">mean_squared_error</span><span style="color: #212121">(y_test, y_pred_sk)</span></span>
<span data-line=""><span style="color: #24292EFF">rmse </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> np</span><span style="color: #212121">.</span><span style="color: #6F42C1">sqrt</span><span style="color: #212121">(mse)</span></span>
<span data-line=""><span style="color: #24292EFF">r_squared </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">r2_score</span><span style="color: #212121">(y_test, y_pred_sk)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5"># Print the error metrics</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"Mean Absolute Error (MAE):"</span><span style="color: #212121">, mae)</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"Mean Squared Error (MSE):"</span><span style="color: #212121">, mse)</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"Root Mean Squared Error (RMSE):"</span><span style="color: #212121">, rmse)</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"R-squared (R2):"</span><span style="color: #212121">, r_squared)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `and the output is:`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": true,
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">Mean Absolute Error (MAE): 16.34302989576724</span></span>
<span data-line=""><span style="color: #c8d3f5">Mean Squared Error (MSE): 431.59967479663885</span></span>
<span data-line=""><span style="color: #c8d3f5">Root Mean Squared Error (RMSE): 20.774977131073786</span></span>
<span data-line=""><span style="color: #c8d3f5">R-squared (R2): 0.3757346321460251</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": true,
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">Mean Absolute Error (MAE): 16.34302989576724</span></span>
<span data-line=""><span style="color: #24292eff">Mean Squared Error (MSE): 431.59967479663885</span></span>
<span data-line=""><span style="color: #24292eff">Root Mean Squared Error (RMSE): 20.774977131073786</span></span>
<span data-line=""><span style="color: #24292eff">R-squared (R2): 0.3757346321460251</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `as we see, the error metrics are almost close to each other.`;
        }
      })} ${validate_component(Blockquote, "Components.blockquote").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
            default: () => {
              return `In the next post we will discuss about the polynomial regression and how it&#39;s different from Linear Regression.`;
            }
          })}`;
        }
      })}`;
    }
  })}`;
});
const __vite_glob_0_4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$2,
  metadata: metadata$5
}, Symbol.toStringTag, { value: "Module" }));
const metadata$4 = {
  "title": "Extract Strutured Information from Documents using Langchain",
  "description": "Learn how to extract strutured response from documents or from any other sources using Langchain",
  "date": "2024-01-15",
  "image": ["/linear-reg-scratch.png", "/linear-reg-scratch-dark.png"],
  "tags": ["Machine Learning"],
  "draft": false
};
const Page$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$4), {}, {})}`;
});
const __vite_glob_0_5 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$1,
  metadata: metadata$4
}, Symbol.toStringTag, { value: "Module" }));
const metadata$3 = {
  "title": "Other Configurations for this template",
  "description": "let's look at other configurations for this template like Giscus comments, Projects, About etc.",
  "date": "2023-12-20",
  "order": 3,
  "draft": false
};
const Config = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$3), {}, {
    default: () => {
      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `In this part we&#39;ll see how to configure Giscus comments, About Page, Projects page etc.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "giscus-comments", headerTag: "h2" }, {}, {
        default: () => {
          return `Giscus Comments`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Each post has it&#39;s own dedicated comments section based on ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://giscus.app/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `Giscus`;
              }
            }
          )}. you can start by changing some environment variables to setup Giscus. In you <code data-svelte-h="svelte-gbe68h">.env</code> file change the following variables.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #FF98A4">PUBLIC_GITHUB_REPO</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> prabhukirankonda</span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5">portfolio</span></span>
<span data-line=""><span style="color: #FF98A4">PUBLIC_GITHUB_USERNAME</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> PrabhuKiran8790</span></span>
<span data-line=""><span style="color: #FF98A4">PUBLIC_GITHUB_REPO_ID</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span></span>
<span data-line=""><span style="color: #FF98A4">PUBLIC_CATEGORY</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> General</span></span>
<span data-line=""><span style="color: #FF98A4">PUBLIC_CATEGORY_ID</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #1976D2">PUBLIC_GITHUB_REPO</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> prabhukirankonda</span><span style="color: #D32F2F">-</span><span style="color: #24292EFF">portfolio</span></span>
<span data-line=""><span style="color: #1976D2">PUBLIC_GITHUB_USERNAME</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> PrabhuKiran8790</span></span>
<span data-line=""><span style="color: #1976D2">PUBLIC_GITHUB_REPO_ID</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span></span>
<span data-line=""><span style="color: #1976D2">PUBLIC_CATEGORY</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> General</span></span>
<span data-line=""><span style="color: #1976D2">PUBLIC_CATEGORY_ID</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `to get Repo ID, Category ID goto ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://giscus.app/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `Giscus`;
              }
            }
          )} and follow the instructions.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "projects", headerTag: "h2" }, {}, {
        default: () => {
          return `Projects`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `To add a new project, you can start by chaging the <code data-svelte-h="svelte-vkj9nm">src/lib/projects.ts</code> file.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">type</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">TechStack</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">./icons</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">ProjectType</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">title</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">featured</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">boolean</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">source</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">image</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">description</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">techstack</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">TechStack</span><span style="color: #86E1FC">[];</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">projects</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">ProjectType</span><span style="color: #86E1FC">[]</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">title</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Personal Portfolio with Markdown Blog</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">description</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #A9B8E8">            </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">This website, prabhukirankonda.vercel.app is my personal website with a markdown blog written in SvelteKit and deployed using Vercel. Styled using Taiwind CSS and Shadcn-UI and completely written in TypeScript.</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://prabhukirankonda.vercel.app</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">source</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://github.com/PrabhuKiran8790/prabhukirankonda.vercel.app</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">image</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/sveltekit-portfolio-min.png</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">techstack</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">SvelteKit</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Tailwind</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">TypeScript</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">],</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">featured</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF966C">true</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">title</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Corgi-AI: Create anything with AI</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">description</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #A9B8E8">            </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Corgi AI is a collection of AI tools for different usecases. It includes a chatGPT clone with streaming responses, Image Generation, Audio Generation, Image Restoration and PDF Chat(beta). It is a full fledged SaaS application with stripe payments. It is Deployed using Docker with a VPS hosting on fly.io</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://corgi-ai.fly.dev</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">source</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://github.com/PrabhuKiran8790/corgi-docker</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">image</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/corgi-ai-dashboard.png</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">techstack</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">SvelteKit</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">TypeScript</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">PostgreSQL</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Docker</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Drizzle</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">],</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">featured</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF966C">true</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">title</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Dall-E Clone: AI Image Generation</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">description</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #A9B8E8">            </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Created a Dall-E Clone using SvelteKit, OpenAI API, TailwindCSS, TypeScript, Dirzzle ORM and MySQL Database. Converted it into fully working SaaS which inludes Stripe Payment Integration, User Authentication (Github &#x26; Google), and User Friendly Interface. The app is deployed with Vercel for easy setup and scalability.</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://dall-e-sveltekit.vercel.app/</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">source</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://github.com/PrabhuKiran8790/dall-e-clone</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">image</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/dall-e-svelte-min.png</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">techstack</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">SvelteKit</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">TypeScript</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">MySQL</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Drizzle</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">],</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">featured</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF966C">true</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #86E1FC">];</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-ukyo5q">src/lib/projects.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "src/lib/projects.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> &#123; TechStack &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'./icons'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">ProjectType</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    featured</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">boolean</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    source</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    description</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    techstack</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">TechStack</span><span style="color: #24292EFF">[];</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">projects</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">ProjectType</span><span style="color: #24292EFF">[] </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Personal Portfolio with Markdown Blog'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        description</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #22863A">'This website, prabhukirankonda.vercel.app is my personal website with a markdown blog written in SvelteKit and deployed using Vercel. Styled using Taiwind CSS and Shadcn-UI and completely written in TypeScript.'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://prabhukirankonda.vercel.app'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        source</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://github.com/PrabhuKiran8790/prabhukirankonda.vercel.app'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/sveltekit-portfolio-min.png'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        techstack</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [</span><span style="color: #22863A">'SvelteKit'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Tailwind'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'TypeScript'</span><span style="color: #24292EFF">]</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        featured</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">true</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Corgi-AI: Create anything with AI'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        description</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #22863A">'Corgi AI is a collection of AI tools for different usecases. It includes a chatGPT clone with streaming responses, Image Generation, Audio Generation, Image Restoration and PDF Chat(beta). It is a full fledged SaaS application with stripe payments. It is Deployed using Docker with a VPS hosting on fly.io'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://corgi-ai.fly.dev'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        source</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://github.com/PrabhuKiran8790/corgi-docker'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/corgi-ai-dashboard.png'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        techstack</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [</span><span style="color: #22863A">'SvelteKit'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'TypeScript'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'PostgreSQL'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Docker'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Drizzle'</span><span style="color: #24292EFF">]</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        featured</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">true</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Dall-E Clone: AI Image Generation'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        description</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #22863A">'Created a Dall-E Clone using SvelteKit, OpenAI API, TailwindCSS, TypeScript, Dirzzle ORM and MySQL Database. Converted it into fully working SaaS which inludes Stripe Payment Integration, User Authentication (Github &#x26; Google), and User Friendly Interface. The app is deployed with Vercel for easy setup and scalability.'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://dall-e-sveltekit.vercel.app/'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        source</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://github.com/PrabhuKiran8790/dall-e-clone'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/dall-e-svelte-min.png'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        techstack</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [</span><span style="color: #22863A">'SvelteKit'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'TypeScript'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'MySQL'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Drizzle'</span><span style="color: #24292EFF">]</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        featured</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">true</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">];</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `projects that are featured will be shown in home page. make sure the techstack is of type <code data-svelte-h="svelte-17r666e">TechStack[]</code> so that it&#39;s possible to render the respective icons to showcase projects. see ${validate_component(A, "Components.a").$$render($$result, { href: "/projects" }, {}, {
            default: () => {
              return `/projects`;
            }
          })} to get an idea on how icons are rendered and see src/lib/types.ts for more information.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">type</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">ComponentType</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">SvelteComponent</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">svelte</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">Drizzle</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Streamlit</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Svelte</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Tailwind</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">./components/site/icons</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C099FF">function</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">tuple</span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FFC777">T</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">extends</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">[]></span><span style="color: #B4C2F0">(</span><span style="color: #FF757F; font-weight: bold">...</span><span style="color: #FCA7EA">o</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">T</span><span style="color: #B4C2F0">)</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">o</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">techStackArray</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">tuple</span><span style="color: #B4C2F0">(</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Python</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">TypeScript</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">JavaScript</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Java</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">React</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">NextJS</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">SvelteKit</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">TensorFlow</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">PyTorch</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Streamlit</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">PostgreSQL</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">MySQL</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">MongoDB</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Firebase</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">FastAPI</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Docker</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Git</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Drizzle</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Tailwind</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">TechStack</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">typeof</span><span style="color: #C8D3F5"> techStackArray</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">[</span><span style="color: #FF966C">number</span><span style="color: #86E1FC">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">TechStackObject</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">[</span><span style="color: #FFC777">key</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">in</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">TechStack</span><span style="color: #86E1FC">]?:</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">filename</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">className</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">customIcon</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">ComponentType</span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FFC777">SvelteComponent</span><span style="color: #86E1FC">>;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">LangIconsType</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">[</span><span style="color: #FCA7EA">key</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">]:</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">filename</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">className</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">customIcon</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">ComponentType</span><span style="color: #86E1FC">&#x3C;</span><span style="color: #FFC777">SvelteComponent</span><span style="color: #86E1FC">>;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">techStackData</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">TechStackObject</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// inlcude if you want any custom type icon</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// by default it's gonna stick with default values</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #858AA6">/*</span></span>
<span data-line=""><span style="color: #858AA6">    why i'm only icluding the one that i want to be a custom type is that, if you see the URL structure of devicon.dev (that's where we get those icons), it has following structure</span></span>
<span data-line=""><span style="color: #858AA6">    &#x3C;img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/rust/rust-plain.svg" /></span></span>
<span data-line=""><span style="color: #858AA6">    &#x3C;img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/&#123;name&#125;/&#123;filename&#125;.svg" /></span></span>
<span data-line=""><span style="color: #858AA6">    so we can you default ones if not included here. </span></span>
<span data-line=""><span style="color: #858AA6">    */</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// for nextjs, i want the background to be white so i inlcude nextjs in this</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">NextJS</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">className</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">bg-white rounded-full</span><span style="color: #86E1FC">'</span><span style="color: #A9B8E8"> </span><span style="color: #858AA6">// that's it.</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">Firebase</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">filename</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">firebase-plain</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">SvelteKit</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">customIcon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">Svelte</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">Streamlit</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">customIcon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">Streamlit</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">MySQL</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">className</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">bg-white</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">filename</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">mysql-original-wordmark</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">Tailwind</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">customIcon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">Tailwind</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">Drizzle</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">customIcon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">Drizzle</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> &#123; ComponentType</span><span style="color: #212121">,</span><span style="color: #24292EFF"> SvelteComponent &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'svelte'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; Drizzle</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Streamlit</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Svelte</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Tailwind &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'./components/site/icons'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">function</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">tuple</span><span style="color: #24292EFF">&#x3C;</span><span style="color: #6F42C1">T</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">extends</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">[]>(</span><span style="color: #D32F2F">...</span><span style="color: #24292EFF">o</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">T</span><span style="color: #24292EFF">) &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> o;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">techStackArray</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">tuple</span><span style="color: #24292EFF">(</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'Python'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'TypeScript'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'JavaScript'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'Java'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'React'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'NextJS'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'SvelteKit'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'TensorFlow'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'PyTorch'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'Streamlit'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'PostgreSQL'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'MySQL'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'MongoDB'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'Firebase'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'FastAPI'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'Docker'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'Git'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'Drizzle'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #22863A">'Tailwind'</span></span>
<span data-line=""><span style="color: #24292EFF">);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">TechStack</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> (</span><span style="color: #D32F2F">typeof</span><span style="color: #24292EFF"> techStackArray)[</span><span style="color: #1976D2">number</span><span style="color: #24292EFF">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">TechStackObject</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    [</span><span style="color: #6F42C1">key</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">in</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">TechStack</span><span style="color: #24292EFF">]</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">        filename</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">        className</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">        customIcon</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">ComponentType</span><span style="color: #24292EFF">&#x3C;</span><span style="color: #6F42C1">SvelteComponent</span><span style="color: #24292EFF">>;</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">LangIconsType</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    [key</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">]</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">        filename</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">        className</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">        customIcon</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">ComponentType</span><span style="color: #24292EFF">&#x3C;</span><span style="color: #6F42C1">SvelteComponent</span><span style="color: #24292EFF">>;</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">techStackData</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">TechStackObject</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// inlcude if you want any custom type icon</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// by default it's gonna stick with default values</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">/*</span></span>
<span data-line=""><span style="color: #C2C3C5">    why i'm only icluding the one that i want to be a custom type is that, if you see the URL structure of devicon.dev (that's where we get those icons), it has following structure</span></span>
<span data-line=""><span style="color: #C2C3C5">    &#x3C;img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/rust/rust-plain.svg" /></span></span>
<span data-line=""><span style="color: #C2C3C5">    &#x3C;img src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/&#123;name&#125;/&#123;filename&#125;.svg" /></span></span>
<span data-line=""><span style="color: #C2C3C5">    so we can you default ones if not included here. </span></span>
<span data-line=""><span style="color: #C2C3C5">    */</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// for nextjs, i want the background to be white so i inlcude nextjs in this</span></span>
<span data-line=""><span style="color: #24292EFF">    NextJS</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        className</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'bg-white rounded-full'</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5">// that's it.</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    Firebase</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        filename</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'firebase-plain'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    SvelteKit</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        customIcon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> Svelte</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    Streamlit</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        customIcon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> Streamlit</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    MySQL</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        className</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'bg-white'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        filename</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'mysql-original-wordmark'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    Tailwind</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        customIcon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> Tailwind</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    Drizzle</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        customIcon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> Drizzle</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you can add custom icons, give class names and more.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "about", headerTag: "h2" }, {}, {
        default: () => {
          return `About`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `About page is also rendered using markdown but it has its own layout. <code data-svelte-h="svelte-16ucymt">src/lib/components/markdown/about-layout.svelte</code>. To change content in about, edit <code data-svelte-h="svelte-srxtd2">about/about.md</code>. if you see the fronmatter for <code data-svelte-h="svelte-ottnik">about.md</code> there&#39;s a <code data-svelte-h="svelte-r4n69l">layout: about</code> which tells the MDsveX preprocessor to use about layout.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `fronmatter for about.md`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">---</span></span>
<span data-line=""><span style="color: #FF757F">layout</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">about</span></span>
<span data-line=""><span style="color: #C8D3F5">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">---</span></span>
<span data-line=""><span style="color: #D32F2F">layout</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">about</span></span>
<span data-line=""><span style="color: #24292EFF">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" style="counter-set: line 156;display: grid;" data-language="js" data-theme="dark" data-line-numbers-max-digits="3"><span data-line=""><span style="color: #858AA6">/** </span><span style="color: #86E1FC">@</span><span style="color: #C099FF">type</span><span style="color: #858AA6"> </span><span style="color: #86E1FC">&#123;</span><span style="color: #FFC777">import('mdsvex').MdsvexOptions</span><span style="color: #86E1FC">&#125;</span><span style="color: #858AA6"> */</span></span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">mdsvexOptions</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">extensions</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">.md</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">.svx</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">],</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">layout</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">_</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #65BCFF">resolve</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">./src/lib/components/markdown/layout.svelte</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #858AA6">// default or fallback layout</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #A9B8E8">        </span><span style="color: #4FD6BE">about</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #65BCFF">resolve</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">./src/lib/components/markdown/about-layout.svelte</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #A9B8E8"> </span><span style="color: #858AA6">// named layout</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// comment if not working</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// highlight: &#123;</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">//  highlighter: highlightCode</span></span>
<span data-line=""><span style="color: #86E1FC">    </span><span style="color: #858AA6">// &#125;,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">remarkPlugins</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span><span style="color: #C8D3F5">remarkUnwrapImages</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">math</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">katex_blocks</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">katex_inline</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">replaceQuotes</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">remarkGfm</span><span style="color: #86E1FC">],</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">rehypePlugins</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #C8D3F5">rehypeCustomComponents</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #C8D3F5">rehypeComponentPreToPre</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #86E1FC">[</span><span style="color: #C8D3F5">rehypePrettyCode</span><span style="color: #86E1FC">,</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">prettyCodeOptions</span><span style="color: #86E1FC">],</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #C8D3F5">rehypeHandleMetadata</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #C8D3F5">rehypeRenderCode</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #C8D3F5">rehypePreToComponentPre</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #C8D3F5">rehypeSlug</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #C8D3F5">correct_hast_tree</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #A9B8E8">        </span><span style="color: #C8D3F5">rehype_katex</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #86E1FC">]</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="js" data-theme="light" data-svelte-h="svelte-43xpu">mdsvex.config.js</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light",
          __title__: "mdsvex.config.js"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" style="counter-set: line 156;display: grid;" data-language="js" data-theme="light" data-line-numbers-max-digits="3"><span data-line=""><span style="color: #C2C3C5">/** </span><span style="color: #D32F2F">@type</span><span style="color: #C2C3C5"> </span><span style="color: #6F42C1">&#123;import('mdsvex').MdsvexOptions&#125;</span><span style="color: #C2C3C5"> */</span></span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">mdsvexOptions</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    extensions</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [</span><span style="color: #22863A">'.md'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'.svx'</span><span style="color: #24292EFF">]</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    layout</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        _</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">resolve</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'./src/lib/components/markdown/layout.svelte'</span><span style="color: #24292EFF">)</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5">// default or fallback layout</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">        about</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">resolve</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'./src/lib/components/markdown/about-layout.svelte'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// named layout</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// comment if not working</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// highlight: &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">//  highlighter: highlightCode</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #C2C3C5">// &#125;,</span></span>
<span data-line=""><span style="color: #24292EFF">    remarkPlugins</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [remarkUnwrapImages</span><span style="color: #212121">,</span><span style="color: #24292EFF"> math</span><span style="color: #212121">,</span><span style="color: #24292EFF"> katex_blocks</span><span style="color: #212121">,</span><span style="color: #24292EFF"> katex_inline</span><span style="color: #212121">,</span><span style="color: #24292EFF"> replaceQuotes</span><span style="color: #212121">,</span><span style="color: #24292EFF"> remarkGfm]</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    rehypePlugins</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">        rehypeCustomComponents</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        rehypeComponentPreToPre</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        [rehypePrettyCode</span><span style="color: #212121">,</span><span style="color: #24292EFF"> prettyCodeOptions]</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        rehypeHandleMetadata</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        rehypeRenderCode</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        rehypePreToComponentPre</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        rehypeSlug</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        correct_hast_tree</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        rehype_katex</span></span>
<span data-line=""><span style="color: #24292EFF">    ]</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(Hr, "Components.hr").$$render($$result, {}, {}, {})}`;
    }
  })}`;
});
const __vite_glob_1_0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Config,
  metadata: metadata$3
}, Symbol.toStringTag, { value: "Module" }));
const metadata$2 = {
  "title": "Creating a new Blog",
  "description": "Let's look at how to create a new Blog (Indivdual & Series)",
  "date": "2023-12-20",
  "order": 2,
  "image": "https://res.cloudinary.com/practicaldev/image/fetch/s--YFzS8yLr--/c_imagga_scale,f_auto,fl_progressive,h_720,q_auto,w_1280/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9o5387e8s37g7r4i6dy.png",
  "draft": false
};
const Create_new_blog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$2), {}, {
    default: () => {
      return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Welcome to the Part II of the series, Creating a new blog post (individual &amp; series)`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "individual-blogs", headerTag: "h2" }, {}, {
        default: () => {
          return `Individual Blogs`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `to create a new blog, create a folder with the slug you want and create a <code data-svelte-h="svelte-1aow4w">page.md</code> file. the slug will act as the blog url which will be <code data-svelte-h="svelte-12r8fh3">/blog/[slug]</code>`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `here&#39;s the tree view of the folder structure`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">├── about</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">├── posts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│   ├── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">authjs-sveltekit-prisma</span><span style="color: #C8D3F5"> &#x3C;!-- slug ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│   │   └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="hi">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│   ├── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="yb">dimensionality-reduction-using-auto-encoders</span><span style="color: #C8D3F5"> &#x3C;!-- slug ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│   │   ├── banner.png</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│   │   └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="hi">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│   └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">getting-started</span><span style="color: #C8D3F5"> &#x3C;!-- slug ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│       ├── PDF_Assistant.png</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│       └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="hi">page.md</span></span>
<span data-line=""><span style="color: #C8D3F5">├── series</span></span>
<span data-line=""><span style="color: #C8D3F5">├── src</span></span>
<span data-line=""><span style="color: #C8D3F5">├── static </span></span>
<span data-line=""><span style="color: #C8D3F5">├── svelte.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── tailwind.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── biome.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── components.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── mdsvex.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── package.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── pnpm-lock.yaml</span></span>
<span data-line=""><span style="color: #C8D3F5">├── postcss.config.cjs</span></span>
<span data-line=""><span style="color: #C8D3F5">├── tsconfig.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── README.md</span></span>
<span data-line=""><span style="color: #C8D3F5">└── vite.config.ts</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">├── about</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">├── posts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│   ├── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="rb">authjs-sveltekit-prisma</span><span style="color: #24292EFF"> &#x3C;!-- slug ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│   │   └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="hi">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│   ├── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="yb">dimensionality-reduction-using-auto-encoders</span><span style="color: #24292EFF"> &#x3C;!-- slug ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│   │   ├── banner.png</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│   │   └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="hi">page.md</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│   └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="rb">getting-started</span><span style="color: #24292EFF"> &#x3C;!-- slug ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│       ├── PDF_Assistant.png</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│       └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="hi">page.md</span></span>
<span data-line=""><span style="color: #24292EFF">├── series</span></span>
<span data-line=""><span style="color: #24292EFF">├── src</span></span>
<span data-line=""><span style="color: #24292EFF">├── static </span></span>
<span data-line=""><span style="color: #24292EFF">├── svelte.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── tailwind.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── biome.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── components.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── mdsvex.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── package.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── pnpm-lock.yaml</span></span>
<span data-line=""><span style="color: #24292EFF">├── postcss.config.cjs</span></span>
<span data-line=""><span style="color: #24292EFF">├── tsconfig.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── README.md</span></span>
<span data-line=""><span style="color: #24292EFF">└── vite.config.ts</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(Blockquote, "Components.blockquote").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
            default: () => {
              return `<strong data-svelte-h="svelte-1nncehc">Note</strong>: Do not add any spaces, separate the name using <code data-svelte-h="svelte-ysxcsv">-</code>`;
            }
          })}`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "frontmatter", headerTag: "h2" }, {}, {
        default: () => {
          return `Frontmatter`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Frontmatter allows you to specify metadata and options. Included in frontmatter are things like the document or project title, what thumbnail to use for site or content previews, authors that contributed to the work etc,`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for this template the frontmatter is`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">---</span></span>
<span data-line=""><span style="color: #FF757F">title</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #FF757F">description</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #FF757F">date</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">2023-11-26</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #FF757F">tags</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #B4C2F0">  - </span><span style="color: #C3E88D">SvelteKit</span></span>
<span data-line=""><span style="color: #B4C2F0">  - </span><span style="color: #C3E88D">MDsveX</span></span>
<span data-line=""><span style="color: #FF757F">image</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">url or a pathname</span></span>
<span data-line=""><span style="color: #FF757F">draft</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">false</span></span>
<span data-line=""><span style="color: #C8D3F5">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">---</span></span>
<span data-line=""><span style="color: #D32F2F">title</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #D32F2F">description</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #D32F2F">date</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'2023-11-26'</span></span>
<span data-line=""><span style="color: #D32F2F">tags</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #24292EFF">  - </span><span style="color: #22863A">SvelteKit</span></span>
<span data-line=""><span style="color: #24292EFF">  - </span><span style="color: #22863A">MDsveX</span></span>
<span data-line=""><span style="color: #D32F2F">image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">url or a pathname</span></span>
<span data-line=""><span style="color: #D32F2F">draft</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">false</span></span>
<span data-line=""><span style="color: #24292EFF">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `<code data-svelte-h="svelte-4ktypd">tags</code> is an array so if you want to declare multiple tags just add a new tag below it.`;
        }
      })} ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "writing-series-blogs",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Writing Series Blogs`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `To understand Series Blogs, you need to understand the folder structure first.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">├── about</span></span>
<span data-line=""><span style="color: #C8D3F5">├── posts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">├── series</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│   └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="hi">guide-markdown-blog</span><span style="color: #C8D3F5"> &#x3C;!-- cover folder (will be a part of the slug) ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│       ├── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">config.md</span><span style="color: #C8D3F5"> &#x3C;!-- Blog post ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│       ├── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">create-new-blog.md</span><span style="color: #C8D3F5"> &#x3C;!-- Blog post ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│       ├── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="hi">page.md</span><span style="color: #C8D3F5"> &#x3C;!-- not a part of the post but holds information about the series, cover image for the series, tags etc. ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">│       └── </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">setup.md</span><span style="color: #C8D3F5"> &#x3C;!-- Blog post ---></span></span>
<span data-line=""><span style="color: #C8D3F5">├── src</span></span>
<span data-line=""><span style="color: #C8D3F5">├── static </span></span>
<span data-line=""><span style="color: #C8D3F5">├── svelte.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── tailwind.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── biome.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── components.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── mdsvex.config.js</span></span>
<span data-line=""><span style="color: #C8D3F5">├── package.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── pnpm-lock.yaml</span></span>
<span data-line=""><span style="color: #C8D3F5">├── postcss.config.cjs</span></span>
<span data-line=""><span style="color: #C8D3F5">├── tsconfig.json</span></span>
<span data-line=""><span style="color: #C8D3F5">├── README.md</span></span>
<span data-line=""><span style="color: #C8D3F5">└── vite.config.ts</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">├── about</span></span>
<span data-line=""><span style="color: #24292EFF">├── posts</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">├── series</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│   └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="hi">guide-markdown-blog</span><span style="color: #24292EFF"> &#x3C;!-- cover folder (will be a part of the slug) ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│       ├── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="rb">config.md</span><span style="color: #24292EFF"> &#x3C;!-- Blog post ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│       ├── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="rb">create-new-blog.md</span><span style="color: #24292EFF"> &#x3C;!-- Blog post ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│       ├── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="hi">page.md</span><span style="color: #24292EFF"> &#x3C;!-- not a part of the post but holds information about the series, cover image for the series, tags etc. ---></span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">│       └── </span><span style="color: #24292EFF" data-highlighted-chars="" data-chars-id="rb">setup.md</span><span style="color: #24292EFF"> &#x3C;!-- Blog post ---></span></span>
<span data-line=""><span style="color: #24292EFF">├── src</span></span>
<span data-line=""><span style="color: #24292EFF">├── static </span></span>
<span data-line=""><span style="color: #24292EFF">├── svelte.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── tailwind.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── biome.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── components.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── mdsvex.config.js</span></span>
<span data-line=""><span style="color: #24292EFF">├── package.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── pnpm-lock.yaml</span></span>
<span data-line=""><span style="color: #24292EFF">├── postcss.config.cjs</span></span>
<span data-line=""><span style="color: #24292EFF">├── tsconfig.json</span></span>
<span data-line=""><span style="color: #24292EFF">├── README.md</span></span>
<span data-line=""><span style="color: #24292EFF">└── vite.config.ts</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(H2, "Components.h2").$$render(
        $$result,
        {
          id: "frontmatter-(for-series)",
          headerTag: "h2"
        },
        {},
        {
          default: () => {
            return `Frontmatter (for series)`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for <code data-svelte-h="svelte-1aow4w">page.md</code>`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">---</span></span>
<span data-line=""><span style="color: #FF757F">title</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">Guide on how to use this blog template</span></span>
<span data-line=""><span style="color: #FF757F">description</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">A guide on how to use this sveltekit + markdown blog.</span></span>
<span data-line=""><span style="color: #FF757F">date</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">2023-12-20</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #FF757F">tags</span><span style="color: #86E1FC">:</span></span>
<span data-line=""><span style="color: #B4C2F0">  - </span><span style="color: #C3E88D">SvelteKit</span></span>
<span data-line=""><span style="color: #B4C2F0">  - </span><span style="color: #C3E88D">MDsveX</span></span>
<span data-line=""><span style="color: #FF757F">image</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">https://res.cloudinary.com/practicaldev/image/fetch/s--YFzS8yLr--/c_imagga_scale,f_auto,fl_progressive,h_720,q_auto,w_1280/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9o5387e8s37g7r4i6dy.png</span></span>
<span data-line=""><span style="color: #FF757F">draft</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">false</span></span>
<span data-line=""><span style="color: #C8D3F5">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">---</span></span>
<span data-line=""><span style="color: #D32F2F">title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">Guide on how to use this blog template</span></span>
<span data-line=""><span style="color: #D32F2F">description</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">A guide on how to use this sveltekit + markdown blog.</span></span>
<span data-line=""><span style="color: #D32F2F">date</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'2023-12-20'</span></span>
<span data-line=""><span style="color: #D32F2F">tags</span><span style="color: #D32F2F">:</span></span>
<span data-line=""><span style="color: #24292EFF">  - </span><span style="color: #22863A">SvelteKit</span></span>
<span data-line=""><span style="color: #24292EFF">  - </span><span style="color: #22863A">MDsveX</span></span>
<span data-line=""><span style="color: #D32F2F">image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">https://res.cloudinary.com/practicaldev/image/fetch/s--YFzS8yLr--/c_imagga_scale,f_auto,fl_progressive,h_720,q_auto,w_1280/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9o5387e8s37g7r4i6dy.png</span></span>
<span data-line=""><span style="color: #D32F2F">draft</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">false</span></span>
<span data-line=""><span style="color: #24292EFF">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this is same as the one for individual blog posts and for actual posts in the series, the frontmatter is little different.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">---</span></span>
<span data-line=""><span style="color: #FF757F">title</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">Creating a new Blog</span></span>
<span data-line=""><span style="color: #FF757F">description</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">Let's look at how to create a new Blog (Indivdual &#x26; Series)</span></span>
<span data-line=""><span style="color: #FF757F">date</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">2023-12-20</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #FF757F">order</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">2</span></span>
<span data-line=""><span style="color: #FF757F">image</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #C3E88D">https://res.cloudinary.com/practicaldev/image/fetch/s--YFzS8yLr--/c_imagga_scale,f_auto,fl_progressive,h_720,q_auto,w_1280/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9o5387e8s37g7r4i6dy.png</span></span>
<span data-line=""><span style="color: #FF757F">draft</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">false</span></span>
<span data-line=""><span style="color: #C8D3F5">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">---</span></span>
<span data-line=""><span style="color: #D32F2F">title</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">Creating a new Blog</span></span>
<span data-line=""><span style="color: #D32F2F">description</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">Let's look at how to create a new Blog (Indivdual &#x26; Series)</span></span>
<span data-line=""><span style="color: #D32F2F">date</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'2023-12-20'</span></span>
<span data-line=""><span style="color: #D32F2F">order</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">2</span></span>
<span data-line=""><span style="color: #D32F2F">image</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">https://res.cloudinary.com/practicaldev/image/fetch/s--YFzS8yLr--/c_imagga_scale,f_auto,fl_progressive,h_720,q_auto,w_1280/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9o5387e8s37g7r4i6dy.png</span></span>
<span data-line=""><span style="color: #D32F2F">draft</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">false</span></span>
<span data-line=""><span style="color: #24292EFF">---</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `We have a new property called <code data-svelte-h="svelte-iluqjq">order</code>, which indicates the order of the particular post in that series. Additionally, <code data-svelte-h="svelte-bkivgp">image</code> and <code data-svelte-h="svelte-4ktypd">tags</code> are completely optional. If you do not specify them, the values from the cover folder (<code data-svelte-h="svelte-1aow4w">page.md</code>) are used. However, if you do specify them, the specified values are used instead. When it comes to tags, if you specify them, the tags from the specific post are combined with the tags declared in <code data-svelte-h="svelte-1aow4w">page.md</code>. This is particularly useful when you&#39;re writing a long series and each post is on a different topic. For example, if you&#39;re writing a Machine Learning Series, at some point, you&#39;re writing a post on Clustering algorithms, so that specific post should have its own tag.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for series blogs, the slug will be <code data-svelte-h="svelte-1lprsmt">cover folder</code> + <code data-svelte-h="svelte-1112t2l">a unique identifier</code> + <code data-svelte-h="svelte-1981cia">name of the .md file</code>`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "code-blocks", headerTag: "h2" }, {}, {
        default: () => {
          return `Code Blocks`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `This blog uses ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://rehype-pretty-code.netlify.app/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `rehype-pretty-code`;
              }
            }
          )} and ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://shiki.matsu.io/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `shiki`;
              }
            }
          )} for syntax highlighting with two different themes for light and dark mode. To configure code blocks to your style, take a look at <code data-svelte-h="svelte-948ldg">mdsvex.config.js</code>, <code data-svelte-h="svelte-1fgs43u">pre.svelte</code> and <code data-svelte-h="svelte-9wvbt6">markdown.postcss</code> files.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `You can create fenced code blocks by placing triple backticks <code data-svelte-h="svelte-liyzha">\`\`\`</code> before and after the code block. Place a blank line before and after code blocks to make the raw formatting easier to read.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Hello</span><span style="color: #86E1FC">"</span><span style="color: #B4C2F0">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">"Hello"</span><span style="color: #24292EFF">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `To display triple backticks in a fenced code block, wrap them inside quadruple backticks.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C099FF">&#96;&#96;&#96;py</span></span>
<span data-line=""><span style="color: #65BCFF">print</span><span style="color: #86E1FC">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Hello from Python 🐍</span><span style="color: #86E1FC">"</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C099FF">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">&#96;&#96;&#96;py</span></span>
<span data-line=""><span style="color: #6F42C1">print</span><span style="color: #212121">(</span><span style="color: #22863A">"Hello from Python 🐍"</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(H3, "Components.h3").$$render($$result, { id: "adding-title", headerTag: "h3" }, {}, {
        default: () => {
          return `Adding Title`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `if you provide a title with an extension, the code block will look like`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">"</span><span style="color: #C3E88D">Hello from TS</span><span style="color: #86E1FC">"</span><span style="color: #B4C2F0">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-1tecfsv">hello.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "hello.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">"Hello from TS"</span><span style="color: #24292EFF">)</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for rendering icons, it grabs the extension and maps it to the icon for that language. Again, you can totally change this behaviour in <code data-svelte-h="svelte-1fgs43u">pre.svelte</code> which is a custom component.`;
        }
      })} ${validate_component(H3, "Components.h3").$$render(
        $$result,
        {
          id: "inline-syntax-highlighting",
          headerTag: "h3"
        },
        {},
        {
          default: () => {
            return `Inline Syntax Highlighting`;
          }
        }
      )} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you can also do inline syntax highlighting. To use that`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": true,
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">&#96;System.out.println("This is a example of Inline Syntax Highlighting")&#123;:java&#125;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": true,
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">&#96;System.out.println("This is a example of Inline Syntax Highlighting")&#123;:java&#125;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this will become`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `<span data-rehype-pretty-code-fragment data-svelte-h="svelte-1bhbwm0"><code data-language="java" data-theme="dark"><span class="line"><span style="color: #FFC777">System</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">out</span><span style="color: #86E1FC">.</span><span style="color: #82AAFF">println</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">&quot;</span><span style="color: #C3E88D">This is a example of Inline Syntax Highlighting</span><span style="color: #86E1FC">&quot;</span><span style="color: #B4C2F0">)</span></span></code><code data-language="java" data-theme="light"><span class="line"><span style="color: #1976D2">System</span><span style="color: #212121">.</span><span style="color: #1976D2">out</span><span style="color: #212121">.</span><span style="color: #6F42C1">println</span><span style="color: #24292EFF">(</span><span style="color: #22863A">&quot;This is a example of Inline Syntax Highlighting&quot;</span><span style="color: #24292EFF">)</span></span></code></span>`;
        }
      })} ${validate_component(H3, "Components.h3").$$render($$result, { id: "word-highlighting", headerTag: "h3" }, {}, {
        default: () => {
          return `Word Highlighting`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `you can highlight individual words in your code with different colors.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;py /fibonacci/1-2#rb &#123;2-3&#125;</span></span>
<span data-line=""><span style="color: #C099FF">def</span><span style="color: #B4C2F0"> </span><span style="color: #82AAFF">fibonacci</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">n</span><span style="color: #B4C2F0">):</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">if</span><span style="color: #B4C2F0"> n </span><span style="color: #86E1FC">&#x3C;=</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">:</span><span style="color: #B4C2F0"> </span><span style="color: #858AA6"># base case</span></span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> n</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">else:</span></span>
<span data-line=""><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #B4C2F0">n </span><span style="color: #86E1FC">-</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">)</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">+</span><span style="color: #B4C2F0"> fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #B4C2F0">n </span><span style="color: #86E1FC">-</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">3</span><span style="color: #86E1FC">)</span><span style="color: #B4C2F0"> </span><span style="color: #858AA6"># [!code --]</span></span>
<span data-line=""><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #B4C2F0">n </span><span style="color: #86E1FC">-</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">)</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">+</span><span style="color: #B4C2F0"> fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #B4C2F0">n </span><span style="color: #86E1FC">-</span><span style="color: #B4C2F0"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">)</span><span style="color: #B4C2F0"> </span><span style="color: #858AA6"># [!code ++]</span></span>
<span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;py /fibonacci/1-2#rb &#123;2-3&#125;</span></span>
<span data-line=""><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fibonacci</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">n</span><span style="color: #24292EFF">):</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> n </span><span style="color: #D32F2F">&#x3C;=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">1</span><span style="color: #212121">:</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5"># base case</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> n</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">else</span><span style="color: #212121">:</span></span>
<span data-line=""><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">2</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">3</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5"># [!code --]</span></span>
<span data-line=""><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">1</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">2</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5"># [!code ++]</span></span>
<span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this will become`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF" data-highlighted-chars="" data-chars-id="rb">fibonacci</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">n</span><span style="color: #B4C2F0">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">if</span><span style="color: #C8D3F5"> n </span><span style="color: #86E1FC">&#x3C;=</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #858AA6"># base case</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC">return</span><span style="color: #C8D3F5"> n</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">else:</span></span>
<span data-line=""><span style="color: #86E1FC">return</span><span style="color: #C8D3F5"> </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="rb">fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">+</span><span style="color: #C8D3F5"> fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">3</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #858AA6"># [!code --]</span></span>
<span data-line=""><span style="color: #86E1FC">return</span><span style="color: #C8D3F5"> fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">+</span><span style="color: #C8D3F5"> fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #858AA6"># [!code ++]</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "py",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1" data-highlighted-chars="" data-chars-id="rb">fibonacci</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">n</span><span style="color: #24292EFF">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> n </span><span style="color: #D32F2F">&#x3C;=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">1</span><span style="color: #212121">:</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5"># base case</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> n</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">else</span><span style="color: #212121">:</span></span>
<span data-line=""><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1" data-highlighted-chars="" data-chars-id="rb">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">2</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">3</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5"># [!code --]</span></span>
<span data-line=""><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">1</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">2</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5"># [!code ++]</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for other languages, like js or ts`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;js title="code-diff.js"</span></span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #B4C2F0"> </span><span style="color: #C099FF">function</span><span style="color: #B4C2F0"> </span><span style="color: #82AAFF">foo</span><span style="color: #B4C2F0">() &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">hewwo</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// [!code --] // this should be hello</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">hello</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// [!code ++]</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;js title="code-diff.js"</span></span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">function</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">foo</span><span style="color: #24292EFF">() &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'hewwo'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// [!code --] // this should be hello</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'hello'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// [!code ++]</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span>
<span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this will become`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">function</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">foo</span><span style="color: #B4C2F0">()</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">hewwo</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// [!code --] // this should be hello</span></span>
<span data-line=""><span style="color: #B4C2F0">  </span><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">hello</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">) </span><span style="color: #858AA6">// [!code ++]</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="js" data-theme="light" data-svelte-h="svelte-vomlsa">code-diff.js</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light",
          __title__: "code-diff.js"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">function</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">foo</span><span style="color: #24292EFF">() &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'hewwo'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// [!code --] // this should be hello</span></span>
<span data-line=""><span style="color: #24292EFF">  </span><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'hello'</span><span style="color: #24292EFF">) </span><span style="color: #C2C3C5">// [!code ++]</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(H2, "Components.h2").$$render($$result, { id: "math-blocks", headerTag: "h2" }, {}, {
        default: () => {
          return `Math Blocks`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for rendering math equations, i gave a detailed explanation ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "/blog/getting-started#math-blocks"
            },
            {},
            {
              default: () => {
                return `here`;
              }
            }
          )}. Earlier it wasn&#39;t possible to add inline equations without using an external component but I created a plugin that allows you to insert inline math equations.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `here&#39;s the plugin`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="js" data-theme="dark" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">katex_inline</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">()</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">=></span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">tree</span><span style="color: #B4C2F0">)</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">=></span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #65BCFF">visit</span><span style="color: #B4C2F0">(</span><span style="color: #C8D3F5">tree</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">text</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> (</span><span style="color: #FCA7EA">node</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #FCA7EA">index</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #FCA7EA">parent</span><span style="color: #B4C2F0">) </span><span style="color: #C099FF">=></span><span style="color: #B4C2F0"> &#123;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #B4C2F0">        </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">regex</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4F9F8"> </span><span style="color: #86E1FC">/$$</span><span style="color: #FF757F">(</span><span style="color: #C099FF">.</span><span style="color: #FCA7EA">*?</span><span style="color: #FF757F">)</span><span style="color: #86E1FC">$$/</span><span style="color: #C099FF">g</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #C099FF">let</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">match</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #86E1FC">while</span><span style="color: #B4C2F0"> ((</span><span style="color: #C8D3F5">match</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">regex</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">exec</span><span style="color: #B4C2F0">(</span><span style="color: #FFC777">node</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">value</span><span style="color: #B4C2F0">)) </span><span style="color: #86E1FC">!==</span><span style="color: #B4C2F0"> </span><span style="color: #7F85A3">null</span><span style="color: #B4C2F0">) &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">equation</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">match</span><span style="color: #86E1FC">[</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">].</span><span style="color: #65BCFF">trim</span><span style="color: #B4C2F0">()</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">            </span><span style="color: #858AA6">// Replace double backslashes with single backslashes</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">cleanedEquation</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">equation</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">replace</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">/\\\\/</span><span style="color: #C099FF">g</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'\\'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">str</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">katex</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">renderToString</span><span style="color: #B4C2F0">(</span><span style="color: #C8D3F5">cleanedEquation</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #4FD6BE">throwOnError</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF966C">true</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #4FD6BE">errorColor</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">#cc0000</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #4FD6BE">strict</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">warn</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #4FD6BE">output</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">htmlAndMathml</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #4FD6BE">trust</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF966C">false</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #4FD6BE">macros</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#123;</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'\\</span><span style="color: #C3E88D">f</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">#1f(#2)</span><span style="color: #86E1FC">'</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #A9B8E8">            </span><span style="color: #B4C2F0">&#125;)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">            </span><span style="color: #858AA6">// Escape the HTML for Svelte</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">escapedHTML</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #65BCFF">escapeSvelte</span><span style="color: #B4C2F0">(</span><span style="color: #C8D3F5">str</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">            </span><span style="color: #858AA6">// Replace the matched portion with the escaped HTML</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">before</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">node</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">value</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">slice</span><span style="color: #B4C2F0">(</span><span style="color: #FF966C">0</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">match</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">index</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">after</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">node</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">value</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">slice</span><span style="color: #B4C2F0">(</span><span style="color: #FFC777">match</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">index</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">+</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">match</span><span style="color: #86E1FC">[</span><span style="color: #FF966C">0</span><span style="color: #86E1FC">].</span><span style="color: #A9B8E8">length</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">renderedEquation</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">&#x3C;span class="text-base">&#123;@html &#96;</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">+</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">escapedHTML</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">+</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">&#96;&#125;&#x3C;/span></span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">            </span><span style="color: #858AA6">// Create a new 'raw' node with the rendered equation</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #C099FF">const</span><span style="color: #B4C2F0"> </span><span style="color: #FF98A4">rawNode</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">=</span><span style="color: #B4C2F0"> &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #4FD6BE">type</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">raw</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #4FD6BE">value</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">renderedEquation</span></span>
<span data-line=""><span style="color: #A9B8E8">            </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">            </span><span style="color: #858AA6">// Insert the 'raw' node into the parent's children array</span></span>
<span data-line=""><span style="color: #B4C2F0">            </span><span style="color: #FFC777">parent</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">children</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">splice</span><span style="color: #B4C2F0">(</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #C8D3F5">index</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #B4C2F0">                </span><span style="color: #FF757F; font-weight: bold">...</span><span style="color: #86E1FC">[</span><span style="color: #B4C2F0">&#123; </span><span style="color: #4FD6BE">type</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">text</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #4FD6BE">value</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">before</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">rawNode</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> &#123; </span><span style="color: #4FD6BE">type</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">text</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #4FD6BE">value</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">after</span><span style="color: #A9B8E8"> </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">]</span></span>
<span data-line=""><span style="color: #B4C2F0">            )</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">        &#125;</span></span>
<span data-line=""><span style="color: #B4C2F0">    &#125;)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "js",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="js" data-theme="light" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">katex_inline</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> () </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> (tree) </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #6F42C1">visit</span><span style="color: #24292EFF">(tree</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'text'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> (node</span><span style="color: #212121">,</span><span style="color: #24292EFF"> index</span><span style="color: #212121">,</span><span style="color: #24292EFF"> parent) </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">regex</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #22863A"> /$$(.</span><span style="color: #D32F2F">*?</span><span style="color: #22863A">)$$/</span><span style="color: #D32F2F">g</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">let</span><span style="color: #24292EFF"> match;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">while</span><span style="color: #24292EFF"> ((match </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">regex</span><span style="color: #6F42C1">.exec</span><span style="color: #24292EFF">(</span><span style="color: #1976D2">node</span><span style="color: #24292EFF">.value)) </span><span style="color: #D32F2F">!==</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">null</span><span style="color: #24292EFF">) &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">equation</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> match[</span><span style="color: #1976D2">1</span><span style="color: #24292EFF">]</span><span style="color: #6F42C1">.trim</span><span style="color: #24292EFF">();</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #C2C3C5">// Replace double backslashes with single backslashes</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">cleanedEquation</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">equation</span><span style="color: #6F42C1">.replace</span><span style="color: #24292EFF">(</span><span style="color: #22863A">/\\\\/</span><span style="color: #D32F2F">g</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'\\'</span><span style="color: #24292EFF">);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">str</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">katex</span><span style="color: #6F42C1">.renderToString</span><span style="color: #24292EFF">(cleanedEquation</span><span style="color: #212121">,</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">                throwOnError</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">true</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                errorColor</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'#cc0000'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                strict</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'warn'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                output</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'htmlAndMathml'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                trust</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">false</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                macros</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123; </span><span style="color: #22863A">'\\f'</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'#1f(#2)'</span><span style="color: #24292EFF"> &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">            &#125;);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #C2C3C5">// Escape the HTML for Svelte</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">escapedHTML</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">escapeSvelte</span><span style="color: #24292EFF">(str);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #C2C3C5">// Replace the matched portion with the escaped HTML</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">before</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">node</span><span style="color: #6F42C1">.</span><span style="color: #1976D2">value</span><span style="color: #6F42C1">.slice</span><span style="color: #24292EFF">(</span><span style="color: #1976D2">0</span><span style="color: #212121">,</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">match</span><span style="color: #24292EFF">.index);</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">after</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">node</span><span style="color: #6F42C1">.</span><span style="color: #1976D2">value</span><span style="color: #6F42C1">.slice</span><span style="color: #24292EFF">(</span><span style="color: #1976D2">match</span><span style="color: #24292EFF">.index </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> match[</span><span style="color: #1976D2">0</span><span style="color: #24292EFF">].</span><span style="color: #1976D2">length</span><span style="color: #24292EFF">);</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">renderedEquation</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'&#x3C;span class="text-base">&#123;@html &#96;'</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> escapedHTML </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'&#96;&#125;&#x3C;/span>'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #C2C3C5">// Create a new 'raw' node with the rendered equation</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">rawNode</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">                type</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'raw'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                value</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> renderedEquation</span></span>
<span data-line=""><span style="color: #24292EFF">            &#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #C2C3C5">// Insert the 'raw' node into the parent's children array</span></span>
<span data-line=""><span style="color: #24292EFF">            </span><span style="color: #1976D2">parent</span><span style="color: #6F42C1">.</span><span style="color: #1976D2">children</span><span style="color: #6F42C1">.splice</span><span style="color: #24292EFF">(</span></span>
<span data-line=""><span style="color: #24292EFF">                index</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                </span><span style="color: #1976D2">1</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">                </span><span style="color: #D32F2F">...</span><span style="color: #24292EFF">[&#123; type</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'text'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> value</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> before &#125;</span><span style="color: #212121">,</span><span style="color: #24292EFF"> rawNode</span><span style="color: #212121">,</span><span style="color: #24292EFF"> &#123; type</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'text'</span><span style="color: #212121">,</span><span style="color: #24292EFF"> value</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> after &#125;]</span></span>
<span data-line=""><span style="color: #24292EFF">            );</span></span>
<span data-line=""><span style="color: #24292EFF">        &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;);</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `to write inline equations use <code data-svelte-h="svelte-17n17tq">$$ $$</code> and wrap your KaTeX inside.`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">$$(a+b)^2 = a^2 + b^2 + 2ab$$</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">$$(a+b)^2 = a^2 + b^2 + 2ab$$</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this becomes <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>a</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">(a+b)^2 = a^2 + b^2 + 2ab</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">2</span><span class="mord mathnormal">ab</span></span></span></span>`}<!-- HTML_TAG_END --></span>`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `for block equations`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="rb">math</span></span>
<span data-line=""><span style="color: #86E1FC">&#92;nabla &#92;times \\mathbf&#123;B&#125; = \\mu_0 \\left(\\mathbf&#123;J&#125; + \\varepsilon_0 \\frac&#123;\\partial \\mathbf&#123;E&#125;&#125;&#123;\\partial t&#125;&#92;right)</span></span>
<span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="md" data-theme="light" data-svelte-h="svelte-15q5i4d">math.md</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "md",
          "data-theme": "light",
          __title__: "math.md"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span><span style="color: #2B5581" data-highlighted-chars="" data-chars-id="rb">math</span></span>
<span data-line=""><span style="color: #2B5581">&#92;nabla &#92;times \\mathbf&#123;B&#125; = \\mu_0 \\left(\\mathbf&#123;J&#125; + \\varepsilon_0 \\frac&#123;\\partial \\mathbf&#123;E&#125;&#125;&#123;\\partial t&#125;&#92;right)</span></span>
<span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `this becomes`;
        }
      })} <span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">B</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><mi mathvariant="bold">J</mi><mo>+</mo><msub><mi>ε</mi><mn>0</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">E</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
abla 	imes mathbf{B} = mu_0 left(mathbf{J} + \varepsilon_0 \frac{partial mathbf{E}}{partial t}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathbf">J</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathbf">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `in the next part, we&#39;ll look at other configurations.`;
        }
      })} ${validate_component(Hr, "Components.hr").$$render($$result, {}, {}, {})}`;
    }
  })}`;
});
const __vite_glob_1_1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Create_new_blog,
  metadata: metadata$2
}, Symbol.toStringTag, { value: "Module" }));
const metadata$1 = {
  "title": "Guide on how to use this blog template",
  "description": "A guide on how to use this sveltekit + markdown blog.",
  "date": "2023-12-16",
  "tags": ["SvelteKit", "MDsveX"],
  "image": "https://res.cloudinary.com/practicaldev/image/fetch/s--YFzS8yLr--/c_imagga_scale,f_auto,fl_progressive,h_720,q_auto,w_1280/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9o5387e8s37g7r4i6dy.png",
  "draft": false
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata$1), {}, {})}`;
});
const __vite_glob_1_2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page,
  metadata: metadata$1
}, Symbol.toStringTag, { value: "Module" }));
const metadata = {
  "title": "Getting Started",
  "description": "Setting up the Portfolio + Blog.",
  "date": "2023-12-20",
  "order": 1,
  "draft": false
};
const Setup = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Layout, "Layout_MDSVEX_DEFAULT").$$render($$result, Object.assign({}, $$props, metadata), {}, {
    default: () => {
      return `${validate_component(H2, "Components.h2").$$render($$result, { id: "introduction", headerTag: "h2" }, {}, {
        default: () => {
          return `Introduction`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Welcome, this will guide you through this template and how to use it. This is a SvelteKit + MDsveX Personal website and a blog completely designed with ${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://shadcn-svelte.com/",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `Shadcn-Svelte`;
              }
            }
          )}, it has everything you need get started and you can fully customise it.
${validate_component(A, "Components.a").$$render(
            $$result,
            {
              href: "https://github.com/PrabhuKiran8790/prabhukirankonda-portfolio.git",
              rel: "nofollow"
            },
            {},
            {
              default: () => {
                return `repo link`;
              }
            }
          )}`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "features", headerTag: "h2" }, {}, {
        default: () => {
          return `Features`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `it&#39;s got ton of features that you don&#39;t wanna miss out.`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Tailwind CSS for styling`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `SvelteKit as meta framework${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `with shallow routing when clicking on tags to instantly see the posts based on tags. Click on the tag to see.  ${validate_component(Tag, "Tag").$$render(
                        $$result,
                        {
                          tag: "SvelteKit",
                          href: `/tags/sveltekit`,
                          shallow: true
                        },
                        {},
                        {}
                      )}`;
                    }
                  })}`;
                }
              })}`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `${validate_component(A, "Components.a").$$render(
                $$result,
                {
                  href: "https://shadcn-svelte.com/",
                  rel: "nofollow"
                },
                {},
                {
                  default: () => {
                    return `Shadcn-Svelte`;
                  }
                }
              )} for UI Components (${validate_component(A, "Components.a").$$render(
                $$result,
                {
                  href: "https://x.com/huntabyte",
                  rel: "nofollow"
                },
                {},
                {
                  default: () => {
                    return `@huntabyte`;
                  }
                }
              )})`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Light and Dark mode`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `different themes for code blocks based on color scheme.`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Individual blog posts and series blog posts (you&#39;re reading a series)`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `Syntax Highlighting${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                default: () => {
                  return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `with toast notifications for copy feedback`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `individual words highlighting<div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                        $$result,
                        {
                          class: "Moonlight II",
                          tabindex: "0",
                          "data-language": "py",
                          "data-theme": "dark"
                        },
                        {},
                        {
                          default: () => {
                            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="py" data-theme="dark" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #C099FF">def</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #B4C2F0">(</span><span style="color: #FCA7EA">n</span><span style="color: #B4C2F0">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">if</span><span style="color: #C8D3F5"> n </span><span style="color: #86E1FC">&#x3C;=</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #858AA6"># base case</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="hi">return</span><span style="color: #C8D3F5"> n</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #86E1FC">else:</span></span>
<span data-line=""><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="hi">return</span><span style="color: #C8D3F5"> </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">1</span><span style="color: #86E1FC">)</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">+</span><span style="color: #C8D3F5"> </span><span style="color: #C8D3F5" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n </span><span style="color: #86E1FC">-</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">2</span><span style="color: #86E1FC">)</span></span></code>`}<!-- HTML_TAG_END -->`;
                          }
                        }
                      )}<div data-rehype-pretty-code-title data-language="py" data-theme="light" data-svelte-h="svelte-tlfsmo">fib.py</div>${validate_component(Pre, "Components.pre").$$render(
                        $$result,
                        {
                          class: "min-light",
                          tabindex: "0",
                          "data-language": "py",
                          "data-theme": "light",
                          __title__: "fib.py"
                        },
                        {},
                        {
                          default: () => {
                            return `<!-- HTML_TAG_START -->${`<code data-line-numbers="" data-language="py" data-theme="light" style="display: grid;" data-line-numbers-max-digits="2"><span data-line=""><span style="color: #D32F2F">def</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #24292EFF">(</span><span style="color: #FF9800">n</span><span style="color: #24292EFF">):</span></span>
<span data-line="" data-highlighted-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> n </span><span style="color: #D32F2F">&#x3C;=</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">1</span><span style="color: #212121">:</span><span style="color: #24292EFF"> </span><span style="color: #C2C3C5"># base case</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F" data-highlighted-chars="" data-chars-id="hi">return</span><span style="color: #24292EFF"> n</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">else</span><span style="color: #212121">:</span></span>
<span data-line=""><span style="color: #D32F2F" data-highlighted-chars="" data-chars-id="hi">return</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">1</span><span style="color: #212121">)</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">+</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1" data-highlighted-chars="" data-chars-id="yb">fibonacci</span><span style="color: #212121">(n </span><span style="color: #D32F2F">-</span><span style="color: #212121"> </span><span style="color: #1976D2">2</span><span style="color: #212121">)</span></span></code>`}<!-- HTML_TAG_END -->`;
                          }
                        }
                      )}</div>`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `inline syntax highlighting example: <span data-rehype-pretty-code-fragment data-svelte-h="svelte-14h8fuq"><code data-language="js" data-theme="dark"><span class="line"><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">&quot;</span><span style="color: #C3E88D">Hey there</span><span style="color: #86E1FC">&quot;</span><span style="color: #B4C2F0">)</span></span></code><code data-language="js" data-theme="light"><span class="line"><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">&quot;Hey there&quot;</span><span style="color: #24292EFF">)</span></span></code></span>`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `render language icon if title with an extension is provided.<div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                        $$result,
                        {
                          class: "Moonlight II",
                          tabindex: "0",
                          "data-language": "md",
                          "data-theme": "dark"
                        },
                        {},
                        {
                          default: () => {
                            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;js </span><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="rb">title</span><span style="color: #86E1FC">="</span><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="ul">example</span><span style="color: #86E1FC" data-highlighted-chars="" data-chars-id="yb">.js</span><span style="color: #86E1FC">"</span></span>
<span data-line=""><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Hello from JS</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
                          }
                        }
                      )}${validate_component(Pre, "Components.pre").$$render(
                        $$result,
                        {
                          class: "min-light",
                          tabindex: "0",
                          "data-language": "md",
                          "data-theme": "light"
                        },
                        {},
                        {
                          default: () => {
                            return `<!-- HTML_TAG_START -->${`<code data-language="md" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;js </span><span style="color: #2B5581" data-highlighted-chars="" data-chars-id="rb">title</span><span style="color: #2B5581">="</span><span style="color: #2B5581" data-highlighted-chars="" data-chars-id="ul">example</span><span style="color: #2B5581" data-highlighted-chars="" data-chars-id="yb">.js</span><span style="color: #2B5581">"</span></span>
<span data-line=""><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'Hello from JS'</span><span style="color: #24292EFF">);</span></span>
<span data-line=""><span style="color: #2B5581">&#96;&#96;&#96;</span></span></code>`}<!-- HTML_TAG_END -->`;
                          }
                        }
                      )}</div>this will become<div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
                        $$result,
                        {
                          class: "Moonlight II",
                          tabindex: "0",
                          "data-language": "js",
                          "data-theme": "dark"
                        },
                        {},
                        {
                          default: () => {
                            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #FFC777">console</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">log</span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Hello from JS</span><span style="color: #86E1FC">'</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
                          }
                        }
                      )}<div data-rehype-pretty-code-title data-language="js" data-theme="light" data-svelte-h="svelte-1gdg245">example.js</div>${validate_component(Pre, "Components.pre").$$render(
                        $$result,
                        {
                          class: "min-light",
                          tabindex: "0",
                          "data-language": "js",
                          "data-theme": "light",
                          __title__: "example.js"
                        },
                        {},
                        {
                          default: () => {
                            return `<!-- HTML_TAG_START -->${`<code data-language="js" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #1976D2">console</span><span style="color: #6F42C1">.log</span><span style="color: #24292EFF">(</span><span style="color: #22863A">'Hello from JS'</span><span style="color: #24292EFF">);</span></span></code>`}<!-- HTML_TAG_END -->`;
                          }
                        }
                      )}</div>${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                        default: () => {
                          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                            default: () => {
                              return `while icons are available for few languages like JS/TS, Py, Svelte, you can add for more languages if you want.`;
                            }
                          })}`;
                        }
                      })}`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `${validate_component(A, "Components.a").$$render(
                        $$result,
                        {
                          href: "https://mdsvex.pngwn.io/",
                          rel: "nofollow"
                        },
                        {},
                        {
                          default: () => {
                            return `MDsveX`;
                          }
                        }
                      )} preprocessor to support markdown files`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Custom Components`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `use svelte components inside markdown${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                        default: () => {
                          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                            default: () => {
                              return `example<div class="flex items-center gap-4">try changing the theme <span class="ml-3" data-svelte-h="svelte-wg1v4k">👉</span> ${validate_component(Theme_toggle, "ThemeToggle").$$render($$result, {}, {}, {})}</div>`;
                            }
                          })}`;
                        }
                      })}`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Table of Contents`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Giscus Comments (based on Github Discussions)`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Projects Page`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Math support using KaTeX${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
                        default: () => {
                          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                            default: () => {
                              return `examples: <code data-svelte-h="svelte-t4njkt">Inline</code>: <span class="text-base"><!-- HTML_TAG_START -->${`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">B</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><mi mathvariant="bold">J</mi><mo>+</mo><msub><mi>ε</mi><mn>0</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">E</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">&#92;nabla &#92;times mathbf&#123;B&#125; = mu_0 left(mathbf&#123;J&#125; + \varepsilon_0 \frac&#123;partial mathbf&#123;E&#125;&#125;&#123;partial t&#125;&#92;right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2301em;vertical-align:-0.35em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathbf">J</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathbf mtight">E</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span>`;
                            }
                          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                            default: () => {
                              return `Block equations (here are my favourite ${validate_component(A, "Components.a").$$render(
                                $$result,
                                {
                                  href: "https://en.wikipedia.org/wiki/Maxwell%27s_equations#:~:text=Maxwell's%20equations%2C%20or%20Maxwell%E2%80%93Heaviside,classical%20optics%2C%20and%20electric%20circuits.",
                                  rel: "nofollow"
                                },
                                {},
                                {
                                  default: () => {
                                    return `Maxwells&#39;s Equations`;
                                  }
                                }
                              )})<span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>⋅</mo><mi mathvariant="bold">E</mi><mo>=</mo><mfrac><mi>ρ</mi><msub><mi>ε</mi><mn>0</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">
abla cdot mathbf{E} = \frac{\rho}{\varepsilon_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9436em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ρ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span><span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>⋅</mo><mi mathvariant="bold">B</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">
abla cdot mathbf{B} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span>`}<!-- HTML_TAG_END --></span><span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">E</mi><mo>=</mo><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">B</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">
abla 	imes mathbf{E} = -\frac{partial mathbf{B}}{partial t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathbf">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span><span class="text-sm md:text-lg"><!-- HTML_TAG_START -->${`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mi mathvariant="bold">B</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><mi mathvariant="bold">J</mi><mo>+</mo><msub><mi>ε</mi><mn>0</mn></msub><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="bold">E</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">
abla 	imes mathbf{B} = mu_0 left(mathbf{J} + \varepsilon_0 \frac{partial mathbf{E}}{partial t}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathbf">J</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathbf">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span>`}<!-- HTML_TAG_END --></span>`;
                            }
                          })}`;
                        }
                      })}`;
                    }
                  })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
                    default: () => {
                      return `Mobile friendly interface`;
                    }
                  })}`;
                }
              })}`;
            }
          })}`;
        }
      })} ${validate_component(H2, "Components.h2").$$render($$result, { id: "how-to-use?", headerTag: "h2" }, {}, {
        default: () => {
          return `How to Use?`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `In this section we&#39;ll dicsuss about how to setup quicky and get started.`;
        }
      })} ${validate_component(H3, "Components.h3").$$render($$result, { id: "installation", headerTag: "h3" }, {}, {
        default: () => {
          return `Installation`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `To install, clone the repo using`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "shell",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="shell" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">git clone https://github.com/PrabhuKiran8790/prabhukirankonda-portfolio.git</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "shell",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="shell" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">git clone https://github.com/PrabhuKiran8790/prabhukirankonda-portfolio.git</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `install the node modules`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "shell",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="shell" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #c8d3f5">cd prabhukirankonda-portfolio &#x26;&#x26; pnpm i</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "shell",
          "data-theme": "light"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="shell" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292eff">cd prabhukirankonda-portfolio &#x26;&#x26; pnpm i</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `and start editing the following files`;
        }
      })} ${validate_component(Ul, "Components.ul").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-19849nh">$lib/config.ts</code> which has all the links`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-srxtd2">about/about.md</code> to change the about page`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-15uelqh">$lib/assets</code> for favicon and image`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-1pwm3y0">$lib/components/site/hero.svelte</code> to change the home page`;
            }
          })} ${validate_component(Li, "Components.li").$$render($$result, {}, {}, {
            default: () => {
              return `<code data-svelte-h="svelte-1chhvv5">$lib/projects.ts</code> to change your projects.`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `let&#39;s have a look at <code data-svelte-h="svelte-19849nh">$lib/config.ts</code>`;
        }
      })} <div data-rehype-pretty-code-fragment>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "Moonlight II",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "dark"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">LinkedIn</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">X</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">$lib/components/site/icons</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123; </span><span style="color: #C8D3F5">FileText</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Github</span><span style="color: #86E1FC">,</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">Mail</span><span style="color: #B4C2F0"> &#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">lucide-svelte</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">routesType</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C099FF">type</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">socialsType</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">typeof</span><span style="color: #C8D3F5"> Github</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">class</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6">// nav routes</span></span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">routes</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">routesType</span><span style="color: #86E1FC">[]</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Blog</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/blog</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Tags</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/tags</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Projects</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/projects</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">name</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">About</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">link</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/about</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6">// social icons with links</span></span>
<span data-line=""><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">socials</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">socialsType</span><span style="color: #86E1FC">[]</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">[</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://github.com/prabhukiran8790</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">Github</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">GitHub</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://linkedin.com/in/PrabhuKiranKonda</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">LinkedIn</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">LinkedIn</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">https://x.com/prabhukirantwt</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #FF98A4">X</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Twitter</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">class</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">h-4 w-4</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">mailto:prabhukiran426@gmail.com</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">Mail</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Mail</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">class</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">h-4 w-4</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">href</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">/Prabhu Kiran Konda Resume.pdf</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">icon</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #C8D3F5">FileText</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">        </span><span style="color: #4FD6BE">display</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Resume</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #A9B8E8">    </span><span style="color: #B4C2F0">&#125;</span></span>
<span data-line=""><span style="color: #86E1FC">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #82AAFF">getSocials</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">(</span><span style="color: #86E1FC">&#123;</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">exclude</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">&#125;:</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span><span style="color: #C8D3F5"> </span><span style="color: #4FD6BE">exclude</span><span style="color: #86E1FC">?:</span><span style="color: #C8D3F5"> </span><span style="color: #FF966C">string</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#125;</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;&#125;)</span><span style="color: #86E1FC">:</span><span style="color: #C8D3F5"> </span><span style="color: #FFC777">socialsType</span><span style="color: #86E1FC">[]</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">=></span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">if</span><span style="color: #B4C2F0"> (</span><span style="color: #C8D3F5">exclude</span><span style="color: #B4C2F0">) &#123;</span></span>
<span data-line=""><span style="color: #B4C2F0">        </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">socials</span><span style="color: #86E1FC">.</span><span style="color: #65BCFF">filter</span><span style="color: #B4C2F0">((</span><span style="color: #FCA7EA">social</span><span style="color: #B4C2F0">) </span><span style="color: #C099FF">=></span><span style="color: #B4C2F0"> </span><span style="color: #FFC777">social</span><span style="color: #86E1FC">.</span><span style="color: #A9B8E8">display</span><span style="color: #B4C2F0"> </span><span style="color: #86E1FC">!==</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">exclude</span><span style="color: #B4C2F0">)</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">    &#125;</span></span>
<span data-line=""><span style="color: #B4C2F0">    </span><span style="color: #86E1FC">return</span><span style="color: #B4C2F0"> </span><span style="color: #C8D3F5">socials</span><span style="color: #86E1FC">;</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #86E1FC">export</span><span style="color: #C8D3F5"> </span><span style="color: #C099FF">const</span><span style="color: #C8D3F5"> </span><span style="color: #FF98A4">githubConfig</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> </span><span style="color: #B4C2F0">&#123;</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">username</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">PrabhuKiran8790</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">repo</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">prabhukirankonda-portfolio</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">    </span><span style="color: #4FD6BE">branch</span><span style="color: #86E1FC">:</span><span style="color: #A9B8E8"> </span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">main</span><span style="color: #86E1FC">'</span></span>
<span data-line=""><span style="color: #B4C2F0">&#125;</span><span style="color: #86E1FC">;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}<div data-rehype-pretty-code-title data-language="ts" data-theme="light" data-svelte-h="svelte-zg7qxp">lib/config.ts</div>${validate_component(Pre, "Components.pre").$$render(
        $$result,
        {
          class: "min-light",
          tabindex: "0",
          "data-language": "ts",
          "data-theme": "light",
          __title__: "lib/config.ts"
        },
        {},
        {
          default: () => {
            return `<!-- HTML_TAG_START -->${`<code data-language="ts" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; LinkedIn</span><span style="color: #212121">,</span><span style="color: #24292EFF"> X &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'$lib/components/site/icons'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> &#123; FileText</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Github</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Mail &#125; </span><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'lucide-svelte'</span><span style="color: #24292EFF">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">routesType</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">type</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">socialsType</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">typeof</span><span style="color: #24292EFF"> Github;</span></span>
<span data-line=""><span style="color: #24292EFF">    display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">    class</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF">;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5">// nav routes</span></span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">routes</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">routesType</span><span style="color: #24292EFF">[] </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Blog'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/blog'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Tags'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/tags'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Projects'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/projects'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        name</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'About'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        link</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/about'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5">// social icons with links</span></span>
<span data-line=""><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">socials</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">socialsType</span><span style="color: #24292EFF">[] </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> [</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://github.com/prabhukiran8790'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> Github</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'GitHub'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://linkedin.com/in/PrabhuKiranKonda'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> LinkedIn</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'LinkedIn'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'https://x.com/prabhukirantwt'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">X</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Twitter'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        class</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'h-4 w-4'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'mailto:prabhukiran426@gmail.com'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> Mail</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Mail'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        class</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'h-4 w-4'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        href</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'/Prabhu Kiran Konda Resume.pdf'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        icon</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> FileText</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">        display</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'Resume'</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">];</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">getSocials</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> (&#123; exclude &#125;</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> &#123; exclude</span><span style="color: #D32F2F">?:</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">string</span><span style="color: #24292EFF"> &#125; </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;&#125;)</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">socialsType</span><span style="color: #24292EFF">[] </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">if</span><span style="color: #24292EFF"> (exclude) &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">        </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">socials</span><span style="color: #6F42C1">.filter</span><span style="color: #24292EFF">((social) </span><span style="color: #D32F2F">=></span><span style="color: #24292EFF"> </span><span style="color: #1976D2">social</span><span style="color: #24292EFF">.display </span><span style="color: #D32F2F">!==</span><span style="color: #24292EFF"> exclude);</span></span>
<span data-line=""><span style="color: #24292EFF">    &#125;</span></span>
<span data-line=""><span style="color: #24292EFF">    </span><span style="color: #D32F2F">return</span><span style="color: #24292EFF"> socials;</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #D32F2F">export</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">const</span><span style="color: #24292EFF"> </span><span style="color: #1976D2">githubConfig</span><span style="color: #24292EFF"> </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> &#123;</span></span>
<span data-line=""><span style="color: #24292EFF">    username</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'PrabhuKiran8790'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    repo</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'prabhukirankonda-portfolio'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #24292EFF">    branch</span><span style="color: #D32F2F">:</span><span style="color: #24292EFF"> </span><span style="color: #22863A">'main'</span></span>
<span data-line=""><span style="color: #24292EFF">&#125;;</span></span></code>`}<!-- HTML_TAG_END -->`;
          }
        }
      )}</div> ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `To ensure that your local images, located in the <code data-svelte-h="svelte-1x1zqph">posts/[slug]</code> folder, can be converted to GitHub URLs, it&#39;s essential to include your <code data-svelte-h="svelte-1kwnkx5">githubConfig</code> in the <code data-svelte-h="svelte-yapukx">config.ts</code> file. This is particularly useful when you want to include images in your blog posts and prefer to store them in the same folder as your post for better organization.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `However, there&#39;s a caveat – assets in other than public folder (static), won&#39;t be processed by Vite. As a result, these images won&#39;t have a definite URL. To obtain the URL, you&#39;ll need to incorporate your <code data-svelte-h="svelte-1kwnkx5">githubConfig</code>, which transforms your local images into GitHub raw URL format. This ensures that when you deploy your application, the images will correctly point to your GitHub repository.`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `Alternatively, you can place your images directly in the static folder and access them using <code data-svelte-h="svelte-3m7v69">/</code> which points to static folder. example: <code data-svelte-h="svelte-bosllr">/image.png</code> and you also get Vite Image Optimisation.`;
        }
      })} ${validate_component(Blockquote, "Components.blockquote").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(P, "Components.p").$$render($$result, {}, {}, {
            default: () => {
              return `Always use a CDN for better performance.`;
            }
          })}`;
        }
      })} ${validate_component(P, "Components.p").$$render($$result, {}, {}, {
        default: () => {
          return `see the next part on How to write blogs`;
        }
      })} ${validate_component(Hr, "Components.hr").$$render($$result, {}, {}, {})}`;
    }
  })}`;
});
const __vite_glob_1_3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Setup,
  metadata
}, Symbol.toStringTag, { value: "Module" }));
const getPosts = async () => {
  let posts = [];
  const mdPaths = /* @__PURE__ */ Object.assign({ "/posts/authjs-sveltekit-prisma/page.md": __vite_glob_0_0, "/posts/dimensionality-reduction-using-auto-encoders/page.md": __vite_glob_0_1, "/posts/getting-started/page.md": __vite_glob_0_2, "/posts/gradient-descent/page.md": __vite_glob_0_3, "/posts/linear-regression-from-scratch/page.md": __vite_glob_0_4, "/posts/metadata-extraction-langchain/page.md": __vite_glob_0_5 });
  for (const path in mdPaths) {
    const file = mdPaths[path];
    const slug = path.split("/").slice(2)[0];
    if (file && typeof file === "object" && "metadata" in file && slug) {
      const metadata2 = file.metadata;
      const post = { ...metadata2, slug };
      if (post.image && !dev) {
        if (typeof post.image === "string" && post.image.startsWith("/posts")) {
          post.image = localToGithubURL({ src: post.image });
        } else if (Array.isArray(post.image)) {
          post.image = post.image.map((image) => {
            if (image.startsWith("/posts")) {
              return localToGithubURL({ src: image });
            }
            return image;
          });
        }
      }
      !post.draft && posts.push(post);
    }
  }
  posts = posts.sort(
    (first, second) => new Date(second.date).getTime() - new Date(first.date).getTime()
  );
  return posts;
};
const getSeriesPosts = async () => {
  const all_md_paths = /* @__PURE__ */ Object.assign({ "/series/guide-markdown-blog/config.md": __vite_glob_1_0, "/series/guide-markdown-blog/create-new-blog.md": __vite_glob_1_1, "/series/guide-markdown-blog/page.md": __vite_glob_1_2, "/series/guide-markdown-blog/setup.md": __vite_glob_1_3 });
  const SeriesCoverPageData = Object.fromEntries(
    Object.entries(all_md_paths).filter(([key]) => key.includes("/page.md"))
  );
  const blogsData = Object.fromEntries(
    Object.entries(all_md_paths).filter(([key]) => !key.includes("/page.md"))
  );
  const seriesPosts = [];
  for (const path in SeriesCoverPageData) {
    const coverFolder = path.split("/")[2];
    const file = SeriesCoverPageData[path];
    if (file && typeof file === "object" && "metadata" in file) {
      const metadata2 = file.metadata;
      const { tags, image } = metadata2;
      let subPosts = [];
      for (const blog in blogsData) {
        if (blog.startsWith(`/series/${coverFolder}/`)) {
          const subPost = blogsData[blog];
          if (subPost && typeof subPost === "object" && "metadata" in subPost) {
            const subPostMetadata = subPost.metadata;
            const subPostData = {
              ...subPostMetadata,
              // this is for making sure the slug is unique as cover folder cannot be a duplicate name
              // adding -spn{order} to the slug, so that we know it's a part of a series and we can render different ui for it
              slug: `${coverFolder}-spn${subPostMetadata.order}-${blog.split("/")[3].split(".")[0]}`
            };
            if (subPostData.tags) {
              subPostData.tags = [...tags, ...subPostData.tags];
            } else {
              subPostData.tags = tags;
            }
            if (!subPostData.image) {
              subPostData.image = image;
            }
            if (subPostData.image && !dev) {
              if (typeof subPostData.image === "string" && subPostData.image.startsWith("/series")) {
                subPostData.image = localToGithubURL({ src: subPostData.image });
              } else if (Array.isArray(subPostData.image)) {
                subPostData.image = subPostData.image.map((image2) => {
                  if (image2.startsWith("/series")) {
                    return localToGithubURL({ src: image2 });
                  }
                  return image2;
                });
              }
            }
            !subPostMetadata.draft && subPosts.push(subPostData);
          }
        }
      }
      subPosts = subPosts.sort((first, second) => first.order - second.order);
      if (metadata2.image && !dev) {
        if (typeof metadata2.image === "string" && metadata2.image.startsWith("/series")) {
          metadata2.image = localToGithubURL({ src: metadata2.image });
        } else if (Array.isArray(metadata2.image)) {
          metadata2.image = metadata2.image.map((image2) => {
            if (image2.startsWith("/series")) {
              return localToGithubURL({ src: image2 });
            }
            return image2;
          });
        }
      }
      !metadata2.draft && seriesPosts.push({
        ...metadata2,
        slug: subPosts[0].slug,
        subPosts,
        parts: subPosts.length,
        coverFolder
      });
    }
  }
  return seriesPosts.sort(
    (first, second) => new Date(second.date).getTime() - new Date(first.date).getTime()
  );
};
const getSeriesPostByCoverFolder = async (coverFolder) => {
  const seriesPosts = await getSeriesPosts();
  return seriesPosts.find((seriesPost) => seriesPost.coverFolder === coverFolder);
};
const tagToSlug = (tag) => {
  return tag.replace(/ /g, "-").toLowerCase();
};
const groupPostsByTag = async () => {
  const posts = await getPosts();
  const seriesPosts = await getSeriesPosts();
  const allTags = /* @__PURE__ */ new Set();
  function addTags(tags) {
    for (const tag of tags) {
      allTags.add(tag);
    }
  }
  for (const post of posts) {
    addTags(post.tags);
  }
  for (const seriesPost of seriesPosts) {
    addTags(seriesPost.tags);
    for (const subPost of seriesPost.subPosts) {
      addTags(subPost.tags);
    }
  }
  const uniqueTagsArray = Array.from(allTags);
  const postsByTag = {};
  const tagsSlugMap = {};
  for (const tag of uniqueTagsArray) {
    const slug = tagToSlug(tag);
    tagsSlugMap[slug] = tag;
  }
  for (const tag of uniqueTagsArray) {
    postsByTag[tag] = {
      posts: posts.filter((post) => post.tags.includes(tag)),
      count: posts.filter((post) => post.tags.includes(tag)).length,
      slug: tagToSlug(tag)
      // replace spaces with dashes and make it lowercase for the url
    };
    for (const seriesPost of seriesPosts) {
      if (seriesPost.tags.includes(tag)) {
        postsByTag[tag].posts.push(seriesPost);
        postsByTag[tag].count += 1;
      }
      for (const subPost of seriesPost.subPosts) {
        if (subPost.tags.includes(tag)) {
          postsByTag[tag].posts.push(subPost);
          postsByTag[tag].count += 1;
        }
      }
    }
  }
  uniqueTagsArray.forEach((tag) => {
    const filteredSeriesPosts = seriesPosts.filter((seriesPost) => seriesPost.tags.includes(tag));
    if (filteredSeriesPosts.length > 0) {
      ({
        seriesPosts: filteredSeriesPosts,
        count: filteredSeriesPosts.length
      });
    }
  });
  const filterPosts = (tag) => {
    if (postsByTag[tag]?.posts) {
      postsByTag[tag].posts = postsByTag[tag].posts.filter((post) => !post.subPosts);
      postsByTag[tag].count = postsByTag[tag].posts.length;
    }
  };
  for (const category in postsByTag) {
    filterPosts(category);
  }
  return {
    tagsSlugMap,
    uniqueTagsArray,
    postsByTag
  };
};
export {
  Blogcard as B,
  Command as C,
  Dialog_content as D,
  Page$5 as P,
  Root$1 as R,
  Search$1 as S,
  Tag$2 as T,
  __vite_glob_0_0 as _,
  getSeriesPosts as a,
  groupPostsByTag as b,
  Command_input as c,
  Command_empty as d,
  Command_group as e,
  Command_item as f,
  getPosts as g,
  Tag as h,
  Calendar$1 as i,
  getSeriesPostByCoverFolder as j,
  __vite_glob_0_1 as k,
  __vite_glob_0_2 as l,
  __vite_glob_0_3 as m,
  __vite_glob_0_4 as n,
  __vite_glob_0_5 as o,
  __vite_glob_1_0 as p,
  __vite_glob_1_1 as q,
  __vite_glob_1_2 as r,
  slide as s,
  tagToSlug as t,
  __vite_glob_1_3 as u
};
