import{s as fe,q as js,F as me,a as _,e as A,g as E,c as v,b as Ms,u as N,f as p,h as T,i as r,j as Os,t as D,d as g,o as x,J as Cs,m as I,K as us}from"./scheduler.m8nR5Aoa.js";import{S as _e,i as Ee,b as i,d,m,a as C,t as u,e as $}from"./index.DmaBKroe.js";import{g as he,a as Ce}from"./index.CF6Y6_XD.js";import{L as De,B as ge,P as ms}from"./8.mPDhRuym.js";import{P as k,H as Rs,U as ue,L as ds}from"./ul.BG4kpopR.js";import{I as $s}from"./img.D8KzVVhe.js";function we(c){let s;return{c(){s=D(`Imagine having over thousands of input features in your dataset and you've to train them all..well, sometimes we wish we could compress the dataset to less number of features. Right? well, we can do that using a special type of Neural Network called Auto-encoders.
So, let's have a brief introduction to Auto-encoders.`)},l(n){s=g(n,`Imagine having over thousands of input features in your dataset and you've to train them all..well, sometimes we wish we could compress the dataset to less number of features. Right? well, we can do that using a special type of Neural Network called Auto-encoders.
So, let's have a brief introduction to Auto-encoders.`)},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Ae(c){let s;return{c(){s=D("What in the world are Auto-encoders")},l(n){s=g(n,"What in the world are Auto-encoders")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function ve(c){let s,n="Auto-encoders",a;return{c(){s=A("strong"),s.textContent=n,a=D(" are a branch of neural networks which basically compresses the information of the input variables into a reduced dimensional space and then it recreate the input data set to train it all over again.")},l(o){s=v(o,"STRONG",{"data-svelte-h":!0}),N(s)!=="svelte-eec9jz"&&(s.textContent=n),a=g(o," are a branch of neural networks which basically compresses the information of the input variables into a reduced dimensional space and then it recreate the input data set to train it all over again.")},m(o,l){r(o,s,l),r(o,a,l)},p:x,d(o){o&&(p(s),p(a))}}}function be(c){let s;return{c(){s=D("Auto-encoder consists of 3 main components")},l(n){s=g(n,"Auto-encoder consists of 3 main components")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function ke(c){let s;return{c(){s=D("Encoder")},l(n){s=g(n,"Encoder")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function xe(c){let s;return{c(){s=D("Code")},l(n){s=g(n,"Code")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Te(c){let s;return{c(){s=D("Decoder")},l(n){s=g(n,"Decoder")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Ne(c){let s,n,a,o,l,f;return s=new ds({props:{$$slots:{default:[ke]},$$scope:{ctx:c}}}),a=new ds({props:{$$slots:{default:[xe]},$$scope:{ctx:c}}}),l=new ds({props:{$$slots:{default:[Te]},$$scope:{ctx:c}}}),{c(){i(s.$$.fragment),n=_(),i(a.$$.fragment),o=_(),i(l.$$.fragment)},l(y){d(s.$$.fragment,y),n=E(y),d(a.$$.fragment,y),o=E(y),d(l.$$.fragment,y)},m(y,w){m(s,y,w),r(y,n,w),m(a,y,w),r(y,o,w),m(l,y,w),f=!0},p(y,w){const F={};w&2&&(F.$$scope={dirty:w,ctx:y}),s.$set(F);const h={};w&2&&(h.$$scope={dirty:w,ctx:y}),a.$set(h);const b={};w&2&&(b.$$scope={dirty:w,ctx:y}),l.$set(b)},i(y){f||(C(s.$$.fragment,y),C(a.$$.fragment,y),C(l.$$.fragment,y),f=!0)},o(y){u(s.$$.fragment,y),u(a.$$.fragment,y),u(l.$$.fragment,y),f=!1},d(y){y&&(p(n),p(o)),$(s,y),$(a,y),$(l,y)}}}function Ie(c){let s,n="Encoder",a,o,l="The lower the size of the code, the higher the compression.";return{c(){s=A("strong"),s.textContent=n,a=D(": An encoder is a feed-forward, fully connected neural network that compresses the input into a latent space representation and encodes the input image as a compressed representation in a reduced dimension, and produces code. "),o=A("code"),o.textContent=l},l(f){s=v(f,"STRONG",{"data-svelte-h":!0}),N(s)!=="svelte-96kk1m"&&(s.textContent=n),a=g(f,": An encoder is a feed-forward, fully connected neural network that compresses the input into a latent space representation and encodes the input image as a compressed representation in a reduced dimension, and produces code. "),o=v(f,"CODE",{"data-svelte-h":!0}),N(o)!=="svelte-1oa53aa"&&(o.textContent=l)},m(f,y){r(f,s,y),r(f,a,y),r(f,o,y)},p:x,d(f){f&&(p(s),p(a),p(o))}}}function qe(c){let s,n="Code",a;return{c(){s=A("strong"),s.textContent=n,a=D(": This part of the network contains the reduced representation of the input that is fed into the decoder.")},l(o){s=v(o,"STRONG",{"data-svelte-h":!0}),N(s)!=="svelte-1pxl4t5"&&(s.textContent=n),a=g(o,": This part of the network contains the reduced representation of the input that is fed into the decoder.")},m(o,l){r(o,s,l),r(o,a,l)},p:x,d(o){o&&(p(s),p(a))}}}function Se(c){let s,n="Decoder",a;return{c(){s=A("strong"),s.textContent=n,a=D(": A decoder is also a feed-forward neural network that is similar to an encoder but the representation is the exact mirror image of the encoder. The decoder reconstructs the input back to the original dimensions from the code.")},l(o){s=v(o,"STRONG",{"data-svelte-h":!0}),N(s)!=="svelte-1di3a6e"&&(s.textContent=n),a=g(o,": A decoder is also a feed-forward neural network that is similar to an encoder but the representation is the exact mirror image of the encoder. The decoder reconstructs the input back to the original dimensions from the code.")},m(o,l){r(o,s,l),r(o,a,l)},p:x,d(o){o&&(p(s),p(a))}}}function Xe(c){let s;return{c(){s=D("Note: The dimensions of both input and output must be the same.")},l(n){s=g(n,"Note: The dimensions of both input and output must be the same.")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function ze(c){let s,n;return s=new k({props:{$$slots:{default:[Xe]},$$scope:{ctx:c}}}),{c(){i(s.$$.fragment)},l(a){d(s.$$.fragment,a)},m(a,o){m(s,a,o),n=!0},p(a,o){const l={};o&2&&(l.$$scope={dirty:o,ctx:a}),s.$set(l)},i(a){n||(C(s.$$.fragment,a),n=!0)},o(a){u(s.$$.fragment,a),n=!1},d(a){$(s,a)}}}function Le(c){let s;return{c(){s=D("first, the input passes through the encoder, which is a fully-connected ANN, to produce the code. The decoder, which has the similar ANN structure, then produces the output only using the code. The goal is to get an output identical with the input. Note that the decoder architecture is the mirror image of the encoder. This is not a requirement but it's typically the case. The only requirement is the dimensionality of the input and output needs to be the same. Anything in the middle can be played with.")},l(n){s=g(n,"first, the input passes through the encoder, which is a fully-connected ANN, to produce the code. The decoder, which has the similar ANN structure, then produces the output only using the code. The goal is to get an output identical with the input. Note that the decoder architecture is the mirror image of the encoder. This is not a requirement but it's typically the case. The only requirement is the dimensionality of the input and output needs to be the same. Anything in the middle can be played with.")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Me(c){let s;return{c(){s=D("Hyperparameters")},l(n){s=g(n,"Hyperparameters")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Oe(c){let s;return{c(){s=D("Auto Encoders can have many different hyperparameters but the very important ones are:")},l(n){s=g(n,"Auto Encoders can have many different hyperparameters but the very important ones are:")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Re(c){let s,n="Code size",a;return{c(){s=A("strong"),s.textContent=n,a=D(": number of nodes in the middle layer. Smaller size results in more compression.")},l(o){s=v(o,"STRONG",{"data-svelte-h":!0}),N(s)!=="svelte-1t4nlqc"&&(s.textContent=n),a=g(o,": number of nodes in the middle layer. Smaller size results in more compression.")},m(o,l){r(o,s,l),r(o,a,l)},p:x,d(o){o&&(p(s),p(a))}}}function je(c){let s,n="Number of layers",a;return{c(){s=A("strong"),s.textContent=n,a=D(": the auto-encoder can be as deep as we like. In the figure above we have 2 layers in both the encoder and decoder, without considering the input and output.")},l(o){s=v(o,"STRONG",{"data-svelte-h":!0}),N(s)!=="svelte-1my6g0"&&(s.textContent=n),a=g(o,": the auto-encoder can be as deep as we like. In the figure above we have 2 layers in both the encoder and decoder, without considering the input and output.")},m(o,l){r(o,s,l),r(o,a,l)},p:x,d(o){o&&(p(s),p(a))}}}function Ge(c){let s,n="Number of nodes per layer",a;return{c(){s=A("strong"),s.textContent=n,a=D(`: the auto-encoder architecture we're working on is called a stacked auto-encoder since the layers are stacked one after another. Usually stacked autoencoders look like a "sandwich". The number of nodes per layer decreases with each subsequent layer of the encoder and increases back in the decoder. Also, the decoder is symmetric to the encoder in terms of the layer structure. As noted above this is not necessary and we have total control over these parameters.`)},l(o){s=v(o,"STRONG",{"data-svelte-h":!0}),N(s)!=="svelte-1x5vluh"&&(s.textContent=n),a=g(o,`: the auto-encoder architecture we're working on is called a stacked auto-encoder since the layers are stacked one after another. Usually stacked autoencoders look like a "sandwich". The number of nodes per layer decreases with each subsequent layer of the encoder and increases back in the decoder. Also, the decoder is symmetric to the encoder in terms of the layer structure. As noted above this is not necessary and we have total control over these parameters.`)},m(o,l){r(o,s,l),r(o,a,l)},p:x,d(o){o&&(p(s),p(a))}}}function He(c){let s,n="Loss function",a;return{c(){s=A("strong"),s.textContent=n,a=D(": we either use mean squared error (mse) or binary cross-entropy. If the input values are in the range [0, 1] then we typically use cross-entropy, otherwise, we use the mean squared error.")},l(o){s=v(o,"STRONG",{"data-svelte-h":!0}),N(s)!=="svelte-1y07lvd"&&(s.textContent=n),a=g(o,": we either use mean squared error (mse) or binary cross-entropy. If the input values are in the range [0, 1] then we typically use cross-entropy, otherwise, we use the mean squared error.")},m(o,l){r(o,s,l),r(o,a,l)},p:x,d(o){o&&(p(s),p(a))}}}function Ve(c){let s,n,a,o,l,f,y,w;return s=new ds({props:{$$slots:{default:[Re]},$$scope:{ctx:c}}}),a=new ds({props:{$$slots:{default:[je]},$$scope:{ctx:c}}}),l=new ds({props:{$$slots:{default:[Ge]},$$scope:{ctx:c}}}),y=new ds({props:{$$slots:{default:[He]},$$scope:{ctx:c}}}),{c(){i(s.$$.fragment),n=_(),i(a.$$.fragment),o=_(),i(l.$$.fragment),f=_(),i(y.$$.fragment)},l(F){d(s.$$.fragment,F),n=E(F),d(a.$$.fragment,F),o=E(F),d(l.$$.fragment,F),f=E(F),d(y.$$.fragment,F)},m(F,h){m(s,F,h),r(F,n,h),m(a,F,h),r(F,o,h),m(l,F,h),r(F,f,h),m(y,F,h),w=!0},p(F,h){const b={};h&2&&(b.$$scope={dirty:h,ctx:F}),s.$set(b);const os={};h&2&&(os.$$scope={dirty:h,ctx:F}),a.$set(os);const q={};h&2&&(q.$$scope={dirty:h,ctx:F}),l.$set(q);const ts={};h&2&&(ts.$$scope={dirty:h,ctx:F}),y.$set(ts)},i(F){w||(C(s.$$.fragment,F),C(a.$$.fragment,F),C(l.$$.fragment,F),C(y.$$.fragment,F),w=!0)},o(F){u(s.$$.fragment,F),u(a.$$.fragment,F),u(l.$$.fragment,F),u(y.$$.fragment,F),w=!1},d(F){F&&(p(n),p(o),p(f)),$(s,F),$(a,F),$(l,F),$(y,F)}}}function We(c){let s;return{c(){s=D("Code Implementation")},l(n){s=g(n,"Code Implementation")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Ue(c){let s;return{c(){s=D("Let's look at how we can do dimensionality reduction using auto-encoders. Let's take a dataset that has 12 features and 8664 columns. Now our goal is to compress the dataset into 6 features.")},l(n){s=g(n,"Let's look at how we can do dimensionality reduction using auto-encoders. Let's take a dataset that has 12 features and 8664 columns. Now our goal is to compress the dataset into 6 features.")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Pe(c){let s;return{c(){s=D("Let us scale the data so that all our data points lie in the same range")},l(n){s=g(n,"Let us scale the data so that all our data points lie in the same range")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Be(c){let s,n=`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> sklearn</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">preprocessing </span><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> MinMaxScaler</span></span>
<span data-line=""><span style="color: #C8D3F5">scaler </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> MinMaxScaler</span><span style="color: #86E1FC">()</span></span>
<span data-line=""><span style="color: #C8D3F5">df_scaled </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> scaler</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">fit_transform</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">df</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">X_train_df </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> pd</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">DataFrame</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">df_scaled</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">columns</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">df</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">columns</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">X_train_df</span></span></code>`,a;return{c(){s=new Cs(!1),a=I(),this.h()},l(o){s=us(o,!1),a=I(),this.h()},h(){s.a=a},m(o,l){s.m(n,o,l),r(o,a,l)},p:x,d(o){o&&(p(a),s.d())}}}function Je(c){let s,n=`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> sklearn</span><span style="color: #212121">.</span><span style="color: #24292EFF">preprocessing </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> MinMaxScaler</span></span>
<span data-line=""><span style="color: #24292EFF">scaler </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">MinMaxScaler</span><span style="color: #212121">()</span></span>
<span data-line=""><span style="color: #24292EFF">df_scaled </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> scaler</span><span style="color: #212121">.</span><span style="color: #6F42C1">fit_transform</span><span style="color: #212121">(df)</span></span>
<span data-line=""><span style="color: #24292EFF">X_train_df </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> pd</span><span style="color: #212121">.</span><span style="color: #6F42C1">DataFrame</span><span style="color: #212121">(df_scaled, columns</span><span style="color: #D32F2F">=</span><span style="color: #212121">df.columns)</span></span>
<span data-line=""><span style="color: #24292EFF">X_train_df</span></span></code>`,a;return{c(){s=new Cs(!1),a=I(),this.h()},l(o){s=us(o,!1),a=I(),this.h()},h(){s.a=a},m(o,l){s.m(n,o,l),r(o,a,l)},p:x,d(o){o&&(p(a),s.d())}}}function Ke(c){let s;return{c(){s=D("Let's build an auto-encoder with a code size of 6.")},l(n){s=g(n,"Let's build an auto-encoder with a code size of 6.")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function Ye(c){let s,n=`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> tensorflow </span><span style="color: #86E1FC">as</span><span style="color: #C8D3F5"> tf</span></span>
<span data-line=""><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> tensorflow</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">keras</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">layers </span><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> Input</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> Dense</span></span>
<span data-line=""><span style="color: #86E1FC">from</span><span style="color: #C8D3F5"> tensorflow</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">keras</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">models </span><span style="color: #86E1FC">import</span><span style="color: #C8D3F5"> Model</span></span>
<span data-line=""><span style="color: #858AA6"># 12, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 12</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6"># encoder</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_input </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Input</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">shape</span><span style="color: #86E1FC">=(</span><span style="color: #C8D3F5">n_features</span><span style="color: #86E1FC">),</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_input</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer1 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">11</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer1</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_input</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer2 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">10</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer2</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer1</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer3 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">9</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer3</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer2</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer4 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">8</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer4</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer3</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder_layer5 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">7</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">encoder_layer5</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer4</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">latent_space </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">6</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">latent_space</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">encoder_layer5</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #858AA6">#decoder</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer1 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">7</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer1</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">latent_space</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer2 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">8</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer2</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer1</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer3 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">9</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer3</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer2</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer4 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">10</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer4</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer3</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">decoder_layer5 </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">11</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">relu</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">decoder_layer5</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer4</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">output </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Dense</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">n_features</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">activation</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">sigmoid</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Output</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)(</span><span style="color: #C8D3F5">decoder_layer5</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">autoencoder </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Model</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">encoder_input</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> output</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">name</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">Autoencoder</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C8D3F5">autoencoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">compile</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">optimizer</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">adam</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                    </span><span style="color: #FCA7EA">loss</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">tf</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">keras</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">losses</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">mean_squared_error</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">autoencoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">summary</span><span style="color: #86E1FC">()</span></span></code>`,a;return{c(){s=new Cs(!1),a=I(),this.h()},l(o){s=us(o,!1),a=I(),this.h()},h(){s.a=a},m(o,l){s.m(n,o,l),r(o,a,l)},p:x,d(o){o&&(p(a),s.d())}}}function Qe(c){let s,n=`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> tensorflow </span><span style="color: #D32F2F">as</span><span style="color: #24292EFF"> tf</span></span>
<span data-line=""><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> tensorflow</span><span style="color: #212121">.</span><span style="color: #24292EFF">keras</span><span style="color: #212121">.</span><span style="color: #24292EFF">layers </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> Input</span><span style="color: #212121">,</span><span style="color: #24292EFF"> Dense</span></span>
<span data-line=""><span style="color: #D32F2F">from</span><span style="color: #24292EFF"> tensorflow</span><span style="color: #212121">.</span><span style="color: #24292EFF">keras</span><span style="color: #212121">.</span><span style="color: #24292EFF">models </span><span style="color: #D32F2F">import</span><span style="color: #24292EFF"> Model</span></span>
<span data-line=""><span style="color: #C2C3C5"># 12, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 12</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5"># encoder</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_input </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Input</span><span style="color: #212121">(shape</span><span style="color: #D32F2F">=</span><span style="color: #212121">(n_features), name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_input'</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer1 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">11</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer1'</span><span style="color: #212121">)(encoder_input)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer2 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">10</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer2'</span><span style="color: #212121">)(encoder_layer1)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer3 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">9</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer3'</span><span style="color: #212121">)(encoder_layer2)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer4 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">8</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer4'</span><span style="color: #212121">)(encoder_layer3)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder_layer5 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">7</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'encoder_layer5'</span><span style="color: #212121">)(encoder_layer4)</span></span>
<span data-line=""><span style="color: #24292EFF">latent_space </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">6</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'latent_space'</span><span style="color: #212121">)(encoder_layer5)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #C2C3C5">#decoder</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer1 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">7</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer1'</span><span style="color: #212121">)(latent_space)</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer2 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">8</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer2'</span><span style="color: #212121">)(decoder_layer1)</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer3 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">9</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer3'</span><span style="color: #212121">)(decoder_layer2)</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer4 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">10</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer4'</span><span style="color: #212121">)(decoder_layer3)</span></span>
<span data-line=""><span style="color: #24292EFF">decoder_layer5 </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(</span><span style="color: #1976D2">11</span><span style="color: #212121">, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'relu'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'decoder_layer5'</span><span style="color: #212121">)(decoder_layer4)</span></span>
<span data-line=""><span style="color: #24292EFF">output </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Dense</span><span style="color: #212121">(n_features, activation</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'sigmoid'</span><span style="color: #212121">, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'Output'</span><span style="color: #212121">)(decoder_layer5)</span></span>
<span data-line=""><span style="color: #24292EFF">autoencoder </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Model</span><span style="color: #212121">(encoder_input, output, name</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'Autoencoder'</span><span style="color: #212121">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color: #24292EFF">autoencoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">compile</span><span style="color: #212121">(optimizer</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'adam'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #212121">                    loss</span><span style="color: #D32F2F">=</span><span style="color: #212121">tf.keras.losses.mean_squared_error)</span></span>
<span data-line=""><span style="color: #24292EFF">autoencoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">summary</span><span style="color: #212121">()</span></span></code>`,a;return{c(){s=new Cs(!1),a=I(),this.h()},l(o){s=us(o,!1),a=I(),this.h()},h(){s.a=a},m(o,l){s.m(n,o,l),r(o,a,l)},p:x,d(o){o&&(p(a),s.d())}}}function Ze(c){let s;return{c(){s=D("let's train the model")},l(n){s=g(n,"let's train the model")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function sn(c){let s,n=`<code data-language="py" data-theme="dark" style="display: grid;"><span data-line=""><span style="color: #C8D3F5">history </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> autoencoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">fit</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train_df</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                          X_train_df</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                          </span><span style="color: #FCA7EA">epochs</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">100</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                          </span><span style="color: #FCA7EA">steps_per_epoch</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">10</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                          </span><span style="color: #FCA7EA">verbose</span><span style="color: #86E1FC">=</span><span style="color: #FF966C">0</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #858AA6"># only the encoder part</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> Model</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">inputs</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">encoder_input</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> </span><span style="color: #FCA7EA">outputs</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">latent_space</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">compile</span><span style="color: #86E1FC">(</span><span style="color: #FCA7EA">optimizer</span><span style="color: #86E1FC">=</span><span style="color: #86E1FC">'</span><span style="color: #C3E88D">adam</span><span style="color: #86E1FC">'</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                        </span><span style="color: #FCA7EA">loss</span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5">tf</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">keras</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">losses</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">mean_squared_error</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">X_train_encode </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> encoder</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">predict</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train_df</span><span style="color: #86E1FC">)</span></span>
<span data-line=""><span style="color: #C8D3F5">encoded_train </span><span style="color: #86E1FC">=</span><span style="color: #C8D3F5"> pd</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">DataFrame</span><span style="color: #86E1FC">(</span><span style="color: #C8D3F5">X_train_encode</span><span style="color: #86E1FC">,</span></span>
<span data-line=""><span style="color: #C8D3F5">                             </span><span style="color: #FCA7EA">columns</span><span style="color: #86E1FC">=[</span><span style="color: #C099FF">f</span><span style="color: #C3E88D">"X</span><span style="color: #FF98A4">&#123;</span><span style="color: #C8D3F5">x</span><span style="color: #FF98A4">&#125;</span><span style="color: #C3E88D">"</span><span style="color: #C8D3F5"> </span><span style="color: #86E1FC">for</span><span style="color: #C8D3F5"> x </span><span style="color: #86E1FC">in</span><span style="color: #C8D3F5"> </span><span style="color: #65BCFF">range</span><span style="color: #86E1FC">(</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">,</span><span style="color: #C8D3F5"> X_train_encode</span><span style="color: #86E1FC">.</span><span style="color: #C8D3F5">shape</span><span style="color: #86E1FC">[</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">]+</span><span style="color: #FF966C">1</span><span style="color: #86E1FC">)])</span></span></code>`,a;return{c(){s=new Cs(!1),a=I(),this.h()},l(o){s=us(o,!1),a=I(),this.h()},h(){s.a=a},m(o,l){s.m(n,o,l),r(o,a,l)},p:x,d(o){o&&(p(a),s.d())}}}function en(c){let s,n=`<code data-language="py" data-theme="light" style="display: grid;"><span data-line=""><span style="color: #24292EFF">history </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> autoencoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">fit</span><span style="color: #212121">(X_train_df,</span></span>
<span data-line=""><span style="color: #212121">                          X_train_df,</span></span>
<span data-line=""><span style="color: #212121">                          epochs</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">100</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #212121">                          steps_per_epoch</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">10</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #212121">                          verbose</span><span style="color: #D32F2F">=</span><span style="color: #1976D2">0</span><span style="color: #212121">)</span></span>
<span data-line=""><span style="color: #C2C3C5"># only the encoder part</span></span>
<span data-line=""><span style="color: #24292EFF">encoder </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> </span><span style="color: #6F42C1">Model</span><span style="color: #212121">(inputs</span><span style="color: #D32F2F">=</span><span style="color: #212121">encoder_input, outputs</span><span style="color: #D32F2F">=</span><span style="color: #212121">latent_space)</span></span>
<span data-line=""><span style="color: #24292EFF">encoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">compile</span><span style="color: #212121">(optimizer</span><span style="color: #D32F2F">=</span><span style="color: #22863A">'adam'</span><span style="color: #212121">,</span></span>
<span data-line=""><span style="color: #212121">                        loss</span><span style="color: #D32F2F">=</span><span style="color: #212121">tf.keras.losses.mean_squared_error)</span></span>
<span data-line=""><span style="color: #24292EFF">X_train_encode </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> encoder</span><span style="color: #212121">.</span><span style="color: #6F42C1">predict</span><span style="color: #212121">(X_train_df)</span></span>
<span data-line=""><span style="color: #24292EFF">encoded_train </span><span style="color: #D32F2F">=</span><span style="color: #24292EFF"> pd</span><span style="color: #212121">.</span><span style="color: #6F42C1">DataFrame</span><span style="color: #212121">(X_train_encode,</span></span>
<span data-line=""><span style="color: #212121">                             columns</span><span style="color: #D32F2F">=</span><span style="color: #212121">[</span><span style="color: #D32F2F">f</span><span style="color: #22863A">"X</span><span style="color: #1976D2">&#123;</span><span style="color: #212121">x</span><span style="color: #1976D2">&#125;</span><span style="color: #22863A">"</span><span style="color: #212121"> </span><span style="color: #D32F2F">for</span><span style="color: #212121"> x </span><span style="color: #D32F2F">in</span><span style="color: #212121"> </span><span style="color: #6F42C1">range</span><span style="color: #212121">(</span><span style="color: #1976D2">1</span><span style="color: #212121">, X_train_encode.shape[</span><span style="color: #1976D2">1</span><span style="color: #212121">]</span><span style="color: #D32F2F">+</span><span style="color: #1976D2">1</span><span style="color: #212121">)])</span></span></code>`,a;return{c(){s=new Cs(!1),a=I(),this.h()},l(o){s=us(o,!1),a=I(),this.h()},h(){s.a=a},m(o,l){s.m(n,o,l),r(o,a,l)},p:x,d(o){o&&(p(a),s.d())}}}function nn(c){let s;return{c(){s=D("We can see that output from the encoder which compressed our dataset into 6 features.")},l(n){s=g(n,"We can see that output from the encoder which compressed our dataset into 6 features.")},m(n,a){r(n,s,a)},d(n){n&&p(s)}}}function an(c){let s,n,a,o,l,f,y,w,F,h,b,os,q,ts,R,fs,j,_s,G,Es,H,hs,V,Ds,W,gs,U,ws,P,As,ls,vs,B,bs,S,J,X,Gs="autoencoder.py",K,ks,ps,xs,Y,Ts,z,Q,L,Hs="autoencoder.py",Z,Ns,ss,Is,M,es,O,Vs="autoencoder.py",ns,qs,rs,Ss,cs,Xs,as,zs,ys,Ls;return s=new k({props:{$$slots:{default:[we]},$$scope:{ctx:c}}}),a=new Rs({props:{id:"what-in-the-world-are-auto-encoders",headerTag:"h2",$$slots:{default:[Ae]},$$scope:{ctx:c}}}),l=new k({props:{$$slots:{default:[ve]},$$scope:{ctx:c}}}),y=new k({props:{$$slots:{default:[be]},$$scope:{ctx:c}}}),F=new ue({props:{$$slots:{default:[Ne]},$$scope:{ctx:c}}}),b=new k({props:{$$slots:{default:[Ie]},$$scope:{ctx:c}}}),q=new k({props:{$$slots:{default:[qe]},$$scope:{ctx:c}}}),R=new k({props:{$$slots:{default:[Se]},$$scope:{ctx:c}}}),j=new ge({props:{$$slots:{default:[ze]},$$scope:{ctx:c}}}),G=new k({props:{$$slots:{default:[Le]},$$scope:{ctx:c}}}),H=new Rs({props:{id:"hyperparameters",headerTag:"h2",$$slots:{default:[Me]},$$scope:{ctx:c}}}),V=new k({props:{$$slots:{default:[Oe]},$$scope:{ctx:c}}}),W=new ue({props:{$$slots:{default:[Ve]},$$scope:{ctx:c}}}),U=new Rs({props:{id:"code-implementation",headerTag:"h2",$$slots:{default:[We]},$$scope:{ctx:c}}}),P=new k({props:{$$slots:{default:[Ue]},$$scope:{ctx:c}}}),ls=new $s({props:{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*5Lw8YLwLpAsq9wTNdSyDUA.jpeg",alt:"Original dataset with 12 features"}}),B=new k({props:{$$slots:{default:[Pe]},$$scope:{ctx:c}}}),J=new ms({props:{class:"Moonlight II",tabindex:"0","data-language":"py","data-theme":"dark",$$slots:{default:[Be]},$$scope:{ctx:c}}}),K=new ms({props:{class:"min-light",tabindex:"0","data-language":"py","data-theme":"light",__title__:"autoencoder.py",$$slots:{default:[Je]},$$scope:{ctx:c}}}),ps=new $s({props:{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*6whoBrbY9x-2gzxbjJhWww.jpeg",alt:"dataset after scaling"}}),Y=new k({props:{$$slots:{default:[Ke]},$$scope:{ctx:c}}}),Q=new ms({props:{class:"Moonlight II",tabindex:"0","data-language":"py","data-theme":"dark",$$slots:{default:[Ye]},$$scope:{ctx:c}}}),Z=new ms({props:{class:"min-light",tabindex:"0","data-language":"py","data-theme":"light",__title__:"autoencoder.py",$$slots:{default:[Qe]},$$scope:{ctx:c}}}),ss=new k({props:{$$slots:{default:[Ze]},$$scope:{ctx:c}}}),es=new ms({props:{class:"Moonlight II",tabindex:"0","data-language":"py","data-theme":"dark",$$slots:{default:[sn]},$$scope:{ctx:c}}}),ns=new ms({props:{class:"min-light",tabindex:"0","data-language":"py","data-theme":"light",__title__:"autoencoder.py",$$slots:{default:[en]},$$scope:{ctx:c}}}),rs=new $s({props:{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*7y62pJS6SXaorbOvOuW_ew.jpeg",alt:"autoencoder model summary"}}),cs=new $s({props:{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ADFWIJH8y935y_q4YfNtlg.jpeg",alt:"Compressed version of the original (12 features) dataset with 6 features"}}),as=new k({props:{$$slots:{default:[nn]},$$scope:{ctx:c}}}),ys=new $s({props:{src:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*_lKNXKfS443uMV1WfyzwGg.jpeg",alt:"Input Vs. Reconstruction plot. The red shaded portion shows the error between Original vs Reconstructed data."}}),{c(){i(s.$$.fragment),n=_(),i(a.$$.fragment),o=_(),i(l.$$.fragment),f=_(),i(y.$$.fragment),w=_(),i(F.$$.fragment),h=_(),i(b.$$.fragment),os=_(),i(q.$$.fragment),ts=_(),i(R.$$.fragment),fs=_(),i(j.$$.fragment),_s=_(),i(G.$$.fragment),Es=_(),i(H.$$.fragment),hs=_(),i(V.$$.fragment),Ds=_(),i(W.$$.fragment),gs=_(),i(U.$$.fragment),ws=_(),i(P.$$.fragment),As=_(),i(ls.$$.fragment),vs=_(),i(B.$$.fragment),bs=_(),S=A("div"),i(J.$$.fragment),X=A("div"),X.textContent=Gs,i(K.$$.fragment),ks=_(),i(ps.$$.fragment),xs=_(),i(Y.$$.fragment),Ts=_(),z=A("div"),i(Q.$$.fragment),L=A("div"),L.textContent=Hs,i(Z.$$.fragment),Ns=_(),i(ss.$$.fragment),Is=_(),M=A("div"),i(es.$$.fragment),O=A("div"),O.textContent=Vs,i(ns.$$.fragment),qs=_(),i(rs.$$.fragment),Ss=_(),i(cs.$$.fragment),Xs=_(),i(as.$$.fragment),zs=_(),i(ys.$$.fragment),this.h()},l(e){d(s.$$.fragment,e),n=E(e),d(a.$$.fragment,e),o=E(e),d(l.$$.fragment,e),f=E(e),d(y.$$.fragment,e),w=E(e),d(F.$$.fragment,e),h=E(e),d(b.$$.fragment,e),os=E(e),d(q.$$.fragment,e),ts=E(e),d(R.$$.fragment,e),fs=E(e),d(j.$$.fragment,e),_s=E(e),d(G.$$.fragment,e),Es=E(e),d(H.$$.fragment,e),hs=E(e),d(V.$$.fragment,e),Ds=E(e),d(W.$$.fragment,e),gs=E(e),d(U.$$.fragment,e),ws=E(e),d(P.$$.fragment,e),As=E(e),d(ls.$$.fragment,e),vs=E(e),d(B.$$.fragment,e),bs=E(e),S=v(e,"DIV",{"data-rehype-pretty-code-fragment":!0});var t=Ms(S);d(J.$$.fragment,t),X=v(t,"DIV",{"data-rehype-pretty-code-title":!0,"data-language":!0,"data-theme":!0,"data-svelte-h":!0}),N(X)!=="svelte-1pd9nkw"&&(X.textContent=Gs),d(K.$$.fragment,t),t.forEach(p),ks=E(e),d(ps.$$.fragment,e),xs=E(e),d(Y.$$.fragment,e),Ts=E(e),z=v(e,"DIV",{"data-rehype-pretty-code-fragment":!0});var Fs=Ms(z);d(Q.$$.fragment,Fs),L=v(Fs,"DIV",{"data-rehype-pretty-code-title":!0,"data-language":!0,"data-theme":!0,"data-svelte-h":!0}),N(L)!=="svelte-1pd9nkw"&&(L.textContent=Hs),d(Z.$$.fragment,Fs),Fs.forEach(p),Ns=E(e),d(ss.$$.fragment,e),Is=E(e),M=v(e,"DIV",{"data-rehype-pretty-code-fragment":!0});var is=Ms(M);d(es.$$.fragment,is),O=v(is,"DIV",{"data-rehype-pretty-code-title":!0,"data-language":!0,"data-theme":!0,"data-svelte-h":!0}),N(O)!=="svelte-1pd9nkw"&&(O.textContent=Vs),d(ns.$$.fragment,is),is.forEach(p),qs=E(e),d(rs.$$.fragment,e),Ss=E(e),d(cs.$$.fragment,e),Xs=E(e),d(as.$$.fragment,e),zs=E(e),d(ys.$$.fragment,e),this.h()},h(){T(X,"data-rehype-pretty-code-title",""),T(X,"data-language","py"),T(X,"data-theme","light"),T(S,"data-rehype-pretty-code-fragment",""),T(L,"data-rehype-pretty-code-title",""),T(L,"data-language","py"),T(L,"data-theme","light"),T(z,"data-rehype-pretty-code-fragment",""),T(O,"data-rehype-pretty-code-title",""),T(O,"data-language","py"),T(O,"data-theme","light"),T(M,"data-rehype-pretty-code-fragment","")},m(e,t){m(s,e,t),r(e,n,t),m(a,e,t),r(e,o,t),m(l,e,t),r(e,f,t),m(y,e,t),r(e,w,t),m(F,e,t),r(e,h,t),m(b,e,t),r(e,os,t),m(q,e,t),r(e,ts,t),m(R,e,t),r(e,fs,t),m(j,e,t),r(e,_s,t),m(G,e,t),r(e,Es,t),m(H,e,t),r(e,hs,t),m(V,e,t),r(e,Ds,t),m(W,e,t),r(e,gs,t),m(U,e,t),r(e,ws,t),m(P,e,t),r(e,As,t),m(ls,e,t),r(e,vs,t),m(B,e,t),r(e,bs,t),r(e,S,t),m(J,S,null),Os(S,X),m(K,S,null),r(e,ks,t),m(ps,e,t),r(e,xs,t),m(Y,e,t),r(e,Ts,t),r(e,z,t),m(Q,z,null),Os(z,L),m(Z,z,null),r(e,Ns,t),m(ss,e,t),r(e,Is,t),r(e,M,t),m(es,M,null),Os(M,O),m(ns,M,null),r(e,qs,t),m(rs,e,t),r(e,Ss,t),m(cs,e,t),r(e,Xs,t),m(as,e,t),r(e,zs,t),m(ys,e,t),Ls=!0},p(e,t){const Fs={};t&2&&(Fs.$$scope={dirty:t,ctx:e}),s.$set(Fs);const is={};t&2&&(is.$$scope={dirty:t,ctx:e}),a.$set(is);const Ws={};t&2&&(Ws.$$scope={dirty:t,ctx:e}),l.$set(Ws);const Us={};t&2&&(Us.$$scope={dirty:t,ctx:e}),y.$set(Us);const Ps={};t&2&&(Ps.$$scope={dirty:t,ctx:e}),F.$set(Ps);const Bs={};t&2&&(Bs.$$scope={dirty:t,ctx:e}),b.$set(Bs);const Js={};t&2&&(Js.$$scope={dirty:t,ctx:e}),q.$set(Js);const Ks={};t&2&&(Ks.$$scope={dirty:t,ctx:e}),R.$set(Ks);const Ys={};t&2&&(Ys.$$scope={dirty:t,ctx:e}),j.$set(Ys);const Qs={};t&2&&(Qs.$$scope={dirty:t,ctx:e}),G.$set(Qs);const Zs={};t&2&&(Zs.$$scope={dirty:t,ctx:e}),H.$set(Zs);const se={};t&2&&(se.$$scope={dirty:t,ctx:e}),V.$set(se);const ee={};t&2&&(ee.$$scope={dirty:t,ctx:e}),W.$set(ee);const ne={};t&2&&(ne.$$scope={dirty:t,ctx:e}),U.$set(ne);const ae={};t&2&&(ae.$$scope={dirty:t,ctx:e}),P.$set(ae);const oe={};t&2&&(oe.$$scope={dirty:t,ctx:e}),B.$set(oe);const te={};t&2&&(te.$$scope={dirty:t,ctx:e}),J.$set(te);const le={};t&2&&(le.$$scope={dirty:t,ctx:e}),K.$set(le);const pe={};t&2&&(pe.$$scope={dirty:t,ctx:e}),Y.$set(pe);const re={};t&2&&(re.$$scope={dirty:t,ctx:e}),Q.$set(re);const ce={};t&2&&(ce.$$scope={dirty:t,ctx:e}),Z.$set(ce);const ye={};t&2&&(ye.$$scope={dirty:t,ctx:e}),ss.$set(ye);const Fe={};t&2&&(Fe.$$scope={dirty:t,ctx:e}),es.$set(Fe);const ie={};t&2&&(ie.$$scope={dirty:t,ctx:e}),ns.$set(ie);const de={};t&2&&(de.$$scope={dirty:t,ctx:e}),as.$set(de)},i(e){Ls||(C(s.$$.fragment,e),C(a.$$.fragment,e),C(l.$$.fragment,e),C(y.$$.fragment,e),C(F.$$.fragment,e),C(b.$$.fragment,e),C(q.$$.fragment,e),C(R.$$.fragment,e),C(j.$$.fragment,e),C(G.$$.fragment,e),C(H.$$.fragment,e),C(V.$$.fragment,e),C(W.$$.fragment,e),C(U.$$.fragment,e),C(P.$$.fragment,e),C(ls.$$.fragment,e),C(B.$$.fragment,e),C(J.$$.fragment,e),C(K.$$.fragment,e),C(ps.$$.fragment,e),C(Y.$$.fragment,e),C(Q.$$.fragment,e),C(Z.$$.fragment,e),C(ss.$$.fragment,e),C(es.$$.fragment,e),C(ns.$$.fragment,e),C(rs.$$.fragment,e),C(cs.$$.fragment,e),C(as.$$.fragment,e),C(ys.$$.fragment,e),Ls=!0)},o(e){u(s.$$.fragment,e),u(a.$$.fragment,e),u(l.$$.fragment,e),u(y.$$.fragment,e),u(F.$$.fragment,e),u(b.$$.fragment,e),u(q.$$.fragment,e),u(R.$$.fragment,e),u(j.$$.fragment,e),u(G.$$.fragment,e),u(H.$$.fragment,e),u(V.$$.fragment,e),u(W.$$.fragment,e),u(U.$$.fragment,e),u(P.$$.fragment,e),u(ls.$$.fragment,e),u(B.$$.fragment,e),u(J.$$.fragment,e),u(K.$$.fragment,e),u(ps.$$.fragment,e),u(Y.$$.fragment,e),u(Q.$$.fragment,e),u(Z.$$.fragment,e),u(ss.$$.fragment,e),u(es.$$.fragment,e),u(ns.$$.fragment,e),u(rs.$$.fragment,e),u(cs.$$.fragment,e),u(as.$$.fragment,e),u(ys.$$.fragment,e),Ls=!1},d(e){e&&(p(n),p(o),p(f),p(w),p(h),p(os),p(ts),p(fs),p(_s),p(Es),p(hs),p(Ds),p(gs),p(ws),p(As),p(vs),p(bs),p(S),p(ks),p(xs),p(Ts),p(z),p(Ns),p(Is),p(M),p(qs),p(Ss),p(Xs),p(zs)),$(s,e),$(a,e),$(l,e),$(y,e),$(F,e),$(b,e),$(q,e),$(R,e),$(j,e),$(G,e),$(H,e),$(V,e),$(W,e),$(U,e),$(P,e),$(ls,e),$(B,e),$(J),$(K),$(ps,e),$(Y,e),$(Q),$(Z),$(ss,e),$(es),$(ns),$(rs,e),$(cs,e),$(as,e),$(ys,e)}}}function on(c){let s,n;const a=[c[0],$e];let o={$$slots:{default:[an]},$$scope:{ctx:c}};for(let l=0;l<a.length;l+=1)o=js(o,a[l]);return s=new De({props:o}),{c(){i(s.$$.fragment)},l(l){d(s.$$.fragment,l)},m(l,f){m(s,l,f),n=!0},p(l,[f]){const y=f&1?he(a,[f&1&&Ce(l[0]),f&0&&Ce($e)]):{};f&2&&(y.$$scope={dirty:f,ctx:l}),s.$set(y)},i(l){n||(C(s.$$.fragment,l),n=!0)},o(l){u(s.$$.fragment,l),n=!1},d(l){$(s,l)}}}const $e={title:"Dimensionality Reduction using Auto-Encoders",description:"Let's look at how we can perform the dimensionality reduction using the Auto-Encoders using Tensorflow.",date:"2023-11-10",tags:["Tensorflow","Deep Learning"],image:"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*DcsT4AtAq8dxqbDHP_Uppg.jpeg",draft:!1};function tn(c,s,n){return c.$$set=a=>{n(0,s=js(js({},s),me(a)))},s=me(s),[s]}class dn extends _e{constructor(s){super(),Ee(this,s,tn,on,fe,{})}}export{dn as default,$e as metadata};
